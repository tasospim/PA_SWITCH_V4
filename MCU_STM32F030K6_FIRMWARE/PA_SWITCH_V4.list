
PA_SWITCH_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08005550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000048c  20000020  0800556c  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200004ac  0800556c  000204ac  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a004  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034ae  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000918b  00000000  00000000  0003d4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d10  00000000  00000000  00046688  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d10  00000000  00000000  00047398  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007490  00000000  00000000  000480a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006442  00000000  00000000  0004f538  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005597a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021a8  00000000  00000000  000559f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005490 	.word	0x08005490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08005490 	.word	0x08005490

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f001 ffaa 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 fa9a 	bl	8000768 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2200      	movs	r2, #0
 8000236:	0021      	movs	r1, r4
 8000238:	2001      	movs	r0, #1
 800023a:	4240      	negs	r0, r0
 800023c:	f000 fa56 	bl	80006ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
{
 8000244:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	2110      	movs	r1, #16
 800024c:	430b      	orrs	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000250:	2000      	movs	r0, #0
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f004 ff9f 	bl	8005198 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	200000a0 	.word	0x200000a0

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	200000a0 	.word	0x200000a0

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000286:	f7ff fff5 	bl	8000274 <HAL_GetTick>
 800028a:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 800028c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800028e:	1c63      	adds	r3, r4, #1
 8000290:	1e5a      	subs	r2, r3, #1
 8000292:	4193      	sbcs	r3, r2
 8000294:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000296:	f7ff ffed 	bl	8000274 <HAL_GetTick>
 800029a:	1b40      	subs	r0, r0, r5
 800029c:	42a0      	cmp	r0, r4
 800029e:	d3fa      	bcc.n	8000296 <HAL_Delay+0x16>
  {
  }
}
 80002a0:	b003      	add	sp, #12
 80002a2:	bd30      	pop	{r4, r5, pc}

080002a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002aa:	2300      	movs	r3, #0
 80002ac:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ae:	6802      	ldr	r2, [r0, #0]
 80002b0:	6891      	ldr	r1, [r2, #8]
 80002b2:	3303      	adds	r3, #3
 80002b4:	400b      	ands	r3, r1
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d02d      	beq.n	8000316 <ADC_Enable+0x72>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002ba:	6891      	ldr	r1, [r2, #8]
 80002bc:	4b20      	ldr	r3, [pc, #128]	; (8000340 <ADC_Enable+0x9c>)
 80002be:	4219      	tst	r1, r3
 80002c0:	d131      	bne.n	8000326 <ADC_Enable+0x82>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80002c2:	6893      	ldr	r3, [r2, #8]
 80002c4:	2101      	movs	r1, #1
 80002c6:	430b      	orrs	r3, r1
 80002c8:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <ADC_Enable+0xa0>)
 80002cc:	6818      	ldr	r0, [r3, #0]
 80002ce:	491e      	ldr	r1, [pc, #120]	; (8000348 <ADC_Enable+0xa4>)
 80002d0:	f7ff ff1a 	bl	8000108 <__udivsi3>
 80002d4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80002d6:	9b01      	ldr	r3, [sp, #4]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d005      	beq.n	80002e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	3b01      	subs	r3, #1
 80002e0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80002e2:	9b01      	ldr	r3, [sp, #4]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d1f9      	bne.n	80002dc <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80002e8:	f7ff ffc4 	bl	8000274 <HAL_GetTick>
 80002ec:	0006      	movs	r6, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002ee:	2501      	movs	r5, #1
 80002f0:	6823      	ldr	r3, [r4, #0]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	421d      	tst	r5, r3
 80002f6:	d121      	bne.n	800033c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002f8:	f7ff ffbc 	bl	8000274 <HAL_GetTick>
 80002fc:	1b80      	subs	r0, r0, r6
 80002fe:	2802      	cmp	r0, #2
 8000300:	d9f6      	bls.n	80002f0 <ADC_Enable+0x4c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000302:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000304:	2210      	movs	r2, #16
 8000306:	4313      	orrs	r3, r2
 8000308:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800030a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800030c:	3a0f      	subs	r2, #15
 800030e:	4313      	orrs	r3, r2
 8000310:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 8000312:	2001      	movs	r0, #1
 8000314:	e010      	b.n	8000338 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000316:	6813      	ldr	r3, [r2, #0]
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000318:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800031a:	07db      	lsls	r3, r3, #31
 800031c:	d40c      	bmi.n	8000338 <ADC_Enable+0x94>
 800031e:	68d3      	ldr	r3, [r2, #12]
 8000320:	041b      	lsls	r3, r3, #16
 8000322:	d409      	bmi.n	8000338 <ADC_Enable+0x94>
 8000324:	e7c9      	b.n	80002ba <ADC_Enable+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000328:	2210      	movs	r2, #16
 800032a:	4313      	orrs	r3, r2
 800032c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000330:	3a0f      	subs	r2, #15
 8000332:	4313      	orrs	r3, r2
 8000334:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000336:	2001      	movs	r0, #1
}
 8000338:	b002      	add	sp, #8
 800033a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800033c:	2000      	movs	r0, #0
 800033e:	e7fb      	b.n	8000338 <ADC_Enable+0x94>
 8000340:	80000017 	.word	0x80000017
 8000344:	20000018 	.word	0x20000018
 8000348:	000f4240 	.word	0x000f4240

0800034c <HAL_ADC_Init>:
{
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000350:	d100      	bne.n	8000354 <HAL_ADC_Init+0x8>
 8000352:	e0a4      	b.n	800049e <HAL_ADC_Init+0x152>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000354:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000356:	2b00      	cmp	r3, #0
 8000358:	d073      	beq.n	8000442 <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800035a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800035c:	06db      	lsls	r3, r3, #27
 800035e:	d500      	bpl.n	8000362 <HAL_ADC_Init+0x16>
 8000360:	e097      	b.n	8000492 <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000362:	6822      	ldr	r2, [r4, #0]
 8000364:	6893      	ldr	r3, [r2, #8]
 8000366:	2104      	movs	r1, #4
 8000368:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800036a:	d000      	beq.n	800036e <HAL_ADC_Init+0x22>
 800036c:	e091      	b.n	8000492 <HAL_ADC_Init+0x146>
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000370:	484c      	ldr	r0, [pc, #304]	; (80004a4 <HAL_ADC_Init+0x158>)
 8000372:	4003      	ands	r3, r0
 8000374:	3006      	adds	r0, #6
 8000376:	30ff      	adds	r0, #255	; 0xff
 8000378:	4303      	orrs	r3, r0
 800037a:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800037c:	6890      	ldr	r0, [r2, #8]
 800037e:	2303      	movs	r3, #3
 8000380:	4003      	ands	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	d063      	beq.n	800044e <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000386:	68d3      	ldr	r3, [r2, #12]
 8000388:	2018      	movs	r0, #24
 800038a:	4383      	bics	r3, r0
 800038c:	68a0      	ldr	r0, [r4, #8]
 800038e:	4303      	orrs	r3, r0
 8000390:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000392:	6822      	ldr	r2, [r4, #0]
 8000394:	6913      	ldr	r3, [r2, #16]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	6860      	ldr	r0, [r4, #4]
 800039c:	4303      	orrs	r3, r0
 800039e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003a0:	6822      	ldr	r2, [r4, #0]
 80003a2:	68d3      	ldr	r3, [r2, #12]
 80003a4:	4840      	ldr	r0, [pc, #256]	; (80004a8 <HAL_ADC_Init+0x15c>)
 80003a6:	4003      	ands	r3, r0
 80003a8:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003aa:	69a3      	ldr	r3, [r4, #24]
 80003ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003ae:	69e3      	ldr	r3, [r4, #28]
 80003b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003b4:	6a20      	ldr	r0, [r4, #32]
 80003b6:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80003ba:	000e      	movs	r6, r1
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d001      	beq.n	80003c4 <HAL_ADC_Init+0x78>
 80003c0:	2680      	movs	r6, #128	; 0x80
 80003c2:	0176      	lsls	r6, r6, #5
 80003c4:	68e3      	ldr	r3, [r4, #12]
 80003c6:	431a      	orrs	r2, r3
 80003c8:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003ca:	6923      	ldr	r3, [r4, #16]
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d045      	beq.n	800045c <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80003d2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003d4:	4313      	orrs	r3, r2
 80003d6:	4333      	orrs	r3, r6
 80003d8:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80003dc:	2a01      	cmp	r2, #1
 80003de:	d03f      	beq.n	8000460 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003e2:	21c2      	movs	r1, #194	; 0xc2
 80003e4:	31ff      	adds	r1, #255	; 0xff
 80003e6:	428a      	cmp	r2, r1
 80003e8:	d002      	beq.n	80003f0 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80003ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003ec:	430a      	orrs	r2, r1
 80003ee:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003f0:	6821      	ldr	r1, [r4, #0]
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	431a      	orrs	r2, r3
 80003f6:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	0549      	lsls	r1, r1, #21
 80003fe:	428a      	cmp	r2, r1
 8000400:	d002      	beq.n	8000408 <HAL_ADC_Init+0xbc>
 8000402:	3a01      	subs	r2, #1
 8000404:	2a06      	cmp	r2, #6
 8000406:	d80a      	bhi.n	800041e <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000408:	6820      	ldr	r0, [r4, #0]
 800040a:	6941      	ldr	r1, [r0, #20]
 800040c:	2207      	movs	r2, #7
 800040e:	4391      	bics	r1, r2
 8000410:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000412:	6821      	ldr	r1, [r4, #0]
 8000414:	6948      	ldr	r0, [r1, #20]
 8000416:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000418:	402a      	ands	r2, r5
 800041a:	4302      	orrs	r2, r0
 800041c:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800041e:	6822      	ldr	r2, [r4, #0]
 8000420:	68d2      	ldr	r2, [r2, #12]
 8000422:	4922      	ldr	r1, [pc, #136]	; (80004ac <HAL_ADC_Init+0x160>)
 8000424:	400a      	ands	r2, r1
 8000426:	4293      	cmp	r3, r2
 8000428:	d029      	beq.n	800047e <HAL_ADC_Init+0x132>
      ADC_STATE_CLR_SET(hadc->State,
 800042a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800042c:	2212      	movs	r2, #18
 800042e:	4393      	bics	r3, r2
 8000430:	3a02      	subs	r2, #2
 8000432:	4313      	orrs	r3, r2
 8000434:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000436:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000438:	3a0f      	subs	r2, #15
 800043a:	4313      	orrs	r3, r2
 800043c:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800043e:	2001      	movs	r0, #1
 8000440:	e02c      	b.n	800049c <HAL_ADC_Init+0x150>
    ADC_CLEAR_ERRORCODE(hadc);
 8000442:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000444:	2240      	movs	r2, #64	; 0x40
 8000446:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000448:	f004 fed0 	bl	80051ec <HAL_ADC_MspInit>
 800044c:	e785      	b.n	800035a <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	07db      	lsls	r3, r3, #31
 8000452:	d4a5      	bmi.n	80003a0 <HAL_ADC_Init+0x54>
 8000454:	68d3      	ldr	r3, [r2, #12]
 8000456:	041b      	lsls	r3, r3, #16
 8000458:	d595      	bpl.n	8000386 <HAL_ADC_Init+0x3a>
 800045a:	e7a1      	b.n	80003a0 <HAL_ADC_Init+0x54>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800045c:	2104      	movs	r1, #4
 800045e:	e7b7      	b.n	80003d0 <HAL_ADC_Init+0x84>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000460:	2800      	cmp	r0, #0
 8000462:	d103      	bne.n	800046c <HAL_ADC_Init+0x120>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0252      	lsls	r2, r2, #9
 8000468:	4313      	orrs	r3, r2
 800046a:	e7b9      	b.n	80003e0 <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800046c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800046e:	2120      	movs	r1, #32
 8000470:	430a      	orrs	r2, r1
 8000472:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000474:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000476:	391f      	subs	r1, #31
 8000478:	430a      	orrs	r2, r1
 800047a:	64a2      	str	r2, [r4, #72]	; 0x48
 800047c:	e7b0      	b.n	80003e0 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800047e:	2300      	movs	r3, #0
 8000480:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000482:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000484:	2203      	movs	r2, #3
 8000486:	4393      	bics	r3, r2
 8000488:	3a02      	subs	r2, #2
 800048a:	4313      	orrs	r3, r2
 800048c:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800048e:	2000      	movs	r0, #0
 8000490:	e004      	b.n	800049c <HAL_ADC_Init+0x150>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000494:	2210      	movs	r2, #16
 8000496:	4313      	orrs	r3, r2
 8000498:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800049a:	2001      	movs	r0, #1
}
 800049c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800049e:	2001      	movs	r0, #1
 80004a0:	e7fc      	b.n	800049c <HAL_ADC_Init+0x150>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	fffffefd 	.word	0xfffffefd
 80004a8:	fffe0219 	.word	0xfffe0219
 80004ac:	833fffe7 	.word	0x833fffe7

080004b0 <HAL_ADC_Start>:
{
 80004b0:	b510      	push	{r4, lr}
 80004b2:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004b4:	6803      	ldr	r3, [r0, #0]
 80004b6:	689b      	ldr	r3, [r3, #8]
    tmp_hal_status = HAL_BUSY;
 80004b8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004ba:	075b      	lsls	r3, r3, #29
 80004bc:	d500      	bpl.n	80004c0 <HAL_ADC_Start+0x10>
}
 80004be:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hadc);
 80004c0:	2340      	movs	r3, #64	; 0x40
 80004c2:	5ce3      	ldrb	r3, [r4, r3]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d0fa      	beq.n	80004be <HAL_ADC_Start+0xe>
 80004c8:	2201      	movs	r2, #1
 80004ca:	2340      	movs	r3, #64	; 0x40
 80004cc:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80004ce:	69e3      	ldr	r3, [r4, #28]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d004      	beq.n	80004de <HAL_ADC_Start+0x2e>
      tmp_hal_status = ADC_Enable(hadc);
 80004d4:	0020      	movs	r0, r4
 80004d6:	f7ff fee5 	bl	80002a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80004da:	2800      	cmp	r0, #0
 80004dc:	d1ef      	bne.n	80004be <HAL_ADC_Start+0xe>
      ADC_STATE_CLR_SET(hadc->State,
 80004de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <HAL_ADC_Start+0x58>)
 80004e2:	401a      	ands	r2, r3
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4313      	orrs	r3, r2
 80004ea:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 80004ec:	2300      	movs	r3, #0
 80004ee:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80004f0:	2240      	movs	r2, #64	; 0x40
 80004f2:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	3a24      	subs	r2, #36	; 0x24
 80004f8:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80004fa:	6822      	ldr	r2, [r4, #0]
 80004fc:	6893      	ldr	r3, [r2, #8]
 80004fe:	2104      	movs	r1, #4
 8000500:	430b      	orrs	r3, r1
 8000502:	6093      	str	r3, [r2, #8]
 8000504:	2000      	movs	r0, #0
 8000506:	e7da      	b.n	80004be <HAL_ADC_Start+0xe>
 8000508:	fffff0fe 	.word	0xfffff0fe

0800050c <HAL_ADC_PollForConversion>:
{
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	0006      	movs	r6, r0
 8000510:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000512:	6944      	ldr	r4, [r0, #20]
 8000514:	2c08      	cmp	r4, #8
 8000516:	d004      	beq.n	8000522 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000518:	6803      	ldr	r3, [r0, #0]
 800051a:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800051c:	240c      	movs	r4, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800051e:	07db      	lsls	r3, r3, #31
 8000520:	d418      	bmi.n	8000554 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8000522:	f7ff fea7 	bl	8000274 <HAL_GetTick>
 8000526:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000528:	6832      	ldr	r2, [r6, #0]
 800052a:	6813      	ldr	r3, [r2, #0]
 800052c:	4223      	tst	r3, r4
 800052e:	d11a      	bne.n	8000566 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 8000530:	1c6b      	adds	r3, r5, #1
 8000532:	d0fa      	beq.n	800052a <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000534:	2d00      	cmp	r5, #0
 8000536:	d004      	beq.n	8000542 <HAL_ADC_PollForConversion+0x36>
 8000538:	f7ff fe9c 	bl	8000274 <HAL_GetTick>
 800053c:	1bc0      	subs	r0, r0, r7
 800053e:	4285      	cmp	r5, r0
 8000540:	d2f2      	bcs.n	8000528 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000542:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000544:	2204      	movs	r2, #4
 8000546:	4313      	orrs	r3, r2
 8000548:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800054a:	2200      	movs	r2, #0
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8000550:	2003      	movs	r0, #3
 8000552:	e02d      	b.n	80005b0 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000554:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000556:	2220      	movs	r2, #32
 8000558:	4313      	orrs	r3, r2
 800055a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800055c:	2200      	movs	r2, #0
 800055e:	2340      	movs	r3, #64	; 0x40
 8000560:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8000562:	2001      	movs	r0, #1
 8000564:	e024      	b.n	80005b0 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000566:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	430b      	orrs	r3, r1
 800056e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000570:	68d1      	ldr	r1, [r2, #12]
 8000572:	23c0      	movs	r3, #192	; 0xc0
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	4219      	tst	r1, r3
 8000578:	d113      	bne.n	80005a2 <HAL_ADC_PollForConversion+0x96>
 800057a:	6a33      	ldr	r3, [r6, #32]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d110      	bne.n	80005a2 <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000580:	6813      	ldr	r3, [r2, #0]
 8000582:	071b      	lsls	r3, r3, #28
 8000584:	d50d      	bpl.n	80005a2 <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000586:	6893      	ldr	r3, [r2, #8]
 8000588:	075b      	lsls	r3, r3, #29
 800058a:	d412      	bmi.n	80005b2 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800058c:	6853      	ldr	r3, [r2, #4]
 800058e:	210c      	movs	r1, #12
 8000590:	438b      	bics	r3, r1
 8000592:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000594:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_ADC_PollForConversion+0xb8>)
 8000598:	4013      	ands	r3, r2
 800059a:	3204      	adds	r2, #4
 800059c:	32ff      	adds	r2, #255	; 0xff
 800059e:	4313      	orrs	r3, r2
 80005a0:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 80005a2:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80005a4:	69b3      	ldr	r3, [r6, #24]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d102      	bne.n	80005b0 <HAL_ADC_PollForConversion+0xa4>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80005aa:	6833      	ldr	r3, [r6, #0]
 80005ac:	220c      	movs	r2, #12
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005b2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80005b4:	2220      	movs	r2, #32
 80005b6:	4313      	orrs	r3, r2
 80005b8:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ba:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80005bc:	3a1f      	subs	r2, #31
 80005be:	4313      	orrs	r3, r2
 80005c0:	64b3      	str	r3, [r6, #72]	; 0x48
 80005c2:	e7ee      	b.n	80005a2 <HAL_ADC_PollForConversion+0x96>
 80005c4:	fffffefe 	.word	0xfffffefe

080005c8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80005c8:	6803      	ldr	r3, [r0, #0]
 80005ca:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_ADC_ConfigChannel>:
{
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	b083      	sub	sp, #12
 80005d4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005da:	3340      	adds	r3, #64	; 0x40
 80005dc:	5cc3      	ldrb	r3, [r0, r3]
 80005de:	2002      	movs	r0, #2
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d073      	beq.n	80006cc <HAL_ADC_ConfigChannel+0xfc>
 80005e4:	2201      	movs	r2, #1
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	0752      	lsls	r2, r2, #29
 80005f0:	d464      	bmi.n	80006bc <HAL_ADC_ConfigChannel+0xec>
    if (sConfig->Rank != ADC_RANK_NONE)
 80005f2:	4a38      	ldr	r2, [pc, #224]	; (80006d4 <HAL_ADC_ConfigChannel+0x104>)
 80005f4:	6848      	ldr	r0, [r1, #4]
 80005f6:	4290      	cmp	r0, r2
 80005f8:	d048      	beq.n	800068c <HAL_ADC_ConfigChannel+0xbc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80005fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005fc:	2201      	movs	r2, #1
 80005fe:	680d      	ldr	r5, [r1, #0]
 8000600:	40aa      	lsls	r2, r5
 8000602:	4302      	orrs	r2, r0
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0552      	lsls	r2, r2, #21
 800060c:	4293      	cmp	r3, r2
 800060e:	d013      	beq.n	8000638 <HAL_ADC_ConfigChannel+0x68>
 8000610:	3b01      	subs	r3, #1
 8000612:	2b06      	cmp	r3, #6
 8000614:	d910      	bls.n	8000638 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	6950      	ldr	r0, [r2, #20]
 800061a:	2307      	movs	r3, #7
 800061c:	4003      	ands	r3, r0
 800061e:	6888      	ldr	r0, [r1, #8]
 8000620:	4298      	cmp	r0, r3
 8000622:	d009      	beq.n	8000638 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000624:	6950      	ldr	r0, [r2, #20]
 8000626:	2307      	movs	r3, #7
 8000628:	4398      	bics	r0, r3
 800062a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800062c:	6822      	ldr	r2, [r4, #0]
 800062e:	6950      	ldr	r0, [r2, #20]
 8000630:	688d      	ldr	r5, [r1, #8]
 8000632:	402b      	ands	r3, r5
 8000634:	4303      	orrs	r3, r0
 8000636:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000638:	680b      	ldr	r3, [r1, #0]
 800063a:	001a      	movs	r2, r3
 800063c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800063e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000640:	2a01      	cmp	r2, #1
 8000642:	d840      	bhi.n	80006c6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000644:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <HAL_ADC_ConfigChannel+0x108>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	2b10      	cmp	r3, #16
 800064a:	d01c      	beq.n	8000686 <HAL_ADC_ConfigChannel+0xb6>
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	03db      	lsls	r3, r3, #15
 8000650:	4313      	orrs	r3, r2
 8000652:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <HAL_ADC_ConfigChannel+0x108>)
 8000654:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000656:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000658:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800065a:	2b10      	cmp	r3, #16
 800065c:	d133      	bne.n	80006c6 <HAL_ADC_ConfigChannel+0xf6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <HAL_ADC_ConfigChannel+0x10c>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	491f      	ldr	r1, [pc, #124]	; (80006e0 <HAL_ADC_ConfigChannel+0x110>)
 8000664:	f7ff fd50 	bl	8000108 <__udivsi3>
 8000668:	0083      	lsls	r3, r0, #2
 800066a:	1818      	adds	r0, r3, r0
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000670:	9b01      	ldr	r3, [sp, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d02c      	beq.n	80006d0 <HAL_ADC_ConfigChannel+0x100>
            wait_loop_index--;
 8000676:	9b01      	ldr	r3, [sp, #4]
 8000678:	3b01      	subs	r3, #1
 800067a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800067c:	9b01      	ldr	r3, [sp, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f9      	bne.n	8000676 <HAL_ADC_ConfigChannel+0xa6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000682:	2000      	movs	r0, #0
 8000684:	e01f      	b.n	80006c6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	041b      	lsls	r3, r3, #16
 800068a:	e7e1      	b.n	8000650 <HAL_ADC_ConfigChannel+0x80>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800068c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800068e:	2001      	movs	r0, #1
 8000690:	680d      	ldr	r5, [r1, #0]
 8000692:	40a8      	lsls	r0, r5
 8000694:	4382      	bics	r2, r0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000698:	680b      	ldr	r3, [r1, #0]
 800069a:	001a      	movs	r2, r3
 800069c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800069e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006a0:	2a01      	cmp	r2, #1
 80006a2:	d810      	bhi.n	80006c6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <HAL_ADC_ConfigChannel+0x108>)
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	2b10      	cmp	r3, #16
 80006aa:	d005      	beq.n	80006b8 <HAL_ADC_ConfigChannel+0xe8>
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_ADC_ConfigChannel+0x114>)
 80006ae:	4013      	ands	r3, r2
 80006b0:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <HAL_ADC_ConfigChannel+0x108>)
 80006b2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b4:	2000      	movs	r0, #0
 80006b6:	e006      	b.n	80006c6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_ADC_ConfigChannel+0x118>)
 80006ba:	e7f8      	b.n	80006ae <HAL_ADC_ConfigChannel+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006be:	2220      	movs	r2, #32
 80006c0:	4313      	orrs	r3, r2
 80006c2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	54e2      	strb	r2, [r4, r3]
}
 80006cc:	b003      	add	sp, #12
 80006ce:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006d0:	2000      	movs	r0, #0
 80006d2:	e7f8      	b.n	80006c6 <HAL_ADC_ConfigChannel+0xf6>
 80006d4:	00001001 	.word	0x00001001
 80006d8:	40012708 	.word	0x40012708
 80006dc:	20000018 	.word	0x20000018
 80006e0:	000f4240 	.word	0x000f4240
 80006e4:	ffbfffff 	.word	0xffbfffff
 80006e8:	ff7fffff 	.word	0xff7fffff

080006ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ec:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80006ee:	2800      	cmp	r0, #0
 80006f0:	db14      	blt.n	800071c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f2:	0883      	lsrs	r3, r0, #2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <HAL_NVIC_SetPriority+0x60>)
 80006f8:	4694      	mov	ip, r2
 80006fa:	4463      	add	r3, ip
 80006fc:	26c0      	movs	r6, #192	; 0xc0
 80006fe:	00b6      	lsls	r6, r6, #2
 8000700:	599d      	ldr	r5, [r3, r6]
 8000702:	2403      	movs	r4, #3
 8000704:	4020      	ands	r0, r4
 8000706:	00c0      	lsls	r0, r0, #3
 8000708:	22ff      	movs	r2, #255	; 0xff
 800070a:	0014      	movs	r4, r2
 800070c:	4084      	lsls	r4, r0
 800070e:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000710:	0189      	lsls	r1, r1, #6
 8000712:	400a      	ands	r2, r1
 8000714:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000716:	432a      	orrs	r2, r5
 8000718:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800071a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071c:	b2c0      	uxtb	r0, r0
 800071e:	230f      	movs	r3, #15
 8000720:	4003      	ands	r3, r0
 8000722:	3b08      	subs	r3, #8
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <HAL_NVIC_SetPriority+0x64>)
 800072a:	4694      	mov	ip, r2
 800072c:	4463      	add	r3, ip
 800072e:	69dd      	ldr	r5, [r3, #28]
 8000730:	2203      	movs	r2, #3
 8000732:	4010      	ands	r0, r2
 8000734:	00c0      	lsls	r0, r0, #3
 8000736:	24ff      	movs	r4, #255	; 0xff
 8000738:	0022      	movs	r2, r4
 800073a:	4082      	lsls	r2, r0
 800073c:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073e:	0189      	lsls	r1, r1, #6
 8000740:	400c      	ands	r4, r1
 8000742:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000744:	432c      	orrs	r4, r5
 8000746:	61dc      	str	r4, [r3, #28]
 8000748:	e7e7      	b.n	800071a <HAL_NVIC_SetPriority+0x2e>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000754:	231f      	movs	r3, #31
 8000756:	4018      	ands	r0, r3
 8000758:	3b1e      	subs	r3, #30
 800075a:	4083      	lsls	r3, r0
 800075c:	4a01      	ldr	r2, [pc, #4]	; (8000764 <HAL_NVIC_EnableIRQ+0x10>)
 800075e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000760:	4770      	bx	lr
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	e000e100 	.word	0xe000e100

08000768 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 800076c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076e:	4293      	cmp	r3, r2
 8000770:	d80e      	bhi.n	8000790 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_SYSTICK_Config+0x30>)
 8000774:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <HAL_SYSTICK_Config+0x34>)
 8000778:	6a03      	ldr	r3, [r0, #32]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	21c0      	movs	r1, #192	; 0xc0
 8000780:	0609      	lsls	r1, r1, #24
 8000782:	430b      	orrs	r3, r1
 8000784:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000786:	2300      	movs	r3, #0
 8000788:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	3307      	adds	r3, #7
 800078c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000790:	4770      	bx	lr
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	00ffffff 	.word	0x00ffffff
 8000798:	e000e010 	.word	0xe000e010
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007a0:	2804      	cmp	r0, #4
 80007a2:	d005      	beq.n	80007b0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007a4:	4a05      	ldr	r2, [pc, #20]	; (80007bc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80007a6:	6813      	ldr	r3, [r2, #0]
 80007a8:	2104      	movs	r1, #4
 80007aa:	438b      	bics	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
  }
}
 80007ae:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007b0:	4a02      	ldr	r2, [pc, #8]	; (80007bc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80007b2:	6813      	ldr	r3, [r2, #0]
 80007b4:	2104      	movs	r1, #4
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e7f8      	b.n	80007ae <HAL_SYSTICK_CLKSourceConfig+0xe>
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007c0:	4770      	bx	lr

080007c2 <HAL_SYSTICK_IRQHandler>:
{
 80007c2:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80007c4:	f7ff fffc 	bl	80007c0 <HAL_SYSTICK_Callback>
}
 80007c8:	bd10      	pop	{r4, pc}
	...

080007cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80007d0:	d02d      	beq.n	800082e <HAL_DMA_Init+0x62>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007d2:	2521      	movs	r5, #33	; 0x21
 80007d4:	2302      	movs	r3, #2
 80007d6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80007d8:	6801      	ldr	r1, [r0, #0]
 80007da:	680b      	ldr	r3, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80007dc:	4a15      	ldr	r2, [pc, #84]	; (8000834 <HAL_DMA_Init+0x68>)
 80007de:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80007e0:	6843      	ldr	r3, [r0, #4]
 80007e2:	6880      	ldr	r0, [r0, #8]
 80007e4:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007e6:	68e0      	ldr	r0, [r4, #12]
 80007e8:	4303      	orrs	r3, r0
 80007ea:	6920      	ldr	r0, [r4, #16]
 80007ec:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007ee:	6960      	ldr	r0, [r4, #20]
 80007f0:	4303      	orrs	r3, r0
 80007f2:	69a0      	ldr	r0, [r4, #24]
 80007f4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80007f6:	69e0      	ldr	r0, [r4, #28]
 80007f8:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80007fa:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80007fc:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <HAL_DMA_Init+0x6c>)
 8000802:	4694      	mov	ip, r2
 8000804:	4463      	add	r3, ip
 8000806:	0018      	movs	r0, r3
 8000808:	2114      	movs	r1, #20
 800080a:	f7ff fc7d 	bl	8000108 <__udivsi3>
 800080e:	0080      	lsls	r0, r0, #2
 8000810:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_DMA_Init+0x70>)
 8000814:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800081a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800081c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800081e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000820:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000822:	2201      	movs	r2, #1
 8000824:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000826:	321f      	adds	r2, #31
 8000828:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800082a:	2000      	movs	r0, #0
}  
 800082c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800082e:	2001      	movs	r0, #1
 8000830:	e7fc      	b.n	800082c <HAL_DMA_Init+0x60>
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	ffffc00f 	.word	0xffffc00f
 8000838:	bffdfff8 	.word	0xbffdfff8
 800083c:	40020000 	.word	0x40020000

08000840 <HAL_DMA_Start_IT>:
{
 8000840:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000842:	2420      	movs	r4, #32
 8000844:	5d05      	ldrb	r5, [r0, r4]
 8000846:	3c1e      	subs	r4, #30
 8000848:	2d01      	cmp	r5, #1
 800084a:	d00a      	beq.n	8000862 <HAL_DMA_Start_IT+0x22>
 800084c:	2501      	movs	r5, #1
 800084e:	341e      	adds	r4, #30
 8000850:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000852:	3401      	adds	r4, #1
 8000854:	5d04      	ldrb	r4, [r0, r4]
 8000856:	2c01      	cmp	r4, #1
 8000858:	d005      	beq.n	8000866 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 800085a:	2200      	movs	r2, #0
 800085c:	2320      	movs	r3, #32
 800085e:	54c2      	strb	r2, [r0, r3]
    status = HAL_BUSY;
 8000860:	2402      	movs	r4, #2
} 
 8000862:	0020      	movs	r0, r4
 8000864:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000866:	3501      	adds	r5, #1
 8000868:	3420      	adds	r4, #32
 800086a:	5505      	strb	r5, [r0, r4]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800086c:	2400      	movs	r4, #0
 800086e:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000870:	6806      	ldr	r6, [r0, #0]
 8000872:	6835      	ldr	r5, [r6, #0]
 8000874:	3401      	adds	r4, #1
 8000876:	43a5      	bics	r5, r4
 8000878:	6035      	str	r5, [r6, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800087a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800087c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800087e:	40b4      	lsls	r4, r6
 8000880:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8000882:	6804      	ldr	r4, [r0, #0]
 8000884:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000886:	6843      	ldr	r3, [r0, #4]
 8000888:	2b10      	cmp	r3, #16
 800088a:	d012      	beq.n	80008b2 <HAL_DMA_Start_IT+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800088c:	6803      	ldr	r3, [r0, #0]
 800088e:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000890:	6803      	ldr	r3, [r0, #0]
 8000892:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000894:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000896:	2b00      	cmp	r3, #0
 8000898:	d010      	beq.n	80008bc <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800089a:	6802      	ldr	r2, [r0, #0]
 800089c:	6813      	ldr	r3, [r2, #0]
 800089e:	210e      	movs	r1, #14
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80008a4:	6802      	ldr	r2, [r0, #0]
 80008a6:	6813      	ldr	r3, [r2, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80008ae:	2400      	movs	r4, #0
 80008b0:	e7d7      	b.n	8000862 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->CPAR = DstAddress;
 80008b2:	6803      	ldr	r3, [r0, #0]
 80008b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80008b6:	6803      	ldr	r3, [r0, #0]
 80008b8:	60d9      	str	r1, [r3, #12]
 80008ba:	e7eb      	b.n	8000894 <HAL_DMA_Start_IT+0x54>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80008bc:	6802      	ldr	r2, [r0, #0]
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	210a      	movs	r1, #10
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80008c6:	6802      	ldr	r2, [r0, #0]
 80008c8:	6813      	ldr	r3, [r2, #0]
 80008ca:	3906      	subs	r1, #6
 80008cc:	438b      	bics	r3, r1
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e7e8      	b.n	80008a4 <HAL_DMA_Start_IT+0x64>

080008d2 <HAL_DMA_Abort_IT>:
{  
 80008d2:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008d4:	2321      	movs	r3, #33	; 0x21
 80008d6:	5cc3      	ldrb	r3, [r0, r3]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d003      	beq.n	80008e4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008dc:	2304      	movs	r3, #4
 80008de:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80008e0:	2001      	movs	r0, #1
}
 80008e2:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008e4:	6802      	ldr	r2, [r0, #0]
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	210e      	movs	r1, #14
 80008ea:	438b      	bics	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008ee:	6801      	ldr	r1, [r0, #0]
 80008f0:	680a      	ldr	r2, [r1, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	439a      	bics	r2, r3
 80008f6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80008f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80008fa:	0019      	movs	r1, r3
 80008fc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80008fe:	40a1      	lsls	r1, r4
 8000900:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000902:	2221      	movs	r2, #33	; 0x21
 8000904:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000906:	2200      	movs	r2, #0
 8000908:	331f      	adds	r3, #31
 800090a:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 800090c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000912:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000914:	2000      	movs	r0, #0
 8000916:	e7e4      	b.n	80008e2 <HAL_DMA_Abort_IT+0x10>
 8000918:	2000      	movs	r0, #0
 800091a:	e7e2      	b.n	80008e2 <HAL_DMA_Abort_IT+0x10>

0800091c <HAL_DMA_IRQHandler>:
{
 800091c:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800091e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000920:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000922:	6804      	ldr	r4, [r0, #0]
 8000924:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000926:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000928:	2304      	movs	r3, #4
 800092a:	408b      	lsls	r3, r1
 800092c:	421a      	tst	r2, r3
 800092e:	d012      	beq.n	8000956 <HAL_DMA_IRQHandler+0x3a>
 8000930:	076b      	lsls	r3, r5, #29
 8000932:	d510      	bpl.n	8000956 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	069b      	lsls	r3, r3, #26
 8000938:	d403      	bmi.n	8000942 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	2204      	movs	r2, #4
 800093e:	4393      	bics	r3, r2
 8000940:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000942:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000944:	2304      	movs	r3, #4
 8000946:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000948:	408b      	lsls	r3, r1
 800094a:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800094c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800094e:	2b00      	cmp	r3, #0
 8000950:	d000      	beq.n	8000954 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8000952:	4798      	blx	r3
}  
 8000954:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000956:	2302      	movs	r3, #2
 8000958:	408b      	lsls	r3, r1
 800095a:	421a      	tst	r2, r3
 800095c:	d018      	beq.n	8000990 <HAL_DMA_IRQHandler+0x74>
 800095e:	07ab      	lsls	r3, r5, #30
 8000960:	d516      	bpl.n	8000990 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	069b      	lsls	r3, r3, #26
 8000966:	d406      	bmi.n	8000976 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	220a      	movs	r2, #10
 800096c:	4393      	bics	r3, r2
 800096e:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000970:	3a09      	subs	r2, #9
 8000972:	2321      	movs	r3, #33	; 0x21
 8000974:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000976:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000978:	2302      	movs	r3, #2
 800097a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800097c:	408b      	lsls	r3, r1
 800097e:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000980:	2200      	movs	r2, #0
 8000982:	2320      	movs	r3, #32
 8000984:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000986:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0e3      	beq.n	8000954 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 800098c:	4798      	blx	r3
 800098e:	e7e1      	b.n	8000954 <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000990:	2308      	movs	r3, #8
 8000992:	408b      	lsls	r3, r1
 8000994:	421a      	tst	r2, r3
 8000996:	d0dd      	beq.n	8000954 <HAL_DMA_IRQHandler+0x38>
 8000998:	072b      	lsls	r3, r5, #28
 800099a:	d5db      	bpl.n	8000954 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	220e      	movs	r2, #14
 80009a0:	4393      	bics	r3, r2
 80009a2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80009a6:	2301      	movs	r3, #1
 80009a8:	0019      	movs	r1, r3
 80009aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80009ac:	40a1      	lsls	r1, r4
 80009ae:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80009b0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80009b2:	2221      	movs	r2, #33	; 0x21
 80009b4:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 80009b6:	2200      	movs	r2, #0
 80009b8:	331f      	adds	r3, #31
 80009ba:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80009bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0c8      	beq.n	8000954 <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 80009c2:	4798      	blx	r3
}  
 80009c4:	e7c6      	b.n	8000954 <HAL_DMA_IRQHandler+0x38>
	...

080009c8 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <FLASH_SetErrorCode+0x34>)
 80009ca:	68da      	ldr	r2, [r3, #12]
  uint32_t flags = 0U;
 80009cc:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009ce:	06d2      	lsls	r2, r2, #27
 80009d0:	d505      	bpl.n	80009de <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <FLASH_SetErrorCode+0x38>)
 80009d4:	69d3      	ldr	r3, [r2, #28]
 80009d6:	2102      	movs	r1, #2
 80009d8:	430b      	orrs	r3, r1
 80009da:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80009dc:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <FLASH_SetErrorCode+0x34>)
 80009e0:	68d2      	ldr	r2, [r2, #12]
 80009e2:	0752      	lsls	r2, r2, #29
 80009e4:	d506      	bpl.n	80009f4 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009e6:	4906      	ldr	r1, [pc, #24]	; (8000a00 <FLASH_SetErrorCode+0x38>)
 80009e8:	69ca      	ldr	r2, [r1, #28]
 80009ea:	2001      	movs	r0, #1
 80009ec:	4302      	orrs	r2, r0
 80009ee:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80009f0:	2204      	movs	r2, #4
 80009f2:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009f4:	4a01      	ldr	r2, [pc, #4]	; (80009fc <FLASH_SetErrorCode+0x34>)
 80009f6:	60d3      	str	r3, [r2, #12]
}  
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40022000 	.word	0x40022000
 8000a00:	200000a8 	.word	0x200000a8

08000a04 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_FLASH_Unlock+0x18>)
 8000a06:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000a0a:	061b      	lsls	r3, r3, #24
 8000a0c:	d505      	bpl.n	8000a1a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_FLASH_Unlock+0x18>)
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_FLASH_Unlock+0x1c>)
 8000a12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_FLASH_Unlock+0x20>)
 8000a16:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8000a18:	2000      	movs	r0, #0
}
 8000a1a:	4770      	bx	lr
 8000a1c:	40022000 	.word	0x40022000
 8000a20:	45670123 	.word	0x45670123
 8000a24:	cdef89ab 	.word	0xcdef89ab

08000a28 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <HAL_FLASH_Lock+0x10>)
 8000a2a:	6913      	ldr	r3, [r2, #16]
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	430b      	orrs	r3, r1
 8000a30:	6113      	str	r3, [r2, #16]
}
 8000a32:	2000      	movs	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40022000 	.word	0x40022000

08000a3c <FLASH_WaitForLastOperation>:
{
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff fc18 	bl	8000274 <HAL_GetTick>
 8000a44:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a46:	4e13      	ldr	r6, [pc, #76]	; (8000a94 <FLASH_WaitForLastOperation+0x58>)
 8000a48:	2501      	movs	r5, #1
 8000a4a:	68f3      	ldr	r3, [r6, #12]
 8000a4c:	421d      	tst	r5, r3
 8000a4e:	d00a      	beq.n	8000a66 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000a50:	1c63      	adds	r3, r4, #1
 8000a52:	d0fa      	beq.n	8000a4a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d01a      	beq.n	8000a8e <FLASH_WaitForLastOperation+0x52>
 8000a58:	f7ff fc0c 	bl	8000274 <HAL_GetTick>
 8000a5c:	1bc0      	subs	r0, r0, r7
 8000a5e:	4284      	cmp	r4, r0
 8000a60:	d2f3      	bcs.n	8000a4a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000a62:	2003      	movs	r0, #3
 8000a64:	e012      	b.n	8000a8c <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <FLASH_WaitForLastOperation+0x58>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	069b      	lsls	r3, r3, #26
 8000a6c:	d502      	bpl.n	8000a74 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a6e:	2220      	movs	r2, #32
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <FLASH_WaitForLastOperation+0x58>)
 8000a72:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <FLASH_WaitForLastOperation+0x58>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	06db      	lsls	r3, r3, #27
 8000a7a:	d404      	bmi.n	8000a86 <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <FLASH_WaitForLastOperation+0x58>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8000a80:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a82:	075b      	lsls	r3, r3, #29
 8000a84:	d502      	bpl.n	8000a8c <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8000a86:	f7ff ff9f 	bl	80009c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a8a:	2001      	movs	r0, #1
}
 8000a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8000a8e:	2003      	movs	r0, #3
 8000a90:	e7fc      	b.n	8000a8c <FLASH_WaitForLastOperation+0x50>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_FLASH_Program>:
{
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	46de      	mov	lr, fp
 8000a9c:	4657      	mov	r7, sl
 8000a9e:	464e      	mov	r6, r9
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	b5e0      	push	{r5, r6, r7, lr}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	000e      	movs	r6, r1
 8000aaa:	9201      	str	r2, [sp, #4]
 8000aac:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <HAL_FLASH_Program+0xbc>)
 8000ab0:	7e1b      	ldrb	r3, [r3, #24]
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <HAL_FLASH_Program+0x2e>
}
 8000ab8:	b003      	add	sp, #12
 8000aba:	bc3c      	pop	{r2, r3, r4, r5}
 8000abc:	4690      	mov	r8, r2
 8000abe:	4699      	mov	r9, r3
 8000ac0:	46a2      	mov	sl, r4
 8000ac2:	46ab      	mov	fp, r5
 8000ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <HAL_FLASH_Program+0xbc>)
 8000aca:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000acc:	4822      	ldr	r0, [pc, #136]	; (8000b58 <HAL_FLASH_Program+0xc0>)
 8000ace:	f7ff ffb5 	bl	8000a3c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d133      	bne.n	8000b3e <HAL_FLASH_Program+0xa6>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ad6:	2c01      	cmp	r4, #1
 8000ad8:	d035      	beq.n	8000b46 <HAL_FLASH_Program+0xae>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ada:	2c02      	cmp	r4, #2
 8000adc:	d036      	beq.n	8000b4c <HAL_FLASH_Program+0xb4>
      nbiterations = 4U;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	469b      	mov	fp, r3
{
 8000ae2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_FLASH_Program+0xbc>)
 8000ae6:	469a      	mov	sl, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4699      	mov	r9, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000aec:	4c1b      	ldr	r4, [pc, #108]	; (8000b5c <HAL_FLASH_Program+0xc4>)
 8000aee:	e01e      	b.n	8000b2e <HAL_FLASH_Program+0x96>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000af0:	2220      	movs	r2, #32
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	4641      	mov	r1, r8
 8000af6:	4091      	lsls	r1, r2
 8000af8:	000a      	movs	r2, r1
 8000afa:	9901      	ldr	r1, [sp, #4]
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	000b      	movs	r3, r1
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b04:	4652      	mov	r2, sl
 8000b06:	4649      	mov	r1, r9
 8000b08:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b0a:	6922      	ldr	r2, [r4, #16]
 8000b0c:	2701      	movs	r7, #1
 8000b0e:	433a      	orrs	r2, r7
 8000b10:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8000b12:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b14:	4810      	ldr	r0, [pc, #64]	; (8000b58 <HAL_FLASH_Program+0xc0>)
 8000b16:	f7ff ff91 	bl	8000a3c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b1a:	6923      	ldr	r3, [r4, #16]
 8000b1c:	43bb      	bics	r3, r7
 8000b1e:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d10c      	bne.n	8000b3e <HAL_FLASH_Program+0xa6>
 8000b24:	3501      	adds	r5, #1
 8000b26:	3602      	adds	r6, #2
    for (index = 0U; index < nbiterations; index++)
 8000b28:	b2eb      	uxtb	r3, r5
 8000b2a:	459b      	cmp	fp, r3
 8000b2c:	d907      	bls.n	8000b3e <HAL_FLASH_Program+0xa6>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b2e:	012b      	lsls	r3, r5, #4
 8000b30:	2220      	movs	r2, #32
 8000b32:	4252      	negs	r2, r2
 8000b34:	189a      	adds	r2, r3, r2
 8000b36:	d4db      	bmi.n	8000af0 <HAL_FLASH_Program+0x58>
 8000b38:	4643      	mov	r3, r8
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	e7e1      	b.n	8000b02 <HAL_FLASH_Program+0x6a>
  __HAL_UNLOCK(&pFlash);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_FLASH_Program+0xbc>)
 8000b42:	761a      	strb	r2, [r3, #24]
  return status;
 8000b44:	e7b8      	b.n	8000ab8 <HAL_FLASH_Program+0x20>
      nbiterations = 1U;
 8000b46:	2301      	movs	r3, #1
 8000b48:	469b      	mov	fp, r3
 8000b4a:	e7ca      	b.n	8000ae2 <HAL_FLASH_Program+0x4a>
      nbiterations = 2U;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	469b      	mov	fp, r3
 8000b50:	e7c7      	b.n	8000ae2 <HAL_FLASH_Program+0x4a>
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	0000c350 	.word	0x0000c350
 8000b5c:	40022000 	.word	0x40022000

08000b60 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b60:	2200      	movs	r2, #0
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <FLASH_MassErase+0x1c>)
 8000b64:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <FLASH_MassErase+0x20>)
 8000b68:	691a      	ldr	r2, [r3, #16]
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	313c      	adds	r1, #60	; 0x3c
 8000b74:	430a      	orrs	r2, r1
 8000b76:	611a      	str	r2, [r3, #16]
}
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	200000a8 	.word	0x200000a8
 8000b80:	40022000 	.word	0x40022000

08000b84 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b84:	2200      	movs	r2, #0
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <FLASH_PageErase+0x1c>)
 8000b88:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <FLASH_PageErase+0x20>)
 8000b8c:	691a      	ldr	r2, [r3, #16]
 8000b8e:	2102      	movs	r1, #2
 8000b90:	430a      	orrs	r2, r1
 8000b92:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b94:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b96:	691a      	ldr	r2, [r3, #16]
 8000b98:	313e      	adds	r1, #62	; 0x3e
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	611a      	str	r2, [r3, #16]
}
 8000b9e:	4770      	bx	lr
 8000ba0:	200000a8 	.word	0x200000a8
 8000ba4:	40022000 	.word	0x40022000

08000ba8 <HAL_FLASHEx_Erase>:
{
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	46c6      	mov	lr, r8
 8000bac:	b500      	push	{lr}
 8000bae:	0006      	movs	r6, r0
 8000bb0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_FLASHEx_Erase+0xac>)
 8000bb4:	7e1b      	ldrb	r3, [r3, #24]
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d038      	beq.n	8000c2e <HAL_FLASHEx_Erase+0x86>
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_FLASHEx_Erase+0xac>)
 8000bc0:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bc2:	6833      	ldr	r3, [r6, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d028      	beq.n	8000c1a <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bc8:	4823      	ldr	r0, [pc, #140]	; (8000c58 <HAL_FLASHEx_Erase+0xb0>)
 8000bca:	f7ff ff37 	bl	8000a3c <FLASH_WaitForLastOperation>
 8000bce:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bd0:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d128      	bne.n	8000c28 <HAL_FLASHEx_Erase+0x80>
        *PageError = 0xFFFFFFFFU;
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	4642      	mov	r2, r8
 8000bda:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8000bdc:	6874      	ldr	r4, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000bde:	68b3      	ldr	r3, [r6, #8]
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8000be4:	429c      	cmp	r4, r3
 8000be6:	d233      	bcs.n	8000c50 <HAL_FLASHEx_Erase+0xa8>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000be8:	4f1c      	ldr	r7, [pc, #112]	; (8000c5c <HAL_FLASHEx_Erase+0xb4>)
 8000bea:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8000bec:	0020      	movs	r0, r4
 8000bee:	f7ff ffc9 	bl	8000b84 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <HAL_FLASHEx_Erase+0xb0>)
 8000bf4:	f7ff ff22 	bl	8000a3c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	43ab      	bics	r3, r5
 8000bfc:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d123      	bne.n	8000c4a <HAL_FLASHEx_Erase+0xa2>
            address += FLASH_PAGE_SIZE)
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	469c      	mov	ip, r3
 8000c08:	4464      	add	r4, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c0a:	68b3      	ldr	r3, [r6, #8]
 8000c0c:	029b      	lsls	r3, r3, #10
 8000c0e:	6872      	ldr	r2, [r6, #4]
 8000c10:	4694      	mov	ip, r2
 8000c12:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	d8e9      	bhi.n	8000bec <HAL_FLASHEx_Erase+0x44>
 8000c18:	e006      	b.n	8000c28 <HAL_FLASHEx_Erase+0x80>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <HAL_FLASHEx_Erase+0xb0>)
 8000c1c:	f7ff ff0e 	bl	8000a3c <FLASH_WaitForLastOperation>
 8000c20:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_FLASHEx_Erase+0xac>)
 8000c2c:	761a      	strb	r2, [r3, #24]
}
 8000c2e:	bc04      	pop	{r2}
 8000c30:	4690      	mov	r8, r2
 8000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8000c34:	f7ff ff94 	bl	8000b60 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <HAL_FLASHEx_Erase+0xb0>)
 8000c3a:	f7ff feff 	bl	8000a3c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_FLASHEx_Erase+0xb4>)
 8000c40:	6913      	ldr	r3, [r2, #16]
 8000c42:	2104      	movs	r1, #4
 8000c44:	438b      	bics	r3, r1
 8000c46:	6113      	str	r3, [r2, #16]
 8000c48:	e7ee      	b.n	8000c28 <HAL_FLASHEx_Erase+0x80>
            *PageError = address;
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	601c      	str	r4, [r3, #0]
            break;
 8000c4e:	e7eb      	b.n	8000c28 <HAL_FLASHEx_Erase+0x80>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c50:	2001      	movs	r0, #1
 8000c52:	e7e9      	b.n	8000c28 <HAL_FLASHEx_Erase+0x80>
 8000c54:	200000a8 	.word	0x200000a8
 8000c58:	0000c350 	.word	0x0000c350
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	46de      	mov	lr, fp
 8000c64:	4657      	mov	r7, sl
 8000c66:	464e      	mov	r6, r9
 8000c68:	4645      	mov	r5, r8
 8000c6a:	b5e0      	push	{r5, r6, r7, lr}
 8000c6c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c6e:	680a      	ldr	r2, [r1, #0]
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	d100      	bne.n	8000c76 <HAL_GPIO_Init+0x16>
 8000c74:	e0b6      	b.n	8000de4 <HAL_GPIO_Init+0x184>
 8000c76:	2500      	movs	r5, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4699      	mov	r9, r3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	469a      	mov	sl, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c80:	4b5c      	ldr	r3, [pc, #368]	; (8000df4 <HAL_GPIO_Init+0x194>)
 8000c82:	469b      	mov	fp, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c84:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <HAL_GPIO_Init+0x198>)
 8000c86:	4698      	mov	r8, r3
 8000c88:	e03c      	b.n	8000d04 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8000c8a:	08ec      	lsrs	r4, r5, #3
 8000c8c:	00a4      	lsls	r4, r4, #2
 8000c8e:	1904      	adds	r4, r0, r4
 8000c90:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000c92:	3305      	adds	r3, #5
 8000c94:	402b      	ands	r3, r5
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000c9e:	690a      	ldr	r2, [r1, #16]
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000ca6:	6223      	str	r3, [r4, #32]
 8000ca8:	e036      	b.n	8000d18 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->OSPEEDR; 
 8000caa:	6883      	ldr	r3, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cac:	4023      	ands	r3, r4
 8000cae:	469c      	mov	ip, r3
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000cb0:	68cb      	ldr	r3, [r1, #12]
 8000cb2:	40bb      	lsls	r3, r7
 8000cb4:	4662      	mov	r2, ip
 8000cb6:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000cb8:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cba:	6843      	ldr	r3, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000cbc:	43b3      	bics	r3, r6
 8000cbe:	001e      	movs	r6, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc0:	684b      	ldr	r3, [r1, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	40ab      	lsls	r3, r5
 8000cca:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000ccc:	6043      	str	r3, [r0, #4]
 8000cce:	e037      	b.n	8000d40 <HAL_GPIO_Init+0xe0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	e066      	b.n	8000da2 <HAL_GPIO_Init+0x142>
 8000cd4:	464c      	mov	r4, r9
 8000cd6:	e064      	b.n	8000da2 <HAL_GPIO_Init+0x142>
 8000cd8:	2402      	movs	r4, #2
 8000cda:	e062      	b.n	8000da2 <HAL_GPIO_Init+0x142>
 8000cdc:	4654      	mov	r4, sl
 8000cde:	e060      	b.n	8000da2 <HAL_GPIO_Init+0x142>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(temp, iocurrent); 
 8000ce0:	9a01      	ldr	r2, [sp, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	e068      	b.n	8000db8 <HAL_GPIO_Init+0x158>

        temp = EXTI->EMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          SET_BIT(temp, iocurrent); 
 8000ce6:	9a01      	ldr	r2, [sp, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	e06c      	b.n	8000dc6 <HAL_GPIO_Init+0x166>
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8000cec:	9a01      	ldr	r2, [sp, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	e070      	b.n	8000dd4 <HAL_GPIO_Init+0x174>

        temp = EXTI->FTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8000cf2:	9a01      	ldr	r2, [sp, #4]
 8000cf4:	4313      	orrs	r3, r2
        }
        EXTI->FTSR = temp;
 8000cf6:	4642      	mov	r2, r8
 8000cf8:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000cfa:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cfc:	680a      	ldr	r2, [r1, #0]
 8000cfe:	0013      	movs	r3, r2
 8000d00:	40eb      	lsrs	r3, r5
 8000d02:	d06f      	beq.n	8000de4 <HAL_GPIO_Init+0x184>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d04:	464e      	mov	r6, r9
 8000d06:	40ae      	lsls	r6, r5
 8000d08:	4032      	ands	r2, r6
 8000d0a:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8000d0c:	d0f5      	beq.n	8000cfa <HAL_GPIO_Init+0x9a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d0e:	684b      	ldr	r3, [r1, #4]
 8000d10:	2410      	movs	r4, #16
 8000d12:	43a3      	bics	r3, r4
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d0b8      	beq.n	8000c8a <HAL_GPIO_Init+0x2a>
      temp = GPIOx->MODER;
 8000d18:	6803      	ldr	r3, [r0, #0]
 8000d1a:	006f      	lsls	r7, r5, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d1c:	4654      	mov	r4, sl
 8000d1e:	40bc      	lsls	r4, r7
 8000d20:	43e4      	mvns	r4, r4
 8000d22:	4023      	ands	r3, r4
 8000d24:	469c      	mov	ip, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d26:	684b      	ldr	r3, [r1, #4]
 8000d28:	4652      	mov	r2, sl
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	40bb      	lsls	r3, r7
 8000d2e:	4662      	mov	r2, ip
 8000d30:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8000d32:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d34:	684b      	ldr	r3, [r1, #4]
 8000d36:	2210      	movs	r2, #16
 8000d38:	4393      	bics	r3, r2
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d9b4      	bls.n	8000caa <HAL_GPIO_Init+0x4a>
      temp = GPIOx->PUPDR;
 8000d40:	68c3      	ldr	r3, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d42:	4023      	ands	r3, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d44:	688c      	ldr	r4, [r1, #8]
 8000d46:	40bc      	lsls	r4, r7
 8000d48:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 8000d4a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d4c:	684b      	ldr	r3, [r1, #4]
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	0552      	lsls	r2, r2, #21
 8000d52:	4213      	tst	r3, r2
 8000d54:	d0d1      	beq.n	8000cfa <HAL_GPIO_Init+0x9a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	465b      	mov	r3, fp
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	465a      	mov	r2, fp
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	6993      	ldr	r3, [r2, #24]
 8000d64:	464a      	mov	r2, r9
 8000d66:	4013      	ands	r3, r2
 8000d68:	9303      	str	r3, [sp, #12]
 8000d6a:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d6c:	08ab      	lsrs	r3, r5, #2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <HAL_GPIO_Init+0x19c>)
 8000d72:	4694      	mov	ip, r2
 8000d74:	4463      	add	r3, ip
 8000d76:	689c      	ldr	r4, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d78:	4657      	mov	r7, sl
 8000d7a:	402f      	ands	r7, r5
 8000d7c:	00bf      	lsls	r7, r7, #2
 8000d7e:	260f      	movs	r6, #15
 8000d80:	40be      	lsls	r6, r7
 8000d82:	43b4      	bics	r4, r6
 8000d84:	0026      	movs	r6, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	2290      	movs	r2, #144	; 0x90
 8000d88:	05d2      	lsls	r2, r2, #23
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d0a0      	beq.n	8000cd0 <HAL_GPIO_Init+0x70>
 8000d8e:	4c1c      	ldr	r4, [pc, #112]	; (8000e00 <HAL_GPIO_Init+0x1a0>)
 8000d90:	42a0      	cmp	r0, r4
 8000d92:	d09f      	beq.n	8000cd4 <HAL_GPIO_Init+0x74>
 8000d94:	4c1b      	ldr	r4, [pc, #108]	; (8000e04 <HAL_GPIO_Init+0x1a4>)
 8000d96:	42a0      	cmp	r0, r4
 8000d98:	d09e      	beq.n	8000cd8 <HAL_GPIO_Init+0x78>
 8000d9a:	4c1b      	ldr	r4, [pc, #108]	; (8000e08 <HAL_GPIO_Init+0x1a8>)
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d09d      	beq.n	8000cdc <HAL_GPIO_Init+0x7c>
 8000da0:	2405      	movs	r4, #5
 8000da2:	40bc      	lsls	r4, r7
 8000da4:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000da6:	609c      	str	r4, [r3, #8]
        temp = EXTI->IMR;
 8000da8:	4643      	mov	r3, r8
 8000daa:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dac:	9a01      	ldr	r2, [sp, #4]
 8000dae:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db0:	684a      	ldr	r2, [r1, #4]
 8000db2:	03d2      	lsls	r2, r2, #15
 8000db4:	d494      	bmi.n	8000ce0 <HAL_GPIO_Init+0x80>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000db6:	4023      	ands	r3, r4
        EXTI->IMR = temp;
 8000db8:	4642      	mov	r2, r8
 8000dba:	6013      	str	r3, [r2, #0]
        temp = EXTI->EMR;
 8000dbc:	6853      	ldr	r3, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbe:	684a      	ldr	r2, [r1, #4]
 8000dc0:	0392      	lsls	r2, r2, #14
 8000dc2:	d490      	bmi.n	8000ce6 <HAL_GPIO_Init+0x86>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000dc4:	4023      	ands	r3, r4
        EXTI->EMR = temp;
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	6053      	str	r3, [r2, #4]
        temp = EXTI->RTSR;
 8000dca:	6893      	ldr	r3, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dcc:	684a      	ldr	r2, [r1, #4]
 8000dce:	02d2      	lsls	r2, r2, #11
 8000dd0:	d48c      	bmi.n	8000cec <HAL_GPIO_Init+0x8c>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000dd2:	4023      	ands	r3, r4
        EXTI->RTSR = temp;
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR;
 8000dd8:	68d3      	ldr	r3, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dda:	684a      	ldr	r2, [r1, #4]
 8000ddc:	0292      	lsls	r2, r2, #10
 8000dde:	d488      	bmi.n	8000cf2 <HAL_GPIO_Init+0x92>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000de0:	4023      	ands	r3, r4
 8000de2:	e788      	b.n	8000cf6 <HAL_GPIO_Init+0x96>
  } 
}
 8000de4:	b005      	add	sp, #20
 8000de6:	bc3c      	pop	{r2, r3, r4, r5}
 8000de8:	4690      	mov	r8, r2
 8000dea:	4699      	mov	r9, r3
 8000dec:	46a2      	mov	sl, r4
 8000dee:	46ab      	mov	fp, r5
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010400 	.word	0x40010400
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	48000400 	.word	0x48000400
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000c00 	.word	0x48000c00

08000e0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e0c:	6900      	ldr	r0, [r0, #16]
 8000e0e:	4008      	ands	r0, r1
 8000e10:	1e41      	subs	r1, r0, #1
 8000e12:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000e14:	b2c0      	uxtb	r0, r0
  }
 8000e16:	4770      	bx	lr

08000e18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000e1e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e20:	6181      	str	r1, [r0, #24]
 8000e22:	e7fc      	b.n	8000e1e <HAL_GPIO_WritePin+0x6>

08000e24 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e24:	6943      	ldr	r3, [r0, #20]
 8000e26:	4059      	eors	r1, r3
 8000e28:	6141      	str	r1, [r0, #20]
}
 8000e2a:	4770      	bx	lr

08000e2c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e2c:	6803      	ldr	r3, [r0, #0]
 8000e2e:	699a      	ldr	r2, [r3, #24]
 8000e30:	0792      	lsls	r2, r2, #30
 8000e32:	d501      	bpl.n	8000e38 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e38:	6803      	ldr	r3, [r0, #0]
 8000e3a:	699a      	ldr	r2, [r3, #24]
 8000e3c:	07d2      	lsls	r2, r2, #31
 8000e3e:	d403      	bmi.n	8000e48 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e40:	699a      	ldr	r2, [r3, #24]
 8000e42:	2101      	movs	r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	619a      	str	r2, [r3, #24]
  }
}
 8000e48:	4770      	bx	lr
	...

08000e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000e4c:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000e4e:	6804      	ldr	r4, [r0, #0]
 8000e50:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000e52:	4d06      	ldr	r5, [pc, #24]	; (8000e6c <I2C_TransferConfig+0x20>)
 8000e54:	4028      	ands	r0, r5

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000e56:	0589      	lsls	r1, r1, #22
 8000e58:	0d89      	lsrs	r1, r1, #22
 8000e5a:	9d03      	ldr	r5, [sp, #12]
 8000e5c:	432b      	orrs	r3, r5
 8000e5e:	4319      	orrs	r1, r3
 8000e60:	0412      	lsls	r2, r2, #16
 8000e62:	430a      	orrs	r2, r1
 8000e64:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000e66:	6062      	str	r2, [r4, #4]
}
 8000e68:	bd30      	pop	{r4, r5, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	fc009800 	.word	0xfc009800

08000e70 <I2C_Enable_IRQ>:
  */
static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8000e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <I2C_Enable_IRQ+0x64>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d018      	beq.n	8000eaa <I2C_Enable_IRQ+0x3a>
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <I2C_Enable_IRQ+0x68>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d015      	beq.n	8000eaa <I2C_Enable_IRQ+0x3a>
  uint32_t tmpisr = 0U;
 8000e7e:	2300      	movs	r3, #0
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000e80:	074a      	lsls	r2, r1, #29
 8000e82:	d500      	bpl.n	8000e86 <I2C_Enable_IRQ+0x16>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e84:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000e86:	07ca      	lsls	r2, r1, #31
 8000e88:	d501      	bpl.n	8000e8e <I2C_Enable_IRQ+0x1e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8000e8a:	22f2      	movs	r2, #242	; 0xf2
 8000e8c:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000e8e:	078a      	lsls	r2, r1, #30
 8000e90:	d501      	bpl.n	8000e96 <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8000e92:	22f4      	movs	r2, #244	; 0xf4
 8000e94:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000e96:	2212      	movs	r2, #18
 8000e98:	4011      	ands	r1, r2
 8000e9a:	2912      	cmp	r1, #18
 8000e9c:	d017      	beq.n	8000ece <I2C_Enable_IRQ+0x5e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8000e9e:	6802      	ldr	r2, [r0, #0]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	6013      	str	r3, [r2, #0]

  return HAL_OK;
}
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	4770      	bx	lr
  uint32_t tmpisr = 0U;
 8000eaa:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000eac:	074a      	lsls	r2, r1, #29
 8000eae:	d500      	bpl.n	8000eb2 <I2C_Enable_IRQ+0x42>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000eb0:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000eb2:	2211      	movs	r2, #17
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	2a11      	cmp	r2, #17
 8000eb8:	d006      	beq.n	8000ec8 <I2C_Enable_IRQ+0x58>
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000eba:	2212      	movs	r2, #18
 8000ebc:	4011      	ands	r1, r2
 8000ebe:	2912      	cmp	r1, #18
 8000ec0:	d1ed      	bne.n	8000e9e <I2C_Enable_IRQ+0x2e>
      tmpisr |= I2C_IT_TCI;
 8000ec2:	324e      	adds	r2, #78	; 0x4e
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	e7ea      	b.n	8000e9e <I2C_Enable_IRQ+0x2e>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000ec8:	327f      	adds	r2, #127	; 0x7f
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	e7f5      	b.n	8000eba <I2C_Enable_IRQ+0x4a>
      tmpisr |= I2C_IT_STOPI;
 8000ece:	320e      	adds	r2, #14
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	e7e4      	b.n	8000e9e <I2C_Enable_IRQ+0x2e>
 8000ed4:	080018e9 	.word	0x080018e9
 8000ed8:	08001625 	.word	0x08001625

08000edc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8000edc:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8000ede:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000ee0:	07ca      	lsls	r2, r1, #31
 8000ee2:	d506      	bpl.n	8000ef2 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000ee4:	3341      	adds	r3, #65	; 0x41
 8000ee6:	5cc3      	ldrb	r3, [r0, r3]
 8000ee8:	2228      	movs	r2, #40	; 0x28
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b28      	cmp	r3, #40	; 0x28
 8000eee:	d01c      	beq.n	8000f2a <I2C_Disable_IRQ+0x4e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000ef0:	23f2      	movs	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000ef2:	078a      	lsls	r2, r1, #30
 8000ef4:	d507      	bpl.n	8000f06 <I2C_Disable_IRQ+0x2a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000ef6:	2241      	movs	r2, #65	; 0x41
 8000ef8:	5c82      	ldrb	r2, [r0, r2]
 8000efa:	2428      	movs	r4, #40	; 0x28
 8000efc:	4022      	ands	r2, r4
 8000efe:	2a28      	cmp	r2, #40	; 0x28
 8000f00:	d015      	beq.n	8000f2e <I2C_Disable_IRQ+0x52>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f02:	22f4      	movs	r2, #244	; 0xf4
 8000f04:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000f06:	074a      	lsls	r2, r1, #29
 8000f08:	d501      	bpl.n	8000f0e <I2C_Disable_IRQ+0x32>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f0a:	22b8      	movs	r2, #184	; 0xb8
 8000f0c:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000f0e:	2211      	movs	r2, #17
 8000f10:	400a      	ands	r2, r1
 8000f12:	2a11      	cmp	r2, #17
 8000f14:	d00e      	beq.n	8000f34 <I2C_Disable_IRQ+0x58>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000f16:	2212      	movs	r2, #18
 8000f18:	4011      	ands	r1, r2
 8000f1a:	2912      	cmp	r1, #18
 8000f1c:	d00d      	beq.n	8000f3a <I2C_Disable_IRQ+0x5e>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000f1e:	6801      	ldr	r1, [r0, #0]
 8000f20:	680a      	ldr	r2, [r1, #0]
 8000f22:	439a      	bics	r2, r3
 8000f24:	600a      	str	r2, [r1, #0]

  return HAL_OK;
}
 8000f26:	2000      	movs	r0, #0
 8000f28:	bd10      	pop	{r4, pc}
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000f2a:	2342      	movs	r3, #66	; 0x42
 8000f2c:	e7e1      	b.n	8000ef2 <I2C_Disable_IRQ+0x16>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f2e:	321c      	adds	r2, #28
 8000f30:	4313      	orrs	r3, r2
 8000f32:	e7e8      	b.n	8000f06 <I2C_Disable_IRQ+0x2a>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000f34:	327f      	adds	r2, #127	; 0x7f
 8000f36:	4313      	orrs	r3, r2
 8000f38:	e7ed      	b.n	8000f16 <I2C_Disable_IRQ+0x3a>
    tmpisr |= I2C_IT_TCI;
 8000f3a:	324e      	adds	r2, #78	; 0x4e
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	e7ee      	b.n	8000f1e <I2C_Disable_IRQ+0x42>

08000f40 <HAL_I2C_Init>:
{
 8000f40:	b510      	push	{r4, lr}
 8000f42:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8000f44:	d059      	beq.n	8000ffa <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f46:	2341      	movs	r3, #65	; 0x41
 8000f48:	5cc3      	ldrb	r3, [r0, r3]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d043      	beq.n	8000fd6 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f4e:	2224      	movs	r2, #36	; 0x24
 8000f50:	2341      	movs	r3, #65	; 0x41
 8000f52:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	438b      	bics	r3, r1
 8000f5c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_I2C_Init+0xc0>)
 8000f62:	6861      	ldr	r1, [r4, #4]
 8000f64:	400b      	ands	r3, r1
 8000f66:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f68:	6822      	ldr	r2, [r4, #0]
 8000f6a:	6893      	ldr	r3, [r2, #8]
 8000f6c:	4925      	ldr	r1, [pc, #148]	; (8001004 <HAL_I2C_Init+0xc4>)
 8000f6e:	400b      	ands	r3, r1
 8000f70:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f72:	68e3      	ldr	r3, [r4, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d034      	beq.n	8000fe2 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	2384      	movs	r3, #132	; 0x84
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	68a1      	ldr	r1, [r4, #8]
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f84:	68e3      	ldr	r3, [r4, #12]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d032      	beq.n	8000ff0 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	6851      	ldr	r1, [r2, #4]
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_I2C_Init+0xc8>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	68d3      	ldr	r3, [r2, #12]
 8000f98:	491a      	ldr	r1, [pc, #104]	; (8001004 <HAL_I2C_Init+0xc4>)
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f9e:	6821      	ldr	r1, [r4, #0]
 8000fa0:	6923      	ldr	r3, [r4, #16]
 8000fa2:	6962      	ldr	r2, [r4, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	69a2      	ldr	r2, [r4, #24]
 8000fa8:	0212      	lsls	r2, r2, #8
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	69e3      	ldr	r3, [r4, #28]
 8000fb2:	6a21      	ldr	r1, [r4, #32]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	311f      	adds	r1, #31
 8000fc8:	2241      	movs	r2, #65	; 0x41
 8000fca:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fcc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fce:	3201      	adds	r2, #1
 8000fd0:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000fd2:	2000      	movs	r0, #0
}
 8000fd4:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	3340      	adds	r3, #64	; 0x40
 8000fda:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8000fdc:	f004 f92a 	bl	8005234 <HAL_I2C_MspInit>
 8000fe0:	e7b5      	b.n	8000f4e <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	68a1      	ldr	r1, [r4, #8]
 8000fea:	430b      	orrs	r3, r1
 8000fec:	6093      	str	r3, [r2, #8]
 8000fee:	e7c9      	b.n	8000f84 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	e7c7      	b.n	8000f8a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e7ea      	b.n	8000fd4 <HAL_I2C_Init+0x94>
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	f0ffffff 	.word	0xf0ffffff
 8001004:	ffff7fff 	.word	0xffff7fff
 8001008:	02008000 	.word	0x02008000

0800100c <HAL_I2C_Master_Transmit_IT>:
{
 800100c:	b530      	push	{r4, r5, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001012:	2041      	movs	r0, #65	; 0x41
 8001014:	5c25      	ldrb	r5, [r4, r0]
    return HAL_BUSY;
 8001016:	383f      	subs	r0, #63	; 0x3f
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001018:	2d20      	cmp	r5, #32
 800101a:	d001      	beq.n	8001020 <HAL_I2C_Master_Transmit_IT+0x14>
}
 800101c:	b003      	add	sp, #12
 800101e:	bd30      	pop	{r4, r5, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001020:	6820      	ldr	r0, [r4, #0]
 8001022:	6985      	ldr	r5, [r0, #24]
      return HAL_BUSY;
 8001024:	2002      	movs	r0, #2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001026:	042d      	lsls	r5, r5, #16
 8001028:	d4f8      	bmi.n	800101c <HAL_I2C_Master_Transmit_IT+0x10>
    __HAL_LOCK(hi2c);
 800102a:	303e      	adds	r0, #62	; 0x3e
 800102c:	5c25      	ldrb	r5, [r4, r0]
 800102e:	383e      	subs	r0, #62	; 0x3e
 8001030:	2d01      	cmp	r5, #1
 8001032:	d0f3      	beq.n	800101c <HAL_I2C_Master_Transmit_IT+0x10>
 8001034:	2501      	movs	r5, #1
 8001036:	303e      	adds	r0, #62	; 0x3e
 8001038:	5425      	strb	r5, [r4, r0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800103a:	3520      	adds	r5, #32
 800103c:	3001      	adds	r0, #1
 800103e:	5425      	strb	r5, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001040:	3d11      	subs	r5, #17
 8001042:	3001      	adds	r0, #1
 8001044:	5425      	strb	r5, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001046:	2000      	movs	r0, #0
 8001048:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800104a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800104c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_I2C_Master_Transmit_IT+0x88>)
 8001050:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_I2C_Master_Transmit_IT+0x8c>)
 8001054:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001056:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001058:	b29b      	uxth	r3, r3
 800105a:	2bff      	cmp	r3, #255	; 0xff
 800105c:	d914      	bls.n	8001088 <HAL_I2C_Master_Transmit_IT+0x7c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	045b      	lsls	r3, r3, #17
    I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001066:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	2080      	movs	r0, #128	; 0x80
 800106c:	0180      	lsls	r0, r0, #6
 800106e:	9000      	str	r0, [sp, #0]
 8001070:	0020      	movs	r0, r4
 8001072:	f7ff feeb 	bl	8000e4c <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8001076:	2200      	movs	r2, #0
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	54e2      	strb	r2, [r4, r3]
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800107c:	2101      	movs	r1, #1
 800107e:	0020      	movs	r0, r4
 8001080:	f7ff fef6 	bl	8000e70 <I2C_Enable_IRQ>
    return HAL_OK;
 8001084:	2000      	movs	r0, #0
 8001086:	e7c9      	b.n	800101c <HAL_I2C_Master_Transmit_IT+0x10>
      hi2c->XferSize = hi2c->XferCount;
 8001088:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800108a:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	049b      	lsls	r3, r3, #18
 8001090:	e7e9      	b.n	8001066 <HAL_I2C_Master_Transmit_IT+0x5a>
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	ffff0000 	.word	0xffff0000
 8001098:	0800177d 	.word	0x0800177d

0800109c <HAL_I2C_Slave_Receive_IT>:
{
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800109e:	2341      	movs	r3, #65	; 0x41
 80010a0:	5cc4      	ldrb	r4, [r0, r3]
    return HAL_BUSY;
 80010a2:	3b3f      	subs	r3, #63	; 0x3f
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a4:	2c20      	cmp	r4, #32
 80010a6:	d001      	beq.n	80010ac <HAL_I2C_Slave_Receive_IT+0x10>
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80010ac:	333e      	adds	r3, #62	; 0x3e
 80010ae:	5cc4      	ldrb	r4, [r0, r3]
 80010b0:	3b3e      	subs	r3, #62	; 0x3e
 80010b2:	2c01      	cmp	r4, #1
 80010b4:	d0f8      	beq.n	80010a8 <HAL_I2C_Slave_Receive_IT+0xc>
 80010b6:	2440      	movs	r4, #64	; 0x40
 80010b8:	3b01      	subs	r3, #1
 80010ba:	5503      	strb	r3, [r0, r4]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80010bc:	2522      	movs	r5, #34	; 0x22
 80010be:	3340      	adds	r3, #64	; 0x40
 80010c0:	54c5      	strb	r5, [r0, r3]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80010c2:	3d02      	subs	r5, #2
 80010c4:	3301      	adds	r3, #1
 80010c6:	54c5      	strb	r5, [r0, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010c8:	2500      	movs	r5, #0
 80010ca:	6445      	str	r5, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80010cc:	6806      	ldr	r6, [r0, #0]
 80010ce:	6873      	ldr	r3, [r6, #4]
 80010d0:	4f08      	ldr	r7, [pc, #32]	; (80010f4 <HAL_I2C_Slave_Receive_IT+0x58>)
 80010d2:	403b      	ands	r3, r7
 80010d4:	6073      	str	r3, [r6, #4]
    hi2c->pBuffPtr    = pData;
 80010d6:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010d8:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010da:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80010dc:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_I2C_Slave_Receive_IT+0x5c>)
 80010e0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_I2C_Slave_Receive_IT+0x60>)
 80010e4:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80010e6:	5505      	strb	r5, [r0, r4]
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80010e8:	2106      	movs	r1, #6
 80010ea:	f7ff fec1 	bl	8000e70 <I2C_Enable_IRQ>
    return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e7da      	b.n	80010a8 <HAL_I2C_Slave_Receive_IT+0xc>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	ffff7fff 	.word	0xffff7fff
 80010f8:	ffff0000 	.word	0xffff0000
 80010fc:	08001441 	.word	0x08001441

08001100 <HAL_I2C_EV_IRQHandler>:
{
 8001100:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001102:	6803      	ldr	r3, [r0, #0]
 8001104:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001106:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800110a:	2b00      	cmp	r3, #0
 800110c:	d000      	beq.n	8001110 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800110e:	4798      	blx	r3
}
 8001110:	bd10      	pop	{r4, pc}

08001112 <I2C_ITMasterSequentialCplt>:
{
 8001112:	b570      	push	{r4, r5, r6, lr}
 8001114:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001116:	2200      	movs	r2, #0
 8001118:	2342      	movs	r3, #66	; 0x42
 800111a:	54c2      	strb	r2, [r0, r3]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800111c:	3b01      	subs	r3, #1
 800111e:	5cc3      	ldrb	r3, [r0, r3]
 8001120:	2b21      	cmp	r3, #33	; 0x21
 8001122:	d00f      	beq.n	8001144 <I2C_ITMasterSequentialCplt+0x32>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001124:	2220      	movs	r2, #32
 8001126:	2341      	movs	r3, #65	; 0x41
 8001128:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800112a:	3b2f      	subs	r3, #47	; 0x2f
 800112c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800112e:	2500      	movs	r5, #0
 8001130:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001132:	2102      	movs	r1, #2
 8001134:	f7ff fed2 	bl	8000edc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	54e5      	strb	r5, [r4, r3]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800113c:	0020      	movs	r0, r4
 800113e:	f003 fcb3 	bl	8004aa8 <HAL_I2C_MasterRxCpltCallback>
}
 8001142:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8001144:	3220      	adds	r2, #32
 8001146:	3320      	adds	r3, #32
 8001148:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800114a:	3b30      	subs	r3, #48	; 0x30
 800114c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800114e:	2500      	movs	r5, #0
 8001150:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001152:	2101      	movs	r1, #1
 8001154:	f7ff fec2 	bl	8000edc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001158:	2340      	movs	r3, #64	; 0x40
 800115a:	54e5      	strb	r5, [r4, r3]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800115c:	0020      	movs	r0, r4
 800115e:	f003 fc9b 	bl	8004a98 <HAL_I2C_MasterTxCpltCallback>
 8001162:	e7ee      	b.n	8001142 <I2C_ITMasterSequentialCplt+0x30>

08001164 <HAL_I2C_SlaveTxCpltCallback>:
}
 8001164:	4770      	bx	lr

08001166 <HAL_I2C_SlaveRxCpltCallback>:
}
 8001166:	4770      	bx	lr

08001168 <I2C_ITSlaveSequentialCplt>:
{
 8001168:	b510      	push	{r4, lr}
 800116a:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800116c:	2200      	movs	r2, #0
 800116e:	2342      	movs	r3, #66	; 0x42
 8001170:	54c2      	strb	r2, [r0, r3]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001172:	3b01      	subs	r3, #1
 8001174:	5cc3      	ldrb	r3, [r0, r3]
 8001176:	2b29      	cmp	r3, #41	; 0x29
 8001178:	d004      	beq.n	8001184 <I2C_ITSlaveSequentialCplt+0x1c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800117a:	2341      	movs	r3, #65	; 0x41
 800117c:	5cc3      	ldrb	r3, [r0, r3]
 800117e:	2b2a      	cmp	r3, #42	; 0x2a
 8001180:	d00f      	beq.n	80011a2 <I2C_ITSlaveSequentialCplt+0x3a>
}
 8001182:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001184:	3228      	adds	r2, #40	; 0x28
 8001186:	3318      	adds	r3, #24
 8001188:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800118a:	3b20      	subs	r3, #32
 800118c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800118e:	2101      	movs	r1, #1
 8001190:	f7ff fea4 	bl	8000edc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001194:	2200      	movs	r2, #0
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800119a:	0020      	movs	r0, r4
 800119c:	f7ff ffe2 	bl	8001164 <HAL_I2C_SlaveTxCpltCallback>
 80011a0:	e7ef      	b.n	8001182 <I2C_ITSlaveSequentialCplt+0x1a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	3317      	adds	r3, #23
 80011a6:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80011a8:	3b1f      	subs	r3, #31
 80011aa:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80011ac:	2102      	movs	r1, #2
 80011ae:	f7ff fe95 	bl	8000edc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80011b8:	0020      	movs	r0, r4
 80011ba:	f7ff ffd4 	bl	8001166 <HAL_I2C_SlaveRxCpltCallback>
}
 80011be:	e7e0      	b.n	8001182 <I2C_ITSlaveSequentialCplt+0x1a>

080011c0 <HAL_I2C_AddrCallback>:
}
 80011c0:	4770      	bx	lr

080011c2 <HAL_I2C_ListenCpltCallback>:
}
 80011c2:	4770      	bx	lr

080011c4 <I2C_ITListenCplt>:
{
 80011c4:	b510      	push	{r4, lr}
 80011c6:	0004      	movs	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <I2C_ITListenCplt+0x60>)
 80011ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80011d0:	2020      	movs	r0, #32
 80011d2:	2241      	movs	r2, #65	; 0x41
 80011d4:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d6:	3201      	adds	r2, #1
 80011d8:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 80011da:	6363      	str	r3, [r4, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80011dc:	074b      	lsls	r3, r1, #29
 80011de:	d512      	bpl.n	8001206 <I2C_ITListenCplt+0x42>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80011e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	6262      	str	r2, [r4, #36]	; 0x24
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011ea:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 80011ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 80011f2:	3b01      	subs	r3, #1
 80011f4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80011f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001200:	2204      	movs	r2, #4
 8001202:	4313      	orrs	r3, r2
 8001204:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001206:	2107      	movs	r1, #7
 8001208:	0020      	movs	r0, r4
 800120a:	f7ff fe67 	bl	8000edc <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001214:	2200      	movs	r2, #0
 8001216:	2340      	movs	r3, #64	; 0x40
 8001218:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 800121a:	0020      	movs	r0, r4
 800121c:	f7ff ffd1 	bl	80011c2 <HAL_I2C_ListenCpltCallback>
}
 8001220:	bd10      	pop	{r4, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	ffff0000 	.word	0xffff0000

08001228 <HAL_I2C_MemTxCpltCallback>:
}
 8001228:	4770      	bx	lr

0800122a <HAL_I2C_MemRxCpltCallback>:
}
 800122a:	4770      	bx	lr

0800122c <HAL_I2C_AbortCpltCallback>:
}
 800122c:	4770      	bx	lr
	...

08001230 <I2C_ITError>:
{
 8001230:	b510      	push	{r4, lr}
 8001232:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	2242      	movs	r2, #66	; 0x42
 8001238:	5483      	strb	r3, [r0, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800123a:	4a36      	ldr	r2, [pc, #216]	; (8001314 <I2C_ITError+0xe4>)
 800123c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800123e:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001240:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001242:	4319      	orrs	r1, r3
 8001244:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001246:	2341      	movs	r3, #65	; 0x41
 8001248:	5cc3      	ldrb	r3, [r0, r3]
 800124a:	2b28      	cmp	r3, #40	; 0x28
 800124c:	d015      	beq.n	800127a <I2C_ITError+0x4a>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800124e:	2341      	movs	r3, #65	; 0x41
 8001250:	5cc3      	ldrb	r3, [r0, r3]
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001252:	2b29      	cmp	r3, #41	; 0x29
 8001254:	d011      	beq.n	800127a <I2C_ITError+0x4a>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001256:	2341      	movs	r3, #65	; 0x41
 8001258:	5cc3      	ldrb	r3, [r0, r3]
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800125a:	2b2a      	cmp	r3, #42	; 0x2a
 800125c:	d00d      	beq.n	800127a <I2C_ITError+0x4a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800125e:	2107      	movs	r1, #7
 8001260:	f7ff fe3c 	bl	8000edc <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001264:	2341      	movs	r3, #65	; 0x41
 8001266:	5ce3      	ldrb	r3, [r4, r3]
 8001268:	2b60      	cmp	r3, #96	; 0x60
 800126a:	d002      	beq.n	8001272 <I2C_ITError+0x42>
      hi2c->State         = HAL_I2C_STATE_READY;
 800126c:	2220      	movs	r2, #32
 800126e:	2341      	movs	r3, #65	; 0x41
 8001270:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001276:	6363      	str	r3, [r4, #52]	; 0x34
 8001278:	e00a      	b.n	8001290 <I2C_ITError+0x60>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800127a:	2103      	movs	r1, #3
 800127c:	0020      	movs	r0, r4
 800127e:	f7ff fe2d 	bl	8000edc <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001282:	2228      	movs	r2, #40	; 0x28
 8001284:	2341      	movs	r3, #65	; 0x41
 8001286:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <I2C_ITError+0xe8>)
 800128e:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	0452      	lsls	r2, r2, #17
 8001296:	d40d      	bmi.n	80012b4 <I2C_ITError+0x84>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	0412      	lsls	r2, r2, #16
 800129c:	d41d      	bmi.n	80012da <I2C_ITError+0xaa>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800129e:	2341      	movs	r3, #65	; 0x41
 80012a0:	5ce3      	ldrb	r3, [r4, r3]
 80012a2:	2b60      	cmp	r3, #96	; 0x60
 80012a4:	d02c      	beq.n	8001300 <I2C_ITError+0xd0>
    __HAL_UNLOCK(hi2c);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_ErrorCallback(hi2c);
 80012ac:	0020      	movs	r0, r4
 80012ae:	f003 fc03 	bl	8004ab8 <HAL_I2C_ErrorCallback>
}
 80012b2:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4919      	ldr	r1, [pc, #100]	; (800131c <I2C_ITError+0xec>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80012bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <I2C_ITError+0xf0>)
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	54e2      	strb	r2, [r4, r3]
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80012c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012ca:	f7ff fb02 	bl	80008d2 <HAL_DMA_Abort_IT>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0ef      	beq.n	80012b2 <I2C_ITError+0x82>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80012d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012d6:	4798      	blx	r3
 80012d8:	e7eb      	b.n	80012b2 <I2C_ITError+0x82>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4911      	ldr	r1, [pc, #68]	; (8001324 <I2C_ITError+0xf4>)
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80012e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <I2C_ITError+0xf0>)
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	54e2      	strb	r2, [r4, r3]
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80012ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012f0:	f7ff faef 	bl	80008d2 <HAL_DMA_Abort_IT>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d0dc      	beq.n	80012b2 <I2C_ITError+0x82>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80012f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012fc:	4798      	blx	r3
 80012fe:	e7d8      	b.n	80012b2 <I2C_ITError+0x82>
    hi2c->State = HAL_I2C_STATE_READY;
 8001300:	2220      	movs	r2, #32
 8001302:	3b1f      	subs	r3, #31
 8001304:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8001306:	2200      	movs	r2, #0
 8001308:	3b01      	subs	r3, #1
 800130a:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_AbortCpltCallback(hi2c);
 800130c:	0020      	movs	r0, r4
 800130e:	f7ff ff8d 	bl	800122c <HAL_I2C_AbortCpltCallback>
 8001312:	e7ce      	b.n	80012b2 <I2C_ITError+0x82>
 8001314:	ffff0000 	.word	0xffff0000
 8001318:	08001441 	.word	0x08001441
 800131c:	ffffbfff 	.word	0xffffbfff
 8001320:	08001a37 	.word	0x08001a37
 8001324:	ffff7fff 	.word	0xffff7fff

08001328 <I2C_ITSlaveCplt>:
{
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	0004      	movs	r4, r0
 800132c:	000d      	movs	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800132e:	6803      	ldr	r3, [r0, #0]
 8001330:	2220      	movs	r2, #32
 8001332:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	3a18      	subs	r2, #24
 8001338:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800133a:	2107      	movs	r1, #7
 800133c:	f7ff fdce 	bl	8000edc <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001340:	6822      	ldr	r2, [r4, #0]
 8001342:	6851      	ldr	r1, [r2, #4]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	430b      	orrs	r3, r1
 800134a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	6853      	ldr	r3, [r2, #4]
 8001350:	4939      	ldr	r1, [pc, #228]	; (8001438 <I2C_ITSlaveCplt+0x110>)
 8001352:	400b      	ands	r3, r1
 8001354:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001356:	0020      	movs	r0, r4
 8001358:	f7ff fd68 	bl	8000e2c <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	045b      	lsls	r3, r3, #17
 8001362:	d402      	bmi.n	800136a <I2C_ITSlaveCplt+0x42>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001364:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	d508      	bpl.n	800137c <I2C_ITSlaveCplt+0x54>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 800136a:	2341      	movs	r3, #65	; 0x41
 800136c:	5ce3      	ldrb	r3, [r4, r3]
 800136e:	2b21      	cmp	r3, #33	; 0x21
 8001370:	d03a      	beq.n	80013e8 <I2C_ITSlaveCplt+0xc0>
 8001372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	b29b      	uxth	r3, r3
 800137a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800137c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <I2C_ITSlaveCplt+0x64>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001386:	2104      	movs	r1, #4
 8001388:	430b      	orrs	r3, r1
 800138a:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800138c:	076b      	lsls	r3, r5, #29
 800138e:	d511      	bpl.n	80013b4 <I2C_ITSlaveCplt+0x8c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001392:	1c59      	adds	r1, r3, #1
 8001394:	6261      	str	r1, [r4, #36]	; 0x24
 8001396:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001398:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 800139a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <I2C_ITSlaveCplt+0x8c>
      hi2c->XferSize--;
 80013a0:	3b01      	subs	r3, #1
 80013a2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80013a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ae:	2204      	movs	r2, #4
 80013b0:	4313      	orrs	r3, r2
 80013b2:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b8:	2242      	movs	r2, #66	; 0x42
 80013ba:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 80013bc:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80013be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d116      	bne.n	80013f2 <I2C_ITSlaveCplt+0xca>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80013c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <I2C_ITSlaveCplt+0x114>)
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d11f      	bne.n	800140c <I2C_ITSlaveCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80013cc:	2341      	movs	r3, #65	; 0x41
 80013ce:	5ce3      	ldrb	r3, [r4, r3]
 80013d0:	2b22      	cmp	r3, #34	; 0x22
 80013d2:	d026      	beq.n	8001422 <I2C_ITSlaveCplt+0xfa>
    hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	2220      	movs	r2, #32
 80013d6:	2341      	movs	r3, #65	; 0x41
 80013d8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80013da:	2200      	movs	r2, #0
 80013dc:	3b01      	subs	r3, #1
 80013de:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80013e0:	0020      	movs	r0, r4
 80013e2:	f7ff febf 	bl	8001164 <HAL_I2C_SlaveTxCpltCallback>
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 80013e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	e7c3      	b.n	800137a <I2C_ITSlaveCplt+0x52>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80013f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80013f4:	0020      	movs	r0, r4
 80013f6:	f7ff ff1b 	bl	8001230 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80013fa:	2341      	movs	r3, #65	; 0x41
 80013fc:	5ce3      	ldrb	r3, [r4, r3]
 80013fe:	2b28      	cmp	r3, #40	; 0x28
 8001400:	d1f1      	bne.n	80013e6 <I2C_ITSlaveCplt+0xbe>
      I2C_ITListenCplt(hi2c, ITFlags);
 8001402:	0029      	movs	r1, r5
 8001404:	0020      	movs	r0, r4
 8001406:	f7ff fedd 	bl	80011c4 <I2C_ITListenCplt>
 800140a:	e7ec      	b.n	80013e6 <I2C_ITSlaveCplt+0xbe>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800140c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800140e:	2220      	movs	r2, #32
 8001410:	2341      	movs	r3, #65	; 0x41
 8001412:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8001414:	2200      	movs	r2, #0
 8001416:	3b01      	subs	r3, #1
 8001418:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 800141a:	0020      	movs	r0, r4
 800141c:	f7ff fed1 	bl	80011c2 <HAL_I2C_ListenCpltCallback>
 8001420:	e7e1      	b.n	80013e6 <I2C_ITSlaveCplt+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8001422:	2220      	movs	r2, #32
 8001424:	331f      	adds	r3, #31
 8001426:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8001428:	2200      	movs	r2, #0
 800142a:	3b01      	subs	r3, #1
 800142c:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800142e:	0020      	movs	r0, r4
 8001430:	f7ff fe99 	bl	8001166 <HAL_I2C_SlaveRxCpltCallback>
 8001434:	e7d7      	b.n	80013e6 <I2C_ITSlaveCplt+0xbe>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	fe00e800 	.word	0xfe00e800
 800143c:	ffff0000 	.word	0xffff0000

08001440 <I2C_Slave_ISR_IT>:
{
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	46ce      	mov	lr, r9
 8001444:	4647      	mov	r7, r8
 8001446:	b580      	push	{r7, lr}
 8001448:	0004      	movs	r4, r0
 800144a:	000d      	movs	r5, r1
 800144c:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800144e:	2340      	movs	r3, #64	; 0x40
 8001450:	5cc3      	ldrb	r3, [r0, r3]
 8001452:	2002      	movs	r0, #2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d041      	beq.n	80014dc <I2C_Slave_ISR_IT+0x9c>
 8001458:	2201      	movs	r2, #1
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	54e2      	strb	r2, [r4, r3]
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 800145e:	06cb      	lsls	r3, r1, #27
 8001460:	d540      	bpl.n	80014e4 <I2C_Slave_ISR_IT+0xa4>
 8001462:	06f3      	lsls	r3, r6, #27
 8001464:	d53e      	bpl.n	80014e4 <I2C_Slave_ISR_IT+0xa4>
    if (hi2c->XferCount == 0U)
 8001466:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d126      	bne.n	80014bc <I2C_Slave_ISR_IT+0x7c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800146e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	049b      	lsls	r3, r3, #18
 8001474:	429a      	cmp	r2, r3
 8001476:	d00e      	beq.n	8001496 <I2C_Slave_ISR_IT+0x56>
 8001478:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800147a:	429a      	cmp	r2, r3
 800147c:	d00b      	beq.n	8001496 <I2C_Slave_ISR_IT+0x56>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800147e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001480:	4b67      	ldr	r3, [pc, #412]	; (8001620 <I2C_Slave_ISR_IT+0x1e0>)
 8001482:	429a      	cmp	r2, r3
 8001484:	d003      	beq.n	800148e <I2C_Slave_ISR_IT+0x4e>
 8001486:	2341      	movs	r3, #65	; 0x41
 8001488:	5ce3      	ldrb	r3, [r4, r3]
 800148a:	2b29      	cmp	r3, #41	; 0x29
 800148c:	d00c      	beq.n	80014a8 <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	2210      	movs	r2, #16
 8001492:	61da      	str	r2, [r3, #28]
 8001494:	e019      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001496:	2341      	movs	r3, #65	; 0x41
 8001498:	5ce3      	ldrb	r3, [r4, r3]
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800149a:	2b28      	cmp	r3, #40	; 0x28
 800149c:	d1ef      	bne.n	800147e <I2C_Slave_ISR_IT+0x3e>
        I2C_ITListenCplt(hi2c, ITFlags);
 800149e:	0029      	movs	r1, r5
 80014a0:	0020      	movs	r0, r4
 80014a2:	f7ff fe8f 	bl	80011c4 <I2C_ITListenCplt>
 80014a6:	e010      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	2210      	movs	r2, #16
 80014ac:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80014ae:	0020      	movs	r0, r4
 80014b0:	f7ff fcbc 	bl	8000e2c <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 80014b4:	0020      	movs	r0, r4
 80014b6:	f7ff fe57 	bl	8001168 <I2C_ITSlaveSequentialCplt>
 80014ba:	e006      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	2210      	movs	r2, #16
 80014c0:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014c4:	3a0c      	subs	r2, #12
 80014c6:	4313      	orrs	r3, r2
 80014c8:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80014ca:	06ab      	lsls	r3, r5, #26
 80014cc:	d502      	bpl.n	80014d4 <I2C_Slave_ISR_IT+0x94>
 80014ce:	06b3      	lsls	r3, r6, #26
 80014d0:	d500      	bpl.n	80014d4 <I2C_Slave_ISR_IT+0x94>
 80014d2:	e0a0      	b.n	8001616 <I2C_Slave_ISR_IT+0x1d6>
  __HAL_UNLOCK(hi2c);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2340      	movs	r3, #64	; 0x40
 80014d8:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80014da:	2000      	movs	r0, #0
}
 80014dc:	bc0c      	pop	{r2, r3}
 80014de:	4690      	mov	r8, r2
 80014e0:	4699      	mov	r9, r3
 80014e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 80014e4:	076b      	lsls	r3, r5, #29
 80014e6:	d51e      	bpl.n	8001526 <I2C_Slave_ISR_IT+0xe6>
 80014e8:	0773      	lsls	r3, r6, #29
 80014ea:	d51c      	bpl.n	8001526 <I2C_Slave_ISR_IT+0xe6>
    if (hi2c->XferCount > 0U)
 80014ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00c      	beq.n	800150e <I2C_Slave_ISR_IT+0xce>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80014f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	6262      	str	r2, [r4, #36]	; 0x24
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014fe:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001500:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001502:	3b01      	subs	r3, #1
 8001504:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001508:	3b01      	subs	r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800150e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1d9      	bne.n	80014ca <I2C_Slave_ISR_IT+0x8a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8001516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <I2C_Slave_ISR_IT+0x1e0>)
 800151a:	429a      	cmp	r2, r3
 800151c:	d0d5      	beq.n	80014ca <I2C_Slave_ISR_IT+0x8a>
      I2C_ITSlaveSequentialCplt(hi2c);
 800151e:	0020      	movs	r0, r4
 8001520:	f7ff fe22 	bl	8001168 <I2C_ITSlaveSequentialCplt>
 8001524:	e7d1      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001526:	072b      	lsls	r3, r5, #28
 8001528:	d501      	bpl.n	800152e <I2C_Slave_ISR_IT+0xee>
 800152a:	0733      	lsls	r3, r6, #28
 800152c:	d415      	bmi.n	800155a <I2C_Slave_ISR_IT+0x11a>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 800152e:	07ab      	lsls	r3, r5, #30
 8001530:	d5cb      	bpl.n	80014ca <I2C_Slave_ISR_IT+0x8a>
 8001532:	07b3      	lsls	r3, r6, #30
 8001534:	d5c9      	bpl.n	80014ca <I2C_Slave_ISR_IT+0x8a>
    if (hi2c->XferCount > 0U)
 8001536:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d05e      	beq.n	80015fc <I2C_Slave_ISR_IT+0x1bc>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800153e:	6822      	ldr	r2, [r4, #0]
 8001540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001542:	1c59      	adds	r1, r3, #1
 8001544:	6261      	str	r1, [r4, #36]	; 0x24
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800154a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800154c:	3b01      	subs	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001552:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001554:	3b01      	subs	r3, #1
 8001556:	8523      	strh	r3, [r4, #40]	; 0x28
 8001558:	e7b7      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 800155a:	2341      	movs	r3, #65	; 0x41
 800155c:	5ce3      	ldrb	r3, [r4, r3]
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	4013      	ands	r3, r2
 8001562:	2b28      	cmp	r3, #40	; 0x28
 8001564:	d006      	beq.n	8001574 <I2C_Slave_ISR_IT+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	2208      	movs	r2, #8
 800156a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800156c:	2200      	movs	r2, #0
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	54e2      	strb	r2, [r4, r3]
 8001572:	e7aa      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
    transferdirection = I2C_GET_DIR(hi2c);
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	6999      	ldr	r1, [r3, #24]
 8001578:	03c9      	lsls	r1, r1, #15
 800157a:	0fca      	lsrs	r2, r1, #31
 800157c:	4690      	mov	r8, r2
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800157e:	699f      	ldr	r7, [r3, #24]
 8001580:	0c3f      	lsrs	r7, r7, #16
 8001582:	22fe      	movs	r2, #254	; 0xfe
 8001584:	4017      	ands	r7, r2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001586:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001588:	68d9      	ldr	r1, [r3, #12]
 800158a:	4689      	mov	r9, r1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800158c:	68e1      	ldr	r1, [r4, #12]
 800158e:	2902      	cmp	r1, #2
 8001590:	d127      	bne.n	80015e2 <I2C_Slave_ISR_IT+0x1a2>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001592:	0592      	lsls	r2, r2, #22
 8001594:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001596:	09d1      	lsrs	r1, r2, #7
 8001598:	404f      	eors	r7, r1
 800159a:	2106      	movs	r1, #6
 800159c:	4239      	tst	r1, r7
 800159e:	d111      	bne.n	80015c4 <I2C_Slave_ISR_IT+0x184>
        hi2c->AddrEventCount++;
 80015a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80015a2:	3101      	adds	r1, #1
 80015a4:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80015a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80015a8:	2902      	cmp	r1, #2
 80015aa:	d000      	beq.n	80015ae <I2C_Slave_ISR_IT+0x16e>
 80015ac:	e78d      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
          hi2c->AddrEventCount = 0U;
 80015ae:	2100      	movs	r1, #0
 80015b0:	64a1      	str	r1, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80015b2:	2008      	movs	r0, #8
 80015b4:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80015b6:	2340      	movs	r3, #64	; 0x40
 80015b8:	54e1      	strb	r1, [r4, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015ba:	4641      	mov	r1, r8
 80015bc:	0020      	movs	r0, r4
 80015be:	f7ff fdff 	bl	80011c0 <HAL_I2C_AddrCallback>
 80015c2:	e782      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015c4:	2104      	movs	r1, #4
 80015c6:	0020      	movs	r0, r4
 80015c8:	f7ff fc88 	bl	8000edc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2340      	movs	r3, #64	; 0x40
 80015d0:	54e2      	strb	r2, [r4, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015d2:	32fe      	adds	r2, #254	; 0xfe
 80015d4:	464b      	mov	r3, r9
 80015d6:	401a      	ands	r2, r3
 80015d8:	4641      	mov	r1, r8
 80015da:	0020      	movs	r0, r4
 80015dc:	f7ff fdf0 	bl	80011c0 <HAL_I2C_AddrCallback>
 80015e0:	e773      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015e2:	2104      	movs	r1, #4
 80015e4:	0020      	movs	r0, r4
 80015e6:	f7ff fc79 	bl	8000edc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	54e2      	strb	r2, [r4, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015f0:	003a      	movs	r2, r7
 80015f2:	4641      	mov	r1, r8
 80015f4:	0020      	movs	r0, r4
 80015f6:	f7ff fde3 	bl	80011c0 <HAL_I2C_AddrCallback>
 80015fa:	e766      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 80015fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	045b      	lsls	r3, r3, #17
 8001602:	429a      	cmp	r2, r3
 8001604:	d003      	beq.n	800160e <I2C_Slave_ISR_IT+0x1ce>
 8001606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d000      	beq.n	800160e <I2C_Slave_ISR_IT+0x1ce>
 800160c:	e75d      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
        I2C_ITSlaveSequentialCplt(hi2c);
 800160e:	0020      	movs	r0, r4
 8001610:	f7ff fdaa 	bl	8001168 <I2C_ITSlaveSequentialCplt>
 8001614:	e759      	b.n	80014ca <I2C_Slave_ISR_IT+0x8a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001616:	0029      	movs	r1, r5
 8001618:	0020      	movs	r0, r4
 800161a:	f7ff fe85 	bl	8001328 <I2C_ITSlaveCplt>
 800161e:	e759      	b.n	80014d4 <I2C_Slave_ISR_IT+0x94>
 8001620:	ffff0000 	.word	0xffff0000

08001624 <I2C_Slave_ISR_DMA>:
{
 8001624:	b510      	push	{r4, lr}
 8001626:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8001628:	2340      	movs	r3, #64	; 0x40
 800162a:	5cc3      	ldrb	r3, [r0, r3]
 800162c:	2002      	movs	r0, #2
 800162e:	2b01      	cmp	r3, #1
 8001630:	d035      	beq.n	800169e <I2C_Slave_ISR_DMA+0x7a>
 8001632:	3801      	subs	r0, #1
 8001634:	2340      	movs	r3, #64	; 0x40
 8001636:	54e0      	strb	r0, [r4, r3]
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001638:	06cb      	lsls	r3, r1, #27
 800163a:	d520      	bpl.n	800167e <I2C_Slave_ISR_DMA+0x5a>
 800163c:	06d3      	lsls	r3, r2, #27
 800163e:	d51e      	bpl.n	800167e <I2C_Slave_ISR_DMA+0x5a>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 8001640:	2341      	movs	r3, #65	; 0x41
 8001642:	5ce3      	ldrb	r3, [r4, r3]
 8001644:	2b21      	cmp	r3, #33	; 0x21
 8001646:	d00b      	beq.n	8001660 <I2C_Slave_ISR_DMA+0x3c>
 8001648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	425a      	negs	r2, r3
 8001650:	4153      	adcs	r3, r2
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <I2C_Slave_ISR_DMA+0x4a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	61da      	str	r2, [r3, #28]
 800165e:	e01a      	b.n	8001696 <I2C_Slave_ISR_DMA+0x72>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U)
 8001660:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	425a      	negs	r2, r3
 8001668:	4153      	adcs	r3, r2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	e7f2      	b.n	8001654 <I2C_Slave_ISR_DMA+0x30>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	2210      	movs	r2, #16
 8001672:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001674:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001676:	3a0c      	subs	r2, #12
 8001678:	4313      	orrs	r3, r2
 800167a:	6463      	str	r3, [r4, #68]	; 0x44
 800167c:	e00b      	b.n	8001696 <I2C_Slave_ISR_DMA+0x72>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 800167e:	070b      	lsls	r3, r1, #28
 8001680:	d505      	bpl.n	800168e <I2C_Slave_ISR_DMA+0x6a>
 8001682:	0713      	lsls	r3, r2, #28
 8001684:	d503      	bpl.n	800168e <I2C_Slave_ISR_DMA+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	61da      	str	r2, [r3, #28]
 800168c:	e003      	b.n	8001696 <I2C_Slave_ISR_DMA+0x72>
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 800168e:	068b      	lsls	r3, r1, #26
 8001690:	d501      	bpl.n	8001696 <I2C_Slave_ISR_DMA+0x72>
 8001692:	0693      	lsls	r3, r2, #26
 8001694:	d404      	bmi.n	80016a0 <I2C_Slave_ISR_DMA+0x7c>
  __HAL_UNLOCK(hi2c);
 8001696:	2200      	movs	r2, #0
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800169c:	2000      	movs	r0, #0
}
 800169e:	bd10      	pop	{r4, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80016a0:	0020      	movs	r0, r4
 80016a2:	f7ff fe41 	bl	8001328 <I2C_ITSlaveCplt>
 80016a6:	e7f6      	b.n	8001696 <I2C_Slave_ISR_DMA+0x72>

080016a8 <I2C_ITMasterCplt>:
{
 80016a8:	b510      	push	{r4, lr}
 80016aa:	0004      	movs	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ac:	6803      	ldr	r3, [r0, #0]
 80016ae:	2220      	movs	r2, #32
 80016b0:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80016b2:	6802      	ldr	r2, [r0, #0]
 80016b4:	6853      	ldr	r3, [r2, #4]
 80016b6:	482f      	ldr	r0, [pc, #188]	; (8001774 <I2C_ITMasterCplt+0xcc>)
 80016b8:	4003      	ands	r3, r0
 80016ba:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80016c0:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <I2C_ITMasterCplt+0xd0>)
 80016c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if ((ITFlags & I2C_FLAG_AF) != RESET)
 80016c6:	06cb      	lsls	r3, r1, #27
 80016c8:	d506      	bpl.n	80016d8 <I2C_ITMasterCplt+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016d2:	3a0c      	subs	r2, #12
 80016d4:	4313      	orrs	r3, r2
 80016d6:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 80016d8:	0020      	movs	r0, r4
 80016da:	f7ff fba7 	bl	8000e2c <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80016de:	2103      	movs	r1, #3
 80016e0:	0020      	movs	r0, r4
 80016e2:	f7ff fbfb 	bl	8000edc <I2C_Disable_IRQ>
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 80016e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <I2C_ITMasterCplt+0x7c>
 80016ec:	3341      	adds	r3, #65	; 0x41
 80016ee:	5ce3      	ldrb	r3, [r4, r3]
 80016f0:	2b60      	cmp	r3, #96	; 0x60
 80016f2:	d017      	beq.n	8001724 <I2C_ITMasterCplt+0x7c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80016f4:	2341      	movs	r3, #65	; 0x41
 80016f6:	5ce3      	ldrb	r3, [r4, r3]
 80016f8:	2b21      	cmp	r3, #33	; 0x21
 80016fa:	d018      	beq.n	800172e <I2C_ITMasterCplt+0x86>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016fc:	2341      	movs	r3, #65	; 0x41
 80016fe:	5ce3      	ldrb	r3, [r4, r3]
 8001700:	2b22      	cmp	r3, #34	; 0x22
 8001702:	d113      	bne.n	800172c <I2C_ITMasterCplt+0x84>
    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	2220      	movs	r2, #32
 8001706:	331f      	adds	r3, #31
 8001708:	54e2      	strb	r2, [r4, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800170a:	3301      	adds	r3, #1
 800170c:	5ce3      	ldrb	r3, [r4, r3]
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d026      	beq.n	8001760 <I2C_ITMasterCplt+0xb8>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	2242      	movs	r2, #66	; 0x42
 8001716:	54a3      	strb	r3, [r4, r2]
      __HAL_UNLOCK(hi2c);
 8001718:	3a02      	subs	r2, #2
 800171a:	54a3      	strb	r3, [r4, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800171c:	0020      	movs	r0, r4
 800171e:	f003 f9c3 	bl	8004aa8 <HAL_I2C_MasterRxCpltCallback>
}
 8001722:	e003      	b.n	800172c <I2C_ITMasterCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001724:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001726:	0020      	movs	r0, r4
 8001728:	f7ff fd82 	bl	8001230 <I2C_ITError>
}
 800172c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800172e:	2220      	movs	r2, #32
 8001730:	3320      	adds	r3, #32
 8001732:	54e2      	strb	r2, [r4, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001734:	3301      	adds	r3, #1
 8001736:	5ce3      	ldrb	r3, [r4, r3]
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d008      	beq.n	800174e <I2C_ITMasterCplt+0xa6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	2242      	movs	r2, #66	; 0x42
 8001740:	54a3      	strb	r3, [r4, r2]
      __HAL_UNLOCK(hi2c);
 8001742:	3a02      	subs	r2, #2
 8001744:	54a3      	strb	r3, [r4, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001746:	0020      	movs	r0, r4
 8001748:	f003 f9a6 	bl	8004a98 <HAL_I2C_MasterTxCpltCallback>
 800174c:	e7ee      	b.n	800172c <I2C_ITMasterCplt+0x84>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	2300      	movs	r3, #0
 8001750:	3222      	adds	r2, #34	; 0x22
 8001752:	54a3      	strb	r3, [r4, r2]
      __HAL_UNLOCK(hi2c);
 8001754:	3a02      	subs	r2, #2
 8001756:	54a3      	strb	r3, [r4, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001758:	0020      	movs	r0, r4
 800175a:	f7ff fd65 	bl	8001228 <HAL_I2C_MemTxCpltCallback>
 800175e:	e7e5      	b.n	800172c <I2C_ITMasterCplt+0x84>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	3222      	adds	r2, #34	; 0x22
 8001764:	54a3      	strb	r3, [r4, r2]
      __HAL_UNLOCK(hi2c);
 8001766:	3a02      	subs	r2, #2
 8001768:	54a3      	strb	r3, [r4, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800176a:	0020      	movs	r0, r4
 800176c:	f7ff fd5d 	bl	800122a <HAL_I2C_MemRxCpltCallback>
 8001770:	e7dc      	b.n	800172c <I2C_ITMasterCplt+0x84>
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	fe00e800 	.word	0xfe00e800
 8001778:	ffff0000 	.word	0xffff0000

0800177c <I2C_Master_ISR_IT>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	0004      	movs	r4, r0
 8001782:	000d      	movs	r5, r1
 8001784:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8001786:	2340      	movs	r3, #64	; 0x40
 8001788:	5cc3      	ldrb	r3, [r0, r3]
 800178a:	2002      	movs	r0, #2
 800178c:	2b01      	cmp	r3, #1
 800178e:	d020      	beq.n	80017d2 <I2C_Master_ISR_IT+0x56>
 8001790:	2201      	movs	r2, #1
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	54e2      	strb	r2, [r4, r3]
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001796:	06cb      	lsls	r3, r1, #27
 8001798:	d501      	bpl.n	800179e <I2C_Master_ISR_IT+0x22>
 800179a:	06f3      	lsls	r3, r6, #27
 800179c:	d41b      	bmi.n	80017d6 <I2C_Master_ISR_IT+0x5a>
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 800179e:	076b      	lsls	r3, r5, #29
 80017a0:	d524      	bpl.n	80017ec <I2C_Master_ISR_IT+0x70>
 80017a2:	0773      	lsls	r3, r6, #29
 80017a4:	d522      	bpl.n	80017ec <I2C_Master_ISR_IT+0x70>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80017a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	6262      	str	r2, [r4, #36]	; 0x24
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017b0:	701a      	strb	r2, [r3, #0]
    hi2c->XferSize--;
 80017b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017b4:	3b01      	subs	r3, #1
 80017b6:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80017b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80017c0:	06ab      	lsls	r3, r5, #26
 80017c2:	d502      	bpl.n	80017ca <I2C_Master_ISR_IT+0x4e>
 80017c4:	06b3      	lsls	r3, r6, #26
 80017c6:	d500      	bpl.n	80017ca <I2C_Master_ISR_IT+0x4e>
 80017c8:	e087      	b.n	80018da <I2C_Master_ISR_IT+0x15e>
  __HAL_UNLOCK(hi2c);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80017d0:	2000      	movs	r0, #0
}
 80017d2:	b002      	add	sp, #8
 80017d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	320f      	adds	r2, #15
 80017da:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017de:	3a0c      	subs	r2, #12
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 80017e4:	0020      	movs	r0, r4
 80017e6:	f7ff fb21 	bl	8000e2c <I2C_Flush_TXDR>
 80017ea:	e7e9      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 80017ec:	07ab      	lsls	r3, r5, #30
 80017ee:	d50f      	bpl.n	8001810 <I2C_Master_ISR_IT+0x94>
 80017f0:	07b3      	lsls	r3, r6, #30
 80017f2:	d50d      	bpl.n	8001810 <I2C_Master_ISR_IT+0x94>
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f8:	1c59      	adds	r1, r3, #1
 80017fa:	6261      	str	r1, [r4, #36]	; 0x24
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	6293      	str	r3, [r2, #40]	; 0x28
    hi2c->XferSize--;
 8001800:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001802:	3b01      	subs	r3, #1
 8001804:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8001806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001808:	3b01      	subs	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800180e:	e7d7      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8001810:	062b      	lsls	r3, r5, #24
 8001812:	d540      	bpl.n	8001896 <I2C_Master_ISR_IT+0x11a>
 8001814:	0673      	lsls	r3, r6, #25
 8001816:	d5d3      	bpl.n	80017c0 <I2C_Master_ISR_IT+0x44>
    if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001818:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	d12e      	bne.n	800187c <I2C_Master_ISR_IT+0x100>
 800181e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d02a      	beq.n	800187c <I2C_Master_ISR_IT+0x100>
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	0589      	lsls	r1, r1, #22
 800182c:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d80e      	bhi.n	8001854 <I2C_Master_ISR_IT+0xd8>
        hi2c->XferSize = hi2c->XferCount;
 8001836:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001838:	b292      	uxth	r2, r2
 800183a:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800183c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <I2C_Master_ISR_IT+0x168>)
 8001840:	4298      	cmp	r0, r3
 8001842:	d012      	beq.n	800186a <I2C_Master_ISR_IT+0xee>
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001844:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	2000      	movs	r0, #0
 800184a:	9000      	str	r0, [sp, #0]
 800184c:	0020      	movs	r0, r4
 800184e:	f7ff fafd 	bl	8000e4c <I2C_TransferConfig>
 8001852:	e7b5      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001854:	23ff      	movs	r3, #255	; 0xff
 8001856:	8523      	strh	r3, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	22ff      	movs	r2, #255	; 0xff
 8001862:	0020      	movs	r0, r4
 8001864:	f7ff faf2 	bl	8000e4c <I2C_TransferConfig>
 8001868:	e7aa      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	2300      	movs	r3, #0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	049b      	lsls	r3, r3, #18
 8001874:	0020      	movs	r0, r4
 8001876:	f7ff fae9 	bl	8000e4c <I2C_TransferConfig>
 800187a:	e7a1      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	d403      	bmi.n	800188c <I2C_Master_ISR_IT+0x110>
        I2C_ITMasterSequentialCplt(hi2c);
 8001884:	0020      	movs	r0, r4
 8001886:	f7ff fc44 	bl	8001112 <I2C_ITMasterSequentialCplt>
 800188a:	e799      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	0020      	movs	r0, r4
 8001890:	f7ff fcce 	bl	8001230 <I2C_ITError>
 8001894:	e794      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8001896:	066b      	lsls	r3, r5, #25
 8001898:	d400      	bmi.n	800189c <I2C_Master_ISR_IT+0x120>
 800189a:	e791      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
 800189c:	0673      	lsls	r3, r6, #25
 800189e:	d400      	bmi.n	80018a2 <I2C_Master_ISR_IT+0x126>
 80018a0:	e78e      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
    if (hi2c->XferCount == 0U)
 80018a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d112      	bne.n	80018d0 <I2C_Master_ISR_IT+0x154>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	0192      	lsls	r2, r2, #6
 80018b0:	d500      	bpl.n	80018b4 <I2C_Master_ISR_IT+0x138>
 80018b2:	e785      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80018b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <I2C_Master_ISR_IT+0x168>)
 80018b8:	4291      	cmp	r1, r2
 80018ba:	d003      	beq.n	80018c4 <I2C_Master_ISR_IT+0x148>
          I2C_ITMasterSequentialCplt(hi2c);
 80018bc:	0020      	movs	r0, r4
 80018be:	f7ff fc28 	bl	8001112 <I2C_ITMasterSequentialCplt>
 80018c2:	e77d      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018c4:	6859      	ldr	r1, [r3, #4]
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	01d2      	lsls	r2, r2, #7
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	e777      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	0020      	movs	r0, r4
 80018d4:	f7ff fcac 	bl	8001230 <I2C_ITError>
 80018d8:	e772      	b.n	80017c0 <I2C_Master_ISR_IT+0x44>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80018da:	0029      	movs	r1, r5
 80018dc:	0020      	movs	r0, r4
 80018de:	f7ff fee3 	bl	80016a8 <I2C_ITMasterCplt>
 80018e2:	e772      	b.n	80017ca <I2C_Master_ISR_IT+0x4e>
 80018e4:	ffff0000 	.word	0xffff0000

080018e8 <I2C_Master_ISR_DMA>:
{
 80018e8:	b510      	push	{r4, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 80018ee:	2340      	movs	r3, #64	; 0x40
 80018f0:	5cc3      	ldrb	r3, [r0, r3]
 80018f2:	2002      	movs	r0, #2
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d05e      	beq.n	80019b6 <I2C_Master_ISR_DMA+0xce>
 80018f8:	3801      	subs	r0, #1
 80018fa:	2340      	movs	r3, #64	; 0x40
 80018fc:	54e0      	strb	r0, [r4, r3]
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 80018fe:	06cb      	lsls	r3, r1, #27
 8001900:	d501      	bpl.n	8001906 <I2C_Master_ISR_DMA+0x1e>
 8001902:	06d3      	lsls	r3, r2, #27
 8001904:	d42f      	bmi.n	8001966 <I2C_Master_ISR_DMA+0x7e>
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8001906:	060b      	lsls	r3, r1, #24
 8001908:	d54d      	bpl.n	80019a6 <I2C_Master_ISR_DMA+0xbe>
 800190a:	0653      	lsls	r3, r2, #25
 800190c:	d54b      	bpl.n	80019a6 <I2C_Master_ISR_DMA+0xbe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	438b      	bics	r3, r1
 8001916:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8001918:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03d      	beq.n	800199c <I2C_Master_ISR_DMA+0xb4>
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	0589      	lsls	r1, r1, #22
 8001926:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001928:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	2bff      	cmp	r3, #255	; 0xff
 800192e:	d929      	bls.n	8001984 <I2C_Master_ISR_DMA+0x9c>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001930:	23ff      	movs	r3, #255	; 0xff
 8001932:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001938:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	2000      	movs	r0, #0
 800193e:	9000      	str	r0, [sp, #0]
 8001940:	0020      	movs	r0, r4
 8001942:	f7ff fa83 	bl	8000e4c <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8001946:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001948:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001950:	2341      	movs	r3, #65	; 0x41
 8001952:	5ce3      	ldrb	r3, [r4, r3]
 8001954:	2b22      	cmp	r3, #34	; 0x22
 8001956:	d01a      	beq.n	800198e <I2C_Master_ISR_DMA+0xa6>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	6811      	ldr	r1, [r2, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	430b      	orrs	r3, r1
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e023      	b.n	80019ae <I2C_Master_ISR_DMA+0xc6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800196c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800196e:	3a0c      	subs	r2, #12
 8001970:	4313      	orrs	r3, r2
 8001972:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001974:	2112      	movs	r1, #18
 8001976:	0020      	movs	r0, r4
 8001978:	f7ff fa7a 	bl	8000e70 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 800197c:	0020      	movs	r0, r4
 800197e:	f7ff fa55 	bl	8000e2c <I2C_Flush_TXDR>
 8001982:	e014      	b.n	80019ae <I2C_Master_ISR_DMA+0xc6>
        hi2c->XferSize = hi2c->XferCount;
 8001984:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001986:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_AUTOEND_MODE;
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	049b      	lsls	r3, r3, #18
 800198c:	e7d4      	b.n	8001938 <I2C_Master_ISR_DMA+0x50>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800198e:	6822      	ldr	r2, [r4, #0]
 8001990:	6811      	ldr	r1, [r2, #0]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	430b      	orrs	r3, r1
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e008      	b.n	80019ae <I2C_Master_ISR_DMA+0xc6>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	0020      	movs	r0, r4
 80019a0:	f7ff fc46 	bl	8001230 <I2C_ITError>
 80019a4:	e003      	b.n	80019ae <I2C_Master_ISR_DMA+0xc6>
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80019a6:	068b      	lsls	r3, r1, #26
 80019a8:	d501      	bpl.n	80019ae <I2C_Master_ISR_DMA+0xc6>
 80019aa:	0693      	lsls	r3, r2, #26
 80019ac:	d405      	bmi.n	80019ba <I2C_Master_ISR_DMA+0xd2>
  __HAL_UNLOCK(hi2c);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2340      	movs	r3, #64	; 0x40
 80019b2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80019b4:	2000      	movs	r0, #0
}
 80019b6:	b002      	add	sp, #8
 80019b8:	bd10      	pop	{r4, pc}
    I2C_ITMasterCplt(hi2c, ITFlags);
 80019ba:	0020      	movs	r0, r4
 80019bc:	f7ff fe74 	bl	80016a8 <I2C_ITMasterCplt>
 80019c0:	e7f5      	b.n	80019ae <I2C_Master_ISR_DMA+0xc6>

080019c2 <HAL_I2C_ER_IRQHandler>:
{
 80019c2:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019c4:	6802      	ldr	r2, [r0, #0]
 80019c6:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019c8:	6811      	ldr	r1, [r2, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80019ca:	05dc      	lsls	r4, r3, #23
 80019cc:	d50d      	bpl.n	80019ea <HAL_I2C_ER_IRQHandler+0x28>
 80019ce:	060c      	lsls	r4, r1, #24
 80019d0:	d52a      	bpl.n	8001a28 <HAL_I2C_ER_IRQHandler+0x66>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80019d2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80019d4:	2401      	movs	r4, #1
 80019d6:	4321      	orrs	r1, r4
 80019d8:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0049      	lsls	r1, r1, #1
 80019de:	61d1      	str	r1, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80019e0:	055a      	lsls	r2, r3, #21
 80019e2:	d406      	bmi.n	80019f2 <HAL_I2C_ER_IRQHandler+0x30>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80019e4:	059b      	lsls	r3, r3, #22
 80019e6:	d40e      	bmi.n	8001a06 <HAL_I2C_ER_IRQHandler+0x44>
 80019e8:	e015      	b.n	8001a16 <HAL_I2C_ER_IRQHandler+0x54>
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80019ea:	055a      	lsls	r2, r3, #21
 80019ec:	d51e      	bpl.n	8001a2c <HAL_I2C_ER_IRQHandler+0x6a>
 80019ee:	060a      	lsls	r2, r1, #24
 80019f0:	d511      	bpl.n	8001a16 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80019f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019f4:	2108      	movs	r1, #8
 80019f6:	430a      	orrs	r2, r1
 80019f8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019fa:	6802      	ldr	r2, [r0, #0]
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	00c9      	lsls	r1, r1, #3
 8001a00:	61d1      	str	r1, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001a02:	059b      	lsls	r3, r3, #22
 8001a04:	d507      	bpl.n	8001a16 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a06:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	32ff      	adds	r2, #255	; 0xff
 8001a12:	32ff      	adds	r2, #255	; 0xff
 8001a14:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a16:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a18:	220b      	movs	r2, #11
 8001a1a:	421a      	tst	r2, r3
 8001a1c:	d100      	bne.n	8001a20 <HAL_I2C_ER_IRQHandler+0x5e>
}
 8001a1e:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a22:	f7ff fc05 	bl	8001230 <I2C_ITError>
}
 8001a26:	e7fa      	b.n	8001a1e <HAL_I2C_ER_IRQHandler+0x5c>
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001a28:	055a      	lsls	r2, r3, #21
 8001a2a:	d4f4      	bmi.n	8001a16 <HAL_I2C_ER_IRQHandler+0x54>
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001a2c:	059b      	lsls	r3, r3, #22
 8001a2e:	d5f2      	bpl.n	8001a16 <HAL_I2C_ER_IRQHandler+0x54>
 8001a30:	060b      	lsls	r3, r1, #24
 8001a32:	d5f0      	bpl.n	8001a16 <HAL_I2C_ER_IRQHandler+0x54>
 8001a34:	e7e7      	b.n	8001a06 <HAL_I2C_ER_IRQHandler+0x44>

08001a36 <I2C_DMAAbort>:
{
 8001a36:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a38:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001a3a:	6802      	ldr	r2, [r0, #0]
 8001a3c:	6851      	ldr	r1, [r2, #4]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	430b      	orrs	r3, r1
 8001a44:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001a46:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001a4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001a4e:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a50:	3341      	adds	r3, #65	; 0x41
 8001a52:	5cc3      	ldrb	r3, [r0, r3]
 8001a54:	2b60      	cmp	r3, #96	; 0x60
 8001a56:	d002      	beq.n	8001a5e <I2C_DMAAbort+0x28>
    HAL_I2C_ErrorCallback(hi2c);
 8001a58:	f003 f82e 	bl	8004ab8 <HAL_I2C_ErrorCallback>
}
 8001a5c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	2220      	movs	r2, #32
 8001a60:	3b1f      	subs	r3, #31
 8001a62:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a64:	f7ff fbe2 	bl	800122c <HAL_I2C_AbortCpltCallback>
 8001a68:	e7f8      	b.n	8001a5c <I2C_DMAAbort+0x26>

08001a6a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001a6a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	2341      	movs	r3, #65	; 0x41
 8001a74:	5cc2      	ldrb	r2, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a76:	3b3f      	subs	r3, #63	; 0x3f
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a78:	2a20      	cmp	r2, #32
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2CEx_ConfigAnalogFilter+0x10>
  }
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001a80:	333e      	adds	r3, #62	; 0x3e
 8001a82:	5cc2      	ldrb	r2, [r0, r3]
 8001a84:	3b3e      	subs	r3, #62	; 0x3e
 8001a86:	2a01      	cmp	r2, #1
 8001a88:	d0f8      	beq.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0xc>
 8001a8a:	2440      	movs	r4, #64	; 0x40
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	5502      	strb	r2, [r0, r4]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	2541      	movs	r5, #65	; 0x41
 8001a92:	3322      	adds	r3, #34	; 0x22
 8001a94:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8001a96:	6806      	ldr	r6, [r0, #0]
 8001a98:	6833      	ldr	r3, [r6, #0]
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	6033      	str	r3, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a9e:	6806      	ldr	r6, [r0, #0]
 8001aa0:	6833      	ldr	r3, [r6, #0]
 8001aa2:	4f08      	ldr	r7, [pc, #32]	; (8001ac4 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8001aa4:	403b      	ands	r3, r7
 8001aa6:	6033      	str	r3, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aa8:	6806      	ldr	r6, [r0, #0]
 8001aaa:	6833      	ldr	r3, [r6, #0]
 8001aac:	4319      	orrs	r1, r3
 8001aae:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001ab0:	6801      	ldr	r1, [r0, #0]
 8001ab2:	680b      	ldr	r3, [r1, #0]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	5543      	strb	r3, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8001abc:	2300      	movs	r3, #0
 8001abe:	5503      	strb	r3, [r0, r4]
    return HAL_OK;
 8001ac0:	e7dc      	b.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0xc>
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	ffffefff 	.word	0xffffefff

08001ac8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aca:	2341      	movs	r3, #65	; 0x41
 8001acc:	5cc2      	ldrb	r2, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001ace:	3b3f      	subs	r3, #63	; 0x3f
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad0:	2a20      	cmp	r2, #32
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2CEx_ConfigDigitalFilter+0x10>
  }
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001ad8:	333e      	adds	r3, #62	; 0x3e
 8001ada:	5cc2      	ldrb	r2, [r0, r3]
 8001adc:	3b3e      	subs	r3, #62	; 0x3e
 8001ade:	2a01      	cmp	r2, #1
 8001ae0:	d0f8      	beq.n	8001ad4 <HAL_I2CEx_ConfigDigitalFilter+0xc>
 8001ae2:	2440      	movs	r4, #64	; 0x40
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	5502      	strb	r2, [r0, r4]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	2541      	movs	r5, #65	; 0x41
 8001aea:	3322      	adds	r3, #34	; 0x22
 8001aec:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8001aee:	6806      	ldr	r6, [r0, #0]
 8001af0:	6833      	ldr	r3, [r6, #0]
 8001af2:	4393      	bics	r3, r2
 8001af4:	6033      	str	r3, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8001af6:	6806      	ldr	r6, [r0, #0]
 8001af8:	6833      	ldr	r3, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001afa:	4f07      	ldr	r7, [pc, #28]	; (8001b18 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001afc:	403b      	ands	r3, r7
    tmpreg |= DigitalFilter << 8U;
 8001afe:	0209      	lsls	r1, r1, #8
 8001b00:	4319      	orrs	r1, r3
    hi2c->Instance->CR1 = tmpreg;
 8001b02:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001b04:	6801      	ldr	r1, [r0, #0]
 8001b06:	680b      	ldr	r3, [r1, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	5543      	strb	r3, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8001b10:	2300      	movs	r3, #0
 8001b12:	5503      	strb	r3, [r0, r4]
    return HAL_OK;
 8001b14:	e7de      	b.n	8001ad4 <HAL_I2CEx_ConfigDigitalFilter+0xc>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	fffff0ff 	.word	0xfffff0ff

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	46ce      	mov	lr, r9
 8001b20:	4647      	mov	r7, r8
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b083      	sub	sp, #12
 8001b26:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b28:	6803      	ldr	r3, [r0, #0]
 8001b2a:	07db      	lsls	r3, r3, #31
 8001b2c:	d539      	bpl.n	8001ba2 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b2e:	4bb8      	ldr	r3, [pc, #736]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	230c      	movs	r3, #12
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d02a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3a:	4bb5      	ldr	r3, [pc, #724]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	230c      	movs	r3, #12
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d020      	beq.n	8001b88 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d050      	beq.n	8001bee <HAL_RCC_OscConfig+0xd2>
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d155      	bne.n	8001bfc <HAL_RCC_OscConfig+0xe0>
 8001b50:	4baf      	ldr	r3, [pc, #700]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	49af      	ldr	r1, [pc, #700]	; (8001e14 <HAL_RCC_OscConfig+0x2f8>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	49ae      	ldr	r1, [pc, #696]	; (8001e18 <HAL_RCC_OscConfig+0x2fc>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b62:	6863      	ldr	r3, [r4, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d061      	beq.n	8001c2c <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe fb84 	bl	8000274 <HAL_GetTick>
 8001b6c:	0007      	movs	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4ea8      	ldr	r6, [pc, #672]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001b70:	2580      	movs	r5, #128	; 0x80
 8001b72:	02ad      	lsls	r5, r5, #10
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	422b      	tst	r3, r5
 8001b78:	d113      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x86>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7a:	f7fe fb7b 	bl	8000274 <HAL_GetTick>
 8001b7e:	1bc0      	subs	r0, r0, r7
 8001b80:	2864      	cmp	r0, #100	; 0x64
 8001b82:	d9f7      	bls.n	8001b74 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
 8001b86:	e08e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4ba1      	ldr	r3, [pc, #644]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	03db      	lsls	r3, r3, #15
 8001b8e:	d5da      	bpl.n	8001b46 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	4b9f      	ldr	r3, [pc, #636]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	039b      	lsls	r3, r3, #14
 8001b96:	d504      	bpl.n	8001ba2 <HAL_RCC_OscConfig+0x86>
        return HAL_ERROR;
 8001b98:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	6863      	ldr	r3, [r4, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d100      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x86>
 8001ba0:	e081      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	079b      	lsls	r3, r3, #30
 8001ba6:	d565      	bpl.n	8001c74 <HAL_RCC_OscConfig+0x158>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ba8:	4b99      	ldr	r3, [pc, #612]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	220c      	movs	r2, #12
 8001bae:	421a      	tst	r2, r3
 8001bb0:	d050      	beq.n	8001c54 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bb2:	4b97      	ldr	r3, [pc, #604]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d046      	beq.n	8001c4c <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bbe:	68e3      	ldr	r3, [r4, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xaa>
 8001bc4:	e07d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc6:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fb50 	bl	8000274 <HAL_GetTick>
 8001bd4:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	4e8e      	ldr	r6, [pc, #568]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001bd8:	2502      	movs	r5, #2
 8001bda:	6833      	ldr	r3, [r6, #0]
 8001bdc:	421d      	tst	r5, r3
 8001bde:	d167      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be0:	f7fe fb48 	bl	8000274 <HAL_GetTick>
 8001be4:	1bc0      	subs	r0, r0, r7
 8001be6:	2802      	cmp	r0, #2
 8001be8:	d9f7      	bls.n	8001bda <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8001bea:	2003      	movs	r0, #3
 8001bec:	e05b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	4a88      	ldr	r2, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e7b2      	b.n	8001b62 <HAL_RCC_OscConfig+0x46>
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d009      	beq.n	8001c14 <HAL_RCC_OscConfig+0xf8>
 8001c00:	4b83      	ldr	r3, [pc, #524]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4983      	ldr	r1, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x2f8>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4982      	ldr	r1, [pc, #520]	; (8001e18 <HAL_RCC_OscConfig+0x2fc>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e7a6      	b.n	8001b62 <HAL_RCC_OscConfig+0x46>
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	02d2      	lsls	r2, r2, #11
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	0252      	lsls	r2, r2, #9
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e79a      	b.n	8001b62 <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8001c2c:	f7fe fb22 	bl	8000274 <HAL_GetTick>
 8001c30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4e77      	ldr	r6, [pc, #476]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c34:	2580      	movs	r5, #128	; 0x80
 8001c36:	02ad      	lsls	r5, r5, #10
 8001c38:	6833      	ldr	r3, [r6, #0]
 8001c3a:	422b      	tst	r3, r5
 8001c3c:	d0b1      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x86>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3e:	f7fe fb19 	bl	8000274 <HAL_GetTick>
 8001c42:	1bc0      	subs	r0, r0, r7
 8001c44:	2864      	cmp	r0, #100	; 0x64
 8001c46:	d9f7      	bls.n	8001c38 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8001c48:	2003      	movs	r0, #3
 8001c4a:	e02c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c4c:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	03db      	lsls	r3, r3, #15
 8001c52:	d4b4      	bmi.n	8001bbe <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c54:	4b6e      	ldr	r3, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	079b      	lsls	r3, r3, #30
 8001c5a:	d503      	bpl.n	8001c64 <HAL_RCC_OscConfig+0x148>
        return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	68e3      	ldr	r3, [r4, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d120      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	496a      	ldr	r1, [pc, #424]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c66:	680a      	ldr	r2, [r1, #0]
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	20f8      	movs	r0, #248	; 0xf8
 8001c6e:	4382      	bics	r2, r0
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	071b      	lsls	r3, r3, #28
 8001c78:	d54b      	bpl.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	69e3      	ldr	r3, [r4, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d034      	beq.n	8001cea <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	4a63      	ldr	r2, [pc, #396]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c82:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c84:	2101      	movs	r1, #1
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7fe faf3 	bl	8000274 <HAL_GetTick>
 8001c8e:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c90:	4e5f      	ldr	r6, [pc, #380]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001c92:	2502      	movs	r5, #2
 8001c94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001c96:	421d      	tst	r5, r3
 8001c98:	d13b      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7fe faeb 	bl	8000274 <HAL_GetTick>
 8001c9e:	1bc0      	subs	r0, r0, r7
 8001ca0:	2802      	cmp	r0, #2
 8001ca2:	d9f7      	bls.n	8001c94 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001ca4:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001ca6:	b003      	add	sp, #12
 8001ca8:	bc0c      	pop	{r2, r3}
 8001caa:	4690      	mov	r8, r2
 8001cac:	4699      	mov	r9, r3
 8001cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4957      	ldr	r1, [pc, #348]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001cb2:	680a      	ldr	r2, [r1, #0]
 8001cb4:	6923      	ldr	r3, [r4, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	20f8      	movs	r0, #248	; 0xf8
 8001cba:	4382      	bics	r2, r0
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e7d8      	b.n	8001c74 <HAL_RCC_OscConfig+0x158>
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4a53      	ldr	r2, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	438b      	bics	r3, r1
 8001cca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fad2 	bl	8000274 <HAL_GetTick>
 8001cd0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4e4f      	ldr	r6, [pc, #316]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001cd4:	2502      	movs	r5, #2
 8001cd6:	6833      	ldr	r3, [r6, #0]
 8001cd8:	421d      	tst	r5, r3
 8001cda:	d0cb      	beq.n	8001c74 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7fe faca 	bl	8000274 <HAL_GetTick>
 8001ce0:	1bc0      	subs	r0, r0, r7
 8001ce2:	2802      	cmp	r0, #2
 8001ce4:	d9f7      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	e7dd      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001cec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438b      	bics	r3, r1
 8001cf2:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fabe 	bl	8000274 <HAL_GetTick>
 8001cf8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfa:	4e45      	ldr	r6, [pc, #276]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001cfc:	2502      	movs	r5, #2
 8001cfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d00:	421d      	tst	r5, r3
 8001d02:	d006      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d04:	f7fe fab6 	bl	8000274 <HAL_GetTick>
 8001d08:	1bc0      	subs	r0, r0, r7
 8001d0a:	2802      	cmp	r0, #2
 8001d0c:	d9f7      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1e2>
          return HAL_TIMEOUT;
 8001d0e:	2003      	movs	r0, #3
 8001d10:	e7c9      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	075b      	lsls	r3, r3, #29
 8001d16:	d400      	bmi.n	8001d1a <HAL_RCC_OscConfig+0x1fe>
 8001d18:	e087      	b.n	8001e2a <HAL_RCC_OscConfig+0x30e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	d40b      	bmi.n	8001d3e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001d28:	69d1      	ldr	r1, [r2, #28]
 8001d2a:	2080      	movs	r0, #128	; 0x80
 8001d2c:	0540      	lsls	r0, r0, #21
 8001d2e:	4301      	orrs	r1, r0
 8001d30:	61d1      	str	r1, [r2, #28]
 8001d32:	69d3      	ldr	r3, [r2, #28]
 8001d34:	4003      	ands	r3, r0
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_OscConfig+0x300>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	d521      	bpl.n	8001d8a <HAL_RCC_OscConfig+0x26e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d46:	68a3      	ldr	r3, [r4, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d034      	beq.n	8001db6 <HAL_RCC_OscConfig+0x29a>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d138      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2a6>
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	2101      	movs	r1, #1
 8001d56:	438a      	bics	r2, r1
 8001d58:	621a      	str	r2, [r3, #32]
 8001d5a:	6a1a      	ldr	r2, [r3, #32]
 8001d5c:	3103      	adds	r1, #3
 8001d5e:	438a      	bics	r2, r1
 8001d60:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d62:	68a3      	ldr	r3, [r4, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d042      	beq.n	8001dee <HAL_RCC_OscConfig+0x2d2>
      tickstart = HAL_GetTick();
 8001d68:	f7fe fa84 	bl	8000274 <HAL_GetTick>
 8001d6c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	4f28      	ldr	r7, [pc, #160]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001d70:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	4d2b      	ldr	r5, [pc, #172]	; (8001e20 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	421e      	tst	r6, r3
 8001d78:	d154      	bne.n	8001e24 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7fe fa7b 	bl	8000274 <HAL_GetTick>
 8001d7e:	464b      	mov	r3, r9
 8001d80:	1ac0      	subs	r0, r0, r3
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d9f6      	bls.n	8001d74 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001d86:	2003      	movs	r0, #3
 8001d88:	e78d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <HAL_RCC_OscConfig+0x300>)
 8001d8c:	6811      	ldr	r1, [r2, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	430b      	orrs	r3, r1
 8001d94:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d96:	f7fe fa6d 	bl	8000274 <HAL_GetTick>
 8001d9a:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4f1f      	ldr	r7, [pc, #124]	; (8001e1c <HAL_RCC_OscConfig+0x300>)
 8001d9e:	2680      	movs	r6, #128	; 0x80
 8001da0:	0076      	lsls	r6, r6, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4233      	tst	r3, r6
 8001da6:	d1ce      	bne.n	8001d46 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7fe fa64 	bl	8000274 <HAL_GetTick>
 8001dac:	1b40      	subs	r0, r0, r5
 8001dae:	2864      	cmp	r0, #100	; 0x64
 8001db0:	d9f7      	bls.n	8001da2 <HAL_RCC_OscConfig+0x286>
          return HAL_TIMEOUT;
 8001db2:	2003      	movs	r0, #3
 8001db4:	e777      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001db8:	6a13      	ldr	r3, [r2, #32]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e7cf      	b.n	8001d62 <HAL_RCC_OscConfig+0x246>
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_OscConfig+0x2be>
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	621a      	str	r2, [r3, #32]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	3103      	adds	r1, #3
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
 8001dd8:	e7c3      	b.n	8001d62 <HAL_RCC_OscConfig+0x246>
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	2104      	movs	r1, #4
 8001de0:	430a      	orrs	r2, r1
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	3903      	subs	r1, #3
 8001de8:	430a      	orrs	r2, r1
 8001dea:	621a      	str	r2, [r3, #32]
 8001dec:	e7b9      	b.n	8001d62 <HAL_RCC_OscConfig+0x246>
      tickstart = HAL_GetTick();
 8001dee:	f7fe fa41 	bl	8000274 <HAL_GetTick>
 8001df2:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	4f06      	ldr	r7, [pc, #24]	; (8001e10 <HAL_RCC_OscConfig+0x2f4>)
 8001df6:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	4d09      	ldr	r5, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	421e      	tst	r6, r3
 8001dfe:	d011      	beq.n	8001e24 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fa38 	bl	8000274 <HAL_GetTick>
 8001e04:	464b      	mov	r3, r9
 8001e06:	1ac0      	subs	r0, r0, r3
 8001e08:	42a8      	cmp	r0, r5
 8001e0a:	d9f6      	bls.n	8001dfa <HAL_RCC_OscConfig+0x2de>
          return HAL_TIMEOUT;
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	e74a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
 8001e10:	40021000 	.word	0x40021000
 8001e14:	fffeffff 	.word	0xfffeffff
 8001e18:	fffbffff 	.word	0xfffbffff
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	00001388 	.word	0x00001388
    if(pwrclkchanged == SET)
 8001e24:	4643      	mov	r3, r8
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d01f      	beq.n	8001e6a <HAL_RCC_OscConfig+0x34e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	06db      	lsls	r3, r3, #27
 8001e2e:	d54f      	bpl.n	8001ed0 <HAL_RCC_OscConfig+0x3b4>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e30:	6963      	ldr	r3, [r4, #20]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d01f      	beq.n	8001e76 <HAL_RCC_OscConfig+0x35a>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e36:	3305      	adds	r3, #5
 8001e38:	d03e      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x39c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e3a:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3e:	2104      	movs	r1, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e46:	3903      	subs	r1, #3
 8001e48:	438a      	bics	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001e4c:	f7fe fa12 	bl	8000274 <HAL_GetTick>
 8001e50:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e52:	4e50      	ldr	r6, [pc, #320]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001e54:	2502      	movs	r5, #2
 8001e56:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001e58:	421d      	tst	r5, r3
 8001e5a:	d039      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e5c:	f7fe fa0a 	bl	8000274 <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f7      	bls.n	8001e56 <HAL_RCC_OscConfig+0x33a>
          return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
 8001e68:	e71d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001e6c:	69d3      	ldr	r3, [r2, #28]
 8001e6e:	494a      	ldr	r1, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x47c>)
 8001e70:	400b      	ands	r3, r1
 8001e72:	61d3      	str	r3, [r2, #28]
 8001e74:	e7d9      	b.n	8001e2a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e82:	3903      	subs	r1, #3
 8001e84:	430a      	orrs	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001e88:	f7fe f9f4 	bl	8000274 <HAL_GetTick>
 8001e8c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e8e:	4e41      	ldr	r6, [pc, #260]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001e90:	2502      	movs	r5, #2
 8001e92:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001e94:	421d      	tst	r5, r3
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e98:	f7fe f9ec 	bl	8000274 <HAL_GetTick>
 8001e9c:	1bc0      	subs	r0, r0, r7
 8001e9e:	2802      	cmp	r0, #2
 8001ea0:	d9f7      	bls.n	8001e92 <HAL_RCC_OscConfig+0x376>
          return HAL_TIMEOUT;
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	e6ff      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ea6:	493b      	ldr	r1, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001ea8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001eaa:	69a3      	ldr	r3, [r4, #24]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	20f8      	movs	r0, #248	; 0xf8
 8001eb0:	4382      	bics	r2, r0
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	634b      	str	r3, [r1, #52]	; 0x34
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3b4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001eba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	438b      	bics	r3, r1
 8001ec0:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ec2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001ec4:	69a3      	ldr	r3, [r4, #24]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	20f8      	movs	r0, #248	; 0xf8
 8001eca:	4381      	bics	r1, r0
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	6353      	str	r3, [r2, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	6a23      	ldr	r3, [r4, #32]
  return HAL_OK;
 8001ed2:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d100      	bne.n	8001eda <HAL_RCC_OscConfig+0x3be>
 8001ed8:	e6e5      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eda:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001edc:	6851      	ldr	r1, [r2, #4]
 8001ede:	220c      	movs	r2, #12
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	2a08      	cmp	r2, #8
 8001ee4:	d053      	beq.n	8001f8e <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d014      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001eec:	6813      	ldr	r3, [r2, #0]
 8001eee:	492b      	ldr	r1, [pc, #172]	; (8001f9c <HAL_RCC_OscConfig+0x480>)
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ef4:	f7fe f9be 	bl	8000274 <HAL_GetTick>
 8001ef8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	4d26      	ldr	r5, [pc, #152]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001efc:	2480      	movs	r4, #128	; 0x80
 8001efe:	04a4      	lsls	r4, r4, #18
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	4223      	tst	r3, r4
 8001f04:	d041      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe f9b5 	bl	8000274 <HAL_GetTick>
 8001f0a:	1b80      	subs	r0, r0, r6
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d9f7      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 8001f10:	2003      	movs	r0, #3
 8001f12:	e6c8      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	4920      	ldr	r1, [pc, #128]	; (8001f9c <HAL_RCC_OscConfig+0x480>)
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f1e:	f7fe f9a9 	bl	8000274 <HAL_GetTick>
 8001f22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	4e1b      	ldr	r6, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f26:	2580      	movs	r5, #128	; 0x80
 8001f28:	04ad      	lsls	r5, r5, #18
 8001f2a:	6833      	ldr	r3, [r6, #0]
 8001f2c:	422b      	tst	r3, r5
 8001f2e:	d006      	beq.n	8001f3e <HAL_RCC_OscConfig+0x422>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe f9a0 	bl	8000274 <HAL_GetTick>
 8001f34:	1bc0      	subs	r0, r0, r7
 8001f36:	2802      	cmp	r0, #2
 8001f38:	d9f7      	bls.n	8001f2a <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	e6b3      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f42:	210f      	movs	r1, #15
 8001f44:	438a      	bics	r2, r1
 8001f46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f52:	4302      	orrs	r2, r0
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <HAL_RCC_OscConfig+0x484>)
 8001f56:	4001      	ands	r1, r0
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	0452      	lsls	r2, r2, #17
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f66:	f7fe f985 	bl	8000274 <HAL_GetTick>
 8001f6a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	4d09      	ldr	r5, [pc, #36]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f6e:	2480      	movs	r4, #128	; 0x80
 8001f70:	04a4      	lsls	r4, r4, #18
 8001f72:	682b      	ldr	r3, [r5, #0]
 8001f74:	4223      	tst	r3, r4
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x46a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe f97c 	bl	8000274 <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9f7      	bls.n	8001f72 <HAL_RCC_OscConfig+0x456>
            return HAL_TIMEOUT;
 8001f82:	2003      	movs	r0, #3
 8001f84:	e68f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
 8001f88:	e68d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	e68b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
      return HAL_ERROR;
 8001f8e:	2001      	movs	r0, #1
 8001f90:	e689      	b.n	8001ca6 <HAL_RCC_OscConfig+0x18a>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40021000 	.word	0x40021000
 8001f98:	efffffff 	.word	0xefffffff
 8001f9c:	feffffff 	.word	0xfeffffff
 8001fa0:	ffc2ffff 	.word	0xffc2ffff

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b530      	push	{r4, r5, lr}
 8001fa6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fa8:	aa04      	add	r2, sp, #16
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001fac:	0018      	movs	r0, r3
 8001fae:	c832      	ldmia	r0!, {r1, r4, r5}
 8001fb0:	c232      	stmia	r2!, {r1, r4, r5}
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	6802      	ldr	r2, [r0, #0]
 8001fb6:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fb8:	466a      	mov	r2, sp
 8001fba:	3310      	adds	r3, #16
 8001fbc:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001fbe:	c213      	stmia	r2!, {r0, r1, r4}
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_RCC_GetSysClockFreq+0x60>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	230c      	movs	r3, #12
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d113      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fd0:	0c91      	lsrs	r1, r2, #18
 8001fd2:	3307      	adds	r3, #7
 8001fd4:	4019      	ands	r1, r3
 8001fd6:	a804      	add	r0, sp, #16
 8001fd8:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fda:	490a      	ldr	r1, [pc, #40]	; (8002004 <HAL_RCC_GetSysClockFreq+0x60>)
 8001fdc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001fde:	400b      	ands	r3, r1
 8001fe0:	4669      	mov	r1, sp
 8001fe2:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001fe4:	03d3      	lsls	r3, r2, #15
 8001fe6:	d402      	bmi.n	8001fee <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <HAL_RCC_GetSysClockFreq+0x64>)
 8001fea:	4360      	muls	r0, r4
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001fee:	4807      	ldr	r0, [pc, #28]	; (800200c <HAL_RCC_GetSysClockFreq+0x68>)
 8001ff0:	f7fe f88a 	bl	8000108 <__udivsi3>
 8001ff4:	4360      	muls	r0, r4
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ffa:	b009      	add	sp, #36	; 0x24
 8001ffc:	bd30      	pop	{r4, r5, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	080054a8 	.word	0x080054a8
 8002004:	40021000 	.word	0x40021000
 8002008:	003d0900 	.word	0x003d0900
 800200c:	007a1200 	.word	0x007a1200

08002010 <HAL_RCC_ClockConfig>:
{
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	46ce      	mov	lr, r9
 8002014:	4647      	mov	r7, r8
 8002016:	b580      	push	{r7, lr}
 8002018:	0005      	movs	r5, r0
 800201a:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_RCC_ClockConfig+0x154>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	4013      	ands	r3, r2
 8002024:	428b      	cmp	r3, r1
 8002026:	d20b      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	494e      	ldr	r1, [pc, #312]	; (8002164 <HAL_RCC_ClockConfig+0x154>)
 800202a:	680b      	ldr	r3, [r1, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	4393      	bics	r3, r2
 8002030:	4323      	orrs	r3, r4
 8002032:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002034:	680b      	ldr	r3, [r1, #0]
 8002036:	401a      	ands	r2, r3
      return HAL_ERROR;
 8002038:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203a:	4294      	cmp	r4, r2
 800203c:	d000      	beq.n	8002040 <HAL_RCC_ClockConfig+0x30>
 800203e:	e08c      	b.n	800215a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	079b      	lsls	r3, r3, #30
 8002044:	d506      	bpl.n	8002054 <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002046:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 8002048:	6853      	ldr	r3, [r2, #4]
 800204a:	21f0      	movs	r1, #240	; 0xf0
 800204c:	438b      	bics	r3, r1
 800204e:	68a9      	ldr	r1, [r5, #8]
 8002050:	430b      	orrs	r3, r1
 8002052:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	07db      	lsls	r3, r3, #31
 8002058:	d555      	bpl.n	8002106 <HAL_RCC_ClockConfig+0xf6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	686a      	ldr	r2, [r5, #4]
 800205c:	2a01      	cmp	r2, #1
 800205e:	d024      	beq.n	80020aa <HAL_RCC_ClockConfig+0x9a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002060:	2a02      	cmp	r2, #2
 8002062:	d028      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b40      	ldr	r3, [pc, #256]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 8002066:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8002068:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	079b      	lsls	r3, r3, #30
 800206c:	d575      	bpl.n	800215a <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	493e      	ldr	r1, [pc, #248]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 8002070:	684b      	ldr	r3, [r1, #4]
 8002072:	2003      	movs	r0, #3
 8002074:	4383      	bics	r3, r0
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800207a:	f7fe f8fb 	bl	8000274 <HAL_GetTick>
 800207e:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002080:	686b      	ldr	r3, [r5, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d01d      	beq.n	80020c2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	2b02      	cmp	r3, #2
 8002088:	d02c      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xd4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 800208c:	4698      	mov	r8, r3
 800208e:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 8002092:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002094:	4643      	mov	r3, r8
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	421f      	tst	r7, r3
 800209a:	d034      	beq.n	8002106 <HAL_RCC_ClockConfig+0xf6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209c:	f7fe f8ea 	bl	8000274 <HAL_GetTick>
 80020a0:	1b80      	subs	r0, r0, r6
 80020a2:	4548      	cmp	r0, r9
 80020a4:	d9f6      	bls.n	8002094 <HAL_RCC_ClockConfig+0x84>
          return HAL_TIMEOUT;
 80020a6:	2003      	movs	r0, #3
 80020a8:	e057      	b.n	800215a <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 80020ac:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b0:	039b      	lsls	r3, r3, #14
 80020b2:	d4dc      	bmi.n	800206e <HAL_RCC_ClockConfig+0x5e>
 80020b4:	e051      	b.n	800215a <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 80020b8:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	d4d6      	bmi.n	800206e <HAL_RCC_ClockConfig+0x5e>
 80020c0:	e04b      	b.n	800215a <HAL_RCC_ClockConfig+0x14a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 80020c4:	4698      	mov	r8, r3
 80020c6:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 80020ca:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020cc:	4643      	mov	r3, r8
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	403b      	ands	r3, r7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d017      	beq.n	8002106 <HAL_RCC_ClockConfig+0xf6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe f8cd 	bl	8000274 <HAL_GetTick>
 80020da:	1b80      	subs	r0, r0, r6
 80020dc:	4548      	cmp	r0, r9
 80020de:	d9f5      	bls.n	80020cc <HAL_RCC_ClockConfig+0xbc>
          return HAL_TIMEOUT;
 80020e0:	2003      	movs	r0, #3
 80020e2:	e03a      	b.n	800215a <HAL_RCC_ClockConfig+0x14a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 80020e6:	4698      	mov	r8, r3
 80020e8:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 80020ec:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ee:	4643      	mov	r3, r8
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	403b      	ands	r3, r7
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d006      	beq.n	8002106 <HAL_RCC_ClockConfig+0xf6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe f8bc 	bl	8000274 <HAL_GetTick>
 80020fc:	1b80      	subs	r0, r0, r6
 80020fe:	4548      	cmp	r0, r9
 8002100:	d9f5      	bls.n	80020ee <HAL_RCC_ClockConfig+0xde>
          return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	e029      	b.n	800215a <HAL_RCC_ClockConfig+0x14a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_RCC_ClockConfig+0x154>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2301      	movs	r3, #1
 800210c:	4013      	ands	r3, r2
 800210e:	429c      	cmp	r4, r3
 8002110:	d20a      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x118>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4914      	ldr	r1, [pc, #80]	; (8002164 <HAL_RCC_ClockConfig+0x154>)
 8002114:	680b      	ldr	r3, [r1, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4393      	bics	r3, r2
 800211a:	4323      	orrs	r3, r4
 800211c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800211e:	680b      	ldr	r3, [r1, #0]
 8002120:	401a      	ands	r2, r3
      return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002124:	4294      	cmp	r4, r2
 8002126:	d118      	bne.n	800215a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	075b      	lsls	r3, r3, #29
 800212c:	d506      	bpl.n	800213c <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 8002130:	6853      	ldr	r3, [r2, #4]
 8002132:	490f      	ldr	r1, [pc, #60]	; (8002170 <HAL_RCC_ClockConfig+0x160>)
 8002134:	400b      	ands	r3, r1
 8002136:	68e9      	ldr	r1, [r5, #12]
 8002138:	430b      	orrs	r3, r1
 800213a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800213c:	f7ff ff32 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	0f1b      	lsrs	r3, r3, #28
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x164>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	40d8      	lsrs	r0, r3
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x168>)
 8002150:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002152:	2000      	movs	r0, #0
 8002154:	f7fe f864 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8002158:	2000      	movs	r0, #0
}
 800215a:	bc0c      	pop	{r2, r3}
 800215c:	4690      	mov	r8, r2
 800215e:	4699      	mov	r9, r3
 8002160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	00001388 	.word	0x00001388
 8002170:	fffff8ff 	.word	0xfffff8ff
 8002174:	08005530 	.word	0x08005530
 8002178:	20000018 	.word	0x20000018

0800217c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800217c:	4b01      	ldr	r3, [pc, #4]	; (8002184 <HAL_RCC_GetHCLKFreq+0x8>)
 800217e:	6818      	ldr	r0, [r3, #0]
}
 8002180:	4770      	bx	lr
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	20000018 	.word	0x20000018

08002188 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_RCC_GetPCLK1Freq+0x14>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	055b      	lsls	r3, r3, #21
 800218e:	0f5b      	lsrs	r3, r3, #29
 8002190:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002196:	6810      	ldr	r0, [r2, #0]
 8002198:	40d8      	lsrs	r0, r3
}    
 800219a:	4770      	bx	lr
 800219c:	40021000 	.word	0x40021000
 80021a0:	08005540 	.word	0x08005540
 80021a4:	20000018 	.word	0x20000018

080021a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	46ce      	mov	lr, r9
 80021ac:	4647      	mov	r7, r8
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b083      	sub	sp, #12
 80021b2:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b4:	6803      	ldr	r3, [r0, #0]
 80021b6:	03db      	lsls	r3, r3, #15
 80021b8:	d536      	bpl.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80021bc:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	d40a      	bmi.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	4a3c      	ldr	r2, [pc, #240]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80021c6:	69d1      	ldr	r1, [r2, #28]
 80021c8:	2080      	movs	r0, #128	; 0x80
 80021ca:	0540      	lsls	r0, r0, #21
 80021cc:	4301      	orrs	r1, r0
 80021ce:	61d1      	str	r1, [r2, #28]
 80021d0:	69d3      	ldr	r3, [r2, #28]
 80021d2:	4003      	ands	r3, r0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021d8:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	d53c      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	22c0      	movs	r2, #192	; 0xc0
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ec:	d013      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80021ee:	6861      	ldr	r1, [r4, #4]
 80021f0:	400a      	ands	r2, r1
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00f      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80021f8:	6a18      	ldr	r0, [r3, #32]
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80021fc:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fe:	6a1e      	ldr	r6, [r3, #32]
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0249      	lsls	r1, r1, #9
 8002204:	4331      	orrs	r1, r6
 8002206:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002208:	6a19      	ldr	r1, [r3, #32]
 800220a:	4e2e      	ldr	r6, [pc, #184]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800220c:	4031      	ands	r1, r6
 800220e:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002210:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002212:	07c3      	lsls	r3, r0, #31
 8002214:	d439      	bmi.n	800228a <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002218:	6a13      	ldr	r3, [r2, #32]
 800221a:	4929      	ldr	r1, [pc, #164]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800221c:	400b      	ands	r3, r1
 800221e:	6861      	ldr	r1, [r4, #4]
 8002220:	430b      	orrs	r3, r1
 8002222:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002224:	2d01      	cmp	r5, #1
 8002226:	d042      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	07db      	lsls	r3, r3, #31
 800222c:	d506      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002230:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002232:	2103      	movs	r1, #3
 8002234:	438b      	bics	r3, r1
 8002236:	68a1      	ldr	r1, [r4, #8]
 8002238:	430b      	orrs	r3, r1
 800223a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800223c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	069b      	lsls	r3, r3, #26
 8002242:	d506      	bpl.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002246:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002248:	2110      	movs	r1, #16
 800224a:	438b      	bics	r3, r1
 800224c:	68e1      	ldr	r1, [r4, #12]
 800224e:	430b      	orrs	r3, r1
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002252:	b003      	add	sp, #12
 8002254:	bc0c      	pop	{r2, r3}
 8002256:	4690      	mov	r8, r2
 8002258:	4699      	mov	r9, r3
 800225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225c:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	430b      	orrs	r3, r1
 8002266:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002268:	f7fe f804 	bl	8000274 <HAL_GetTick>
 800226c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4f13      	ldr	r7, [pc, #76]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002270:	2680      	movs	r6, #128	; 0x80
 8002272:	0076      	lsls	r6, r6, #1
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4233      	tst	r3, r6
 8002278:	d1b3      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fd fffb 	bl	8000274 <HAL_GetTick>
 800227e:	4643      	mov	r3, r8
 8002280:	1ac0      	subs	r0, r0, r3
 8002282:	2864      	cmp	r0, #100	; 0x64
 8002284:	d9f6      	bls.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8002286:	2003      	movs	r0, #3
 8002288:	e7e3      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 800228a:	f7fd fff3 	bl	8000274 <HAL_GetTick>
 800228e:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	4f09      	ldr	r7, [pc, #36]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002292:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8002296:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	421e      	tst	r6, r3
 800229c:	d1bb      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fd ffe9 	bl	8000274 <HAL_GetTick>
 80022a2:	464b      	mov	r3, r9
 80022a4:	1ac0      	subs	r0, r0, r3
 80022a6:	4540      	cmp	r0, r8
 80022a8:	d9f6      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 80022aa:	2003      	movs	r0, #3
 80022ac:	e7d1      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	69d3      	ldr	r3, [r2, #28]
 80022b0:	4906      	ldr	r1, [pc, #24]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80022b2:	400b      	ands	r3, r1
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	e7b7      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	fffffcff 	.word	0xfffffcff
 80022c4:	fffeffff 	.word	0xfffeffff
 80022c8:	00001388 	.word	0x00001388
 80022cc:	efffffff 	.word	0xefffffff

080022d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d0:	6802      	ldr	r2, [r0, #0]
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	4906      	ldr	r1, [pc, #24]	; (80022f0 <UART_EndRxTransfer+0x20>)
 80022d6:	400b      	ands	r3, r1
 80022d8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022da:	6802      	ldr	r2, [r0, #0]
 80022dc:	6893      	ldr	r3, [r2, #8]
 80022de:	3123      	adds	r1, #35	; 0x23
 80022e0:	31ff      	adds	r1, #255	; 0xff
 80022e2:	438b      	bics	r3, r1
 80022e4:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022e6:	2220      	movs	r2, #32
 80022e8:	236a      	movs	r3, #106	; 0x6a
 80022ea:	54c2      	strb	r2, [r0, r3]
}
 80022ec:	4770      	bx	lr
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	fffffedf 	.word	0xfffffedf

080022f4 <HAL_UART_Receive_IT>:
{
 80022f4:	b530      	push	{r4, r5, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80022f6:	236a      	movs	r3, #106	; 0x6a
 80022f8:	5cc4      	ldrb	r4, [r0, r3]
    return HAL_BUSY;
 80022fa:	3b68      	subs	r3, #104	; 0x68
  if(huart->RxState == HAL_UART_STATE_READY)
 80022fc:	2c20      	cmp	r4, #32
 80022fe:	d001      	beq.n	8002304 <HAL_UART_Receive_IT+0x10>
}
 8002300:	0018      	movs	r0, r3
 8002302:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 8002304:	2900      	cmp	r1, #0
 8002306:	d048      	beq.n	800239a <HAL_UART_Receive_IT+0xa6>
      return HAL_ERROR;
 8002308:	3b01      	subs	r3, #1
    if((pData == NULL ) || (Size == 0U))
 800230a:	2a00      	cmp	r2, #0
 800230c:	d0f8      	beq.n	8002300 <HAL_UART_Receive_IT+0xc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230e:	6884      	ldr	r4, [r0, #8]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	429c      	cmp	r4, r3
 8002316:	d022      	beq.n	800235e <HAL_UART_Receive_IT+0x6a>
    __HAL_LOCK(huart);
 8002318:	2368      	movs	r3, #104	; 0x68
 800231a:	5cc5      	ldrb	r5, [r0, r3]
 800231c:	3b66      	subs	r3, #102	; 0x66
 800231e:	2d01      	cmp	r5, #1
 8002320:	d0ee      	beq.n	8002300 <HAL_UART_Receive_IT+0xc>
 8002322:	2501      	movs	r5, #1
 8002324:	2368      	movs	r3, #104	; 0x68
 8002326:	54c5      	strb	r5, [r0, r3]
    huart->pRxBuffPtr = pData;
 8002328:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800232a:	3b10      	subs	r3, #16
 800232c:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 800232e:	3302      	adds	r3, #2
 8002330:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8002332:	2c00      	cmp	r4, #0
 8002334:	d026      	beq.n	8002384 <HAL_UART_Receive_IT+0x90>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002336:	2300      	movs	r3, #0
 8002338:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800233a:	2122      	movs	r1, #34	; 0x22
 800233c:	226a      	movs	r2, #106	; 0x6a
 800233e:	5481      	strb	r1, [r0, r2]
    __HAL_UNLOCK(huart);
 8002340:	3a02      	subs	r2, #2
 8002342:	5483      	strb	r3, [r0, r2]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002344:	6802      	ldr	r2, [r0, #0]
 8002346:	6893      	ldr	r3, [r2, #8]
 8002348:	3921      	subs	r1, #33	; 0x21
 800234a:	430b      	orrs	r3, r1
 800234c:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800234e:	6802      	ldr	r2, [r0, #0]
 8002350:	6811      	ldr	r1, [r2, #0]
 8002352:	2390      	movs	r3, #144	; 0x90
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	430b      	orrs	r3, r1
 8002358:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e7d0      	b.n	8002300 <HAL_UART_Receive_IT+0xc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235e:	6903      	ldr	r3, [r0, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11e      	bne.n	80023a2 <HAL_UART_Receive_IT+0xae>
        return  HAL_ERROR;
 8002364:	3301      	adds	r3, #1
      if((((uint32_t)pData)&1U) != 0U)
 8002366:	07cc      	lsls	r4, r1, #31
 8002368:	d4ca      	bmi.n	8002300 <HAL_UART_Receive_IT+0xc>
    __HAL_LOCK(huart);
 800236a:	2368      	movs	r3, #104	; 0x68
 800236c:	5cc3      	ldrb	r3, [r0, r3]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d015      	beq.n	800239e <HAL_UART_Receive_IT+0xaa>
    huart->pRxBuffPtr = pData;
 8002372:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8002374:	2358      	movs	r3, #88	; 0x58
 8002376:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8002378:	3302      	adds	r3, #2
 800237a:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 800237c:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <HAL_UART_Receive_IT+0xcc>)
 800237e:	3302      	adds	r3, #2
 8002380:	52c2      	strh	r2, [r0, r3]
 8002382:	e7d8      	b.n	8002336 <HAL_UART_Receive_IT+0x42>
 8002384:	6903      	ldr	r3, [r0, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_UART_Receive_IT+0x9e>
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	335c      	adds	r3, #92	; 0x5c
 800238e:	52c2      	strh	r2, [r0, r3]
 8002390:	e7d1      	b.n	8002336 <HAL_UART_Receive_IT+0x42>
 8002392:	227f      	movs	r2, #127	; 0x7f
 8002394:	235c      	movs	r3, #92	; 0x5c
 8002396:	52c2      	strh	r2, [r0, r3]
 8002398:	e7cd      	b.n	8002336 <HAL_UART_Receive_IT+0x42>
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e7b0      	b.n	8002300 <HAL_UART_Receive_IT+0xc>
    __HAL_LOCK(huart);
 800239e:	2302      	movs	r3, #2
 80023a0:	e7ae      	b.n	8002300 <HAL_UART_Receive_IT+0xc>
 80023a2:	2368      	movs	r3, #104	; 0x68
 80023a4:	5cc4      	ldrb	r4, [r0, r3]
 80023a6:	3b66      	subs	r3, #102	; 0x66
 80023a8:	2c01      	cmp	r4, #1
 80023aa:	d0a9      	beq.n	8002300 <HAL_UART_Receive_IT+0xc>
    huart->pRxBuffPtr = pData;
 80023ac:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80023ae:	2358      	movs	r3, #88	; 0x58
 80023b0:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80023b2:	3302      	adds	r3, #2
 80023b4:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	3302      	adds	r3, #2
 80023ba:	52c2      	strh	r2, [r0, r3]
 80023bc:	e7bb      	b.n	8002336 <HAL_UART_Receive_IT+0x42>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	000001ff 	.word	0x000001ff

080023c4 <HAL_UART_Transmit_DMA>:
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	0004      	movs	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80023c8:	2069      	movs	r0, #105	; 0x69
 80023ca:	5c25      	ldrb	r5, [r4, r0]
    return HAL_BUSY;
 80023cc:	3867      	subs	r0, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 80023ce:	2d20      	cmp	r5, #32
 80023d0:	d000      	beq.n	80023d4 <HAL_UART_Transmit_DMA+0x10>
}
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL ) || (Size == 0U))
 80023d4:	2900      	cmp	r1, #0
 80023d6:	d03e      	beq.n	8002456 <HAL_UART_Transmit_DMA+0x92>
      return HAL_ERROR;
 80023d8:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d0f9      	beq.n	80023d2 <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	015b      	lsls	r3, r3, #5
 80023e2:	68a0      	ldr	r0, [r4, #8]
 80023e4:	4298      	cmp	r0, r3
 80023e6:	d02f      	beq.n	8002448 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 80023e8:	2368      	movs	r3, #104	; 0x68
 80023ea:	5ce3      	ldrb	r3, [r4, r3]
 80023ec:	2002      	movs	r0, #2
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d0ef      	beq.n	80023d2 <HAL_UART_Transmit_DMA+0xe>
 80023f2:	2668      	movs	r6, #104	; 0x68
 80023f4:	2301      	movs	r3, #1
 80023f6:	55a3      	strb	r3, [r4, r6]
    huart->pTxBuffPtr = pData;
 80023f8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80023fa:	334f      	adds	r3, #79	; 0x4f
 80023fc:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80023fe:	3302      	adds	r3, #2
 8002400:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002402:	2500      	movs	r5, #0
 8002404:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002406:	2121      	movs	r1, #33	; 0x21
 8002408:	3317      	adds	r3, #23
 800240a:	54e1      	strb	r1, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800240c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800240e:	4913      	ldr	r1, [pc, #76]	; (800245c <HAL_UART_Transmit_DMA+0x98>)
 8002410:	6299      	str	r1, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002412:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002414:	4912      	ldr	r1, [pc, #72]	; (8002460 <HAL_UART_Transmit_DMA+0x9c>)
 8002416:	62d9      	str	r1, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002418:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800241a:	4912      	ldr	r1, [pc, #72]	; (8002464 <HAL_UART_Transmit_DMA+0xa0>)
 800241c:	6319      	str	r1, [r3, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 800241e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002420:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002422:	6821      	ldr	r1, [r4, #0]
 8002424:	3128      	adds	r1, #40	; 0x28
 8002426:	0013      	movs	r3, r2
 8002428:	000a      	movs	r2, r1
 800242a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800242c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800242e:	f7fe fa07 	bl	8000840 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	2240      	movs	r2, #64	; 0x40
 8002436:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8002438:	55a5      	strb	r5, [r4, r6]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	6893      	ldr	r3, [r2, #8]
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	430b      	orrs	r3, r1
 8002442:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8002444:	2000      	movs	r0, #0
 8002446:	e7c4      	b.n	80023d2 <HAL_UART_Transmit_DMA+0xe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1cc      	bne.n	80023e8 <HAL_UART_Transmit_DMA+0x24>
        return  HAL_ERROR;
 800244e:	2001      	movs	r0, #1
      if((((uint32_t)pData)&1U) != 0U)
 8002450:	07cb      	lsls	r3, r1, #31
 8002452:	d5c9      	bpl.n	80023e8 <HAL_UART_Transmit_DMA+0x24>
 8002454:	e7bd      	b.n	80023d2 <HAL_UART_Transmit_DMA+0xe>
      return HAL_ERROR;
 8002456:	2001      	movs	r0, #1
 8002458:	e7bb      	b.n	80023d2 <HAL_UART_Transmit_DMA+0xe>
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	08002469 	.word	0x08002469
 8002460:	0800249b 	.word	0x0800249b
 8002464:	080024a5 	.word	0x080024a5

08002468 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002468:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800246a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800246c:	6802      	ldr	r2, [r0, #0]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	0692      	lsls	r2, r2, #26
 8002472:	d40d      	bmi.n	8002490 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0;
 8002474:	2100      	movs	r1, #0
 8002476:	2252      	movs	r2, #82	; 0x52
 8002478:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	688a      	ldr	r2, [r1, #8]
 800247e:	2080      	movs	r0, #128	; 0x80
 8002480:	4382      	bics	r2, r0
 8002482:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	430b      	orrs	r3, r1
 800248c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 800248e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8002490:	0018      	movs	r0, r3
 8002492:	f002 fd6d 	bl	8004f70 <HAL_UART_TxCpltCallback>
}
 8002496:	e7fa      	b.n	800248e <UART_DMATransmitCplt+0x26>

08002498 <HAL_UART_TxHalfCpltCallback>:
}
 8002498:	4770      	bx	lr

0800249a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800249a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 800249c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800249e:	f7ff fffb 	bl	8002498 <HAL_UART_TxHalfCpltCallback>
}
 80024a2:	bd10      	pop	{r4, pc}

080024a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80024a6:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024a8:	2369      	movs	r3, #105	; 0x69
 80024aa:	5ce3      	ldrb	r3, [r4, r3]
 80024ac:	2b21      	cmp	r3, #33	; 0x21
 80024ae:	d00b      	beq.n	80024c8 <UART_DMAError+0x24>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024b0:	236a      	movs	r3, #106	; 0x6a
 80024b2:	5ce3      	ldrb	r3, [r4, r3]
 80024b4:	2b22      	cmp	r3, #34	; 0x22
 80024b6:	d016      	beq.n	80024e6 <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024b8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80024ba:	2210      	movs	r2, #16
 80024bc:	4313      	orrs	r3, r2
 80024be:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80024c0:	0020      	movs	r0, r4
 80024c2:	f002 fadd 	bl	8004a80 <HAL_UART_ErrorCallback>
}
 80024c6:	bd10      	pop	{r4, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	0612      	lsls	r2, r2, #24
 80024ce:	d5ef      	bpl.n	80024b0 <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 80024d0:	2100      	movs	r1, #0
 80024d2:	2252      	movs	r2, #82	; 0x52
 80024d4:	52a1      	strh	r1, [r4, r2]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	31c0      	adds	r1, #192	; 0xc0
 80024da:	438a      	bics	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80024de:	2220      	movs	r2, #32
 80024e0:	2369      	movs	r3, #105	; 0x69
 80024e2:	54e2      	strb	r2, [r4, r3]
 80024e4:	e7e4      	b.n	80024b0 <UART_DMAError+0xc>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	065b      	lsls	r3, r3, #25
 80024ec:	d5e4      	bpl.n	80024b8 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80024ee:	2200      	movs	r2, #0
 80024f0:	235a      	movs	r3, #90	; 0x5a
 80024f2:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80024f4:	0020      	movs	r0, r4
 80024f6:	f7ff feeb 	bl	80022d0 <UART_EndRxTransfer>
 80024fa:	e7dd      	b.n	80024b8 <UART_DMAError+0x14>

080024fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024fc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80024fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	225a      	movs	r2, #90	; 0x5a
 8002504:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8002506:	3a08      	subs	r2, #8
 8002508:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 800250a:	f002 fab9 	bl	8004a80 <HAL_UART_ErrorCallback>
}
 800250e:	bd10      	pop	{r4, pc}

08002510 <UART_SetConfig>:
{
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002514:	6801      	ldr	r1, [r0, #0]
 8002516:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002518:	6883      	ldr	r3, [r0, #8]
 800251a:	6900      	ldr	r0, [r0, #16]
 800251c:	4303      	orrs	r3, r0
 800251e:	6960      	ldr	r0, [r4, #20]
 8002520:	4303      	orrs	r3, r0
 8002522:	69e0      	ldr	r0, [r4, #28]
 8002524:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002526:	4856      	ldr	r0, [pc, #344]	; (8002680 <UART_SetConfig+0x170>)
 8002528:	4002      	ands	r2, r0
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	6853      	ldr	r3, [r2, #4]
 8002532:	4954      	ldr	r1, [pc, #336]	; (8002684 <UART_SetConfig+0x174>)
 8002534:	400b      	ands	r3, r1
 8002536:	68e1      	ldr	r1, [r4, #12]
 8002538:	430b      	orrs	r3, r1
 800253a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800253c:	6821      	ldr	r1, [r4, #0]
 800253e:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002540:	69a3      	ldr	r3, [r4, #24]
 8002542:	6a20      	ldr	r0, [r4, #32]
 8002544:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002546:	4850      	ldr	r0, [pc, #320]	; (8002688 <UART_SetConfig+0x178>)
 8002548:	4002      	ands	r2, r0
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800254e:	4b4f      	ldr	r3, [pc, #316]	; (800268c <UART_SetConfig+0x17c>)
 8002550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002552:	2303      	movs	r3, #3
 8002554:	4013      	ands	r3, r2
 8002556:	2b01      	cmp	r3, #1
 8002558:	d067      	beq.n	800262a <UART_SetConfig+0x11a>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <UART_SetConfig+0x64>
 800255e:	2b02      	cmp	r3, #2
 8002560:	d03e      	beq.n	80025e0 <UART_SetConfig+0xd0>
 8002562:	2b03      	cmp	r3, #3
 8002564:	d04f      	beq.n	8002606 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	69e2      	ldr	r2, [r4, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	d034      	beq.n	80025da <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8002570:	2001      	movs	r0, #1
 8002572:	e025      	b.n	80025c0 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	69e2      	ldr	r2, [r4, #28]
 800257a:	429a      	cmp	r2, r3
 800257c:	d100      	bne.n	8002580 <UART_SetConfig+0x70>
 800257e:	e072      	b.n	8002666 <UART_SetConfig+0x156>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002580:	6825      	ldr	r5, [r4, #0]
 8002582:	f7ff fe01 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 8002586:	6861      	ldr	r1, [r4, #4]
 8002588:	084b      	lsrs	r3, r1, #1
 800258a:	1818      	adds	r0, r3, r0
 800258c:	f7fd fdbc 	bl	8000108 <__udivsi3>
 8002590:	0400      	lsls	r0, r0, #16
 8002592:	0c00      	lsrs	r0, r0, #16
 8002594:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002596:	2000      	movs	r0, #0
        break;
 8002598:	e012      	b.n	80025c0 <UART_SetConfig+0xb0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800259a:	6863      	ldr	r3, [r4, #4]
 800259c:	0858      	lsrs	r0, r3, #1
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <UART_SetConfig+0x180>)
 80025a0:	469c      	mov	ip, r3
 80025a2:	4460      	add	r0, ip
 80025a4:	6861      	ldr	r1, [r4, #4]
 80025a6:	f7fd fdaf 	bl	8000108 <__udivsi3>
 80025aa:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ac:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80025ae:	220f      	movs	r2, #15
 80025b0:	0019      	movs	r1, r3
 80025b2:	4391      	bics	r1, r2
 80025b4:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80025b6:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025b8:	071b      	lsls	r3, r3, #28
 80025ba:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
}
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025c2:	f7ff fcef 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 80025c6:	0040      	lsls	r0, r0, #1
 80025c8:	6863      	ldr	r3, [r4, #4]
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	18c0      	adds	r0, r0, r3
 80025ce:	6861      	ldr	r1, [r4, #4]
 80025d0:	f7fd fd9a 	bl	8000108 <__udivsi3>
 80025d4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d6:	2000      	movs	r0, #0
        break;
 80025d8:	e7e9      	b.n	80025ae <UART_SetConfig+0x9e>
        ret = HAL_ERROR;
 80025da:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80025dc:	2300      	movs	r3, #0
 80025de:	e7e6      	b.n	80025ae <UART_SetConfig+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	69e2      	ldr	r2, [r4, #28]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d031      	beq.n	800264e <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025ea:	6825      	ldr	r5, [r4, #0]
 80025ec:	6861      	ldr	r1, [r4, #4]
 80025ee:	0848      	lsrs	r0, r1, #1
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	469c      	mov	ip, r3
 80025f6:	4460      	add	r0, ip
 80025f8:	f7fd fd86 	bl	8000108 <__udivsi3>
 80025fc:	0400      	lsls	r0, r0, #16
 80025fe:	0c00      	lsrs	r0, r0, #16
 8002600:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002602:	2000      	movs	r0, #0
        break;
 8002604:	e7dc      	b.n	80025c0 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	69e2      	ldr	r2, [r4, #28]
 800260c:	429a      	cmp	r2, r3
 800260e:	d0c4      	beq.n	800259a <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002610:	6825      	ldr	r5, [r4, #0]
 8002612:	6861      	ldr	r1, [r4, #4]
 8002614:	0848      	lsrs	r0, r1, #1
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <UART_SetConfig+0x184>)
 8002618:	469c      	mov	ip, r3
 800261a:	4460      	add	r0, ip
 800261c:	f7fd fd74 	bl	8000108 <__udivsi3>
 8002620:	0400      	lsls	r0, r0, #16
 8002622:	0c00      	lsrs	r0, r0, #16
 8002624:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002626:	2000      	movs	r0, #0
        break;
 8002628:	e7ca      	b.n	80025c0 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	69e2      	ldr	r2, [r4, #28]
 8002630:	429a      	cmp	r2, r3
 8002632:	d0c6      	beq.n	80025c2 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002634:	6825      	ldr	r5, [r4, #0]
 8002636:	f7ff fcb5 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 800263a:	6861      	ldr	r1, [r4, #4]
 800263c:	084b      	lsrs	r3, r1, #1
 800263e:	1818      	adds	r0, r3, r0
 8002640:	f7fd fd62 	bl	8000108 <__udivsi3>
 8002644:	0400      	lsls	r0, r0, #16
 8002646:	0c00      	lsrs	r0, r0, #16
 8002648:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800264a:	2000      	movs	r0, #0
  return ret;
 800264c:	e7b8      	b.n	80025c0 <UART_SetConfig+0xb0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800264e:	6863      	ldr	r3, [r4, #4]
 8002650:	0858      	lsrs	r0, r3, #1
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	469c      	mov	ip, r3
 8002658:	4460      	add	r0, ip
 800265a:	6861      	ldr	r1, [r4, #4]
 800265c:	f7fd fd54 	bl	8000108 <__udivsi3>
 8002660:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002662:	2000      	movs	r0, #0
        break;
 8002664:	e7a3      	b.n	80025ae <UART_SetConfig+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002666:	f7ff fd8f 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 800266a:	0040      	lsls	r0, r0, #1
 800266c:	6863      	ldr	r3, [r4, #4]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	18c0      	adds	r0, r0, r3
 8002672:	6861      	ldr	r1, [r4, #4]
 8002674:	f7fd fd48 	bl	8000108 <__udivsi3>
 8002678:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800267a:	2000      	movs	r0, #0
        break;
 800267c:	e797      	b.n	80025ae <UART_SetConfig+0x9e>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	ffff69f3 	.word	0xffff69f3
 8002684:	ffffcfff 	.word	0xffffcfff
 8002688:	fffff4ff 	.word	0xfffff4ff
 800268c:	40021000 	.word	0x40021000
 8002690:	00f42400 	.word	0x00f42400
 8002694:	007a1200 	.word	0x007a1200

08002698 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002698:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800269a:	07db      	lsls	r3, r3, #31
 800269c:	d506      	bpl.n	80026ac <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800269e:	6802      	ldr	r2, [r0, #0]
 80026a0:	6853      	ldr	r3, [r2, #4]
 80026a2:	492c      	ldr	r1, [pc, #176]	; (8002754 <UART_AdvFeatureConfig+0xbc>)
 80026a4:	400b      	ands	r3, r1
 80026a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026ae:	079b      	lsls	r3, r3, #30
 80026b0:	d506      	bpl.n	80026c0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026b2:	6802      	ldr	r2, [r0, #0]
 80026b4:	6853      	ldr	r3, [r2, #4]
 80026b6:	4928      	ldr	r1, [pc, #160]	; (8002758 <UART_AdvFeatureConfig+0xc0>)
 80026b8:	400b      	ands	r3, r1
 80026ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80026bc:	430b      	orrs	r3, r1
 80026be:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026c2:	075b      	lsls	r3, r3, #29
 80026c4:	d506      	bpl.n	80026d4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026c6:	6802      	ldr	r2, [r0, #0]
 80026c8:	6853      	ldr	r3, [r2, #4]
 80026ca:	4924      	ldr	r1, [pc, #144]	; (800275c <UART_AdvFeatureConfig+0xc4>)
 80026cc:	400b      	ands	r3, r1
 80026ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026d6:	071b      	lsls	r3, r3, #28
 80026d8:	d506      	bpl.n	80026e8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026da:	6802      	ldr	r2, [r0, #0]
 80026dc:	6853      	ldr	r3, [r2, #4]
 80026de:	4920      	ldr	r1, [pc, #128]	; (8002760 <UART_AdvFeatureConfig+0xc8>)
 80026e0:	400b      	ands	r3, r1
 80026e2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026ea:	06db      	lsls	r3, r3, #27
 80026ec:	d506      	bpl.n	80026fc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026ee:	6802      	ldr	r2, [r0, #0]
 80026f0:	6893      	ldr	r3, [r2, #8]
 80026f2:	491c      	ldr	r1, [pc, #112]	; (8002764 <UART_AdvFeatureConfig+0xcc>)
 80026f4:	400b      	ands	r3, r1
 80026f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	d506      	bpl.n	8002710 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002702:	6802      	ldr	r2, [r0, #0]
 8002704:	6893      	ldr	r3, [r2, #8]
 8002706:	4918      	ldr	r1, [pc, #96]	; (8002768 <UART_AdvFeatureConfig+0xd0>)
 8002708:	400b      	ands	r3, r1
 800270a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800270c:	430b      	orrs	r3, r1
 800270e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002712:	065b      	lsls	r3, r3, #25
 8002714:	d50b      	bpl.n	800272e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002716:	6802      	ldr	r2, [r0, #0]
 8002718:	6853      	ldr	r3, [r2, #4]
 800271a:	4914      	ldr	r1, [pc, #80]	; (800276c <UART_AdvFeatureConfig+0xd4>)
 800271c:	400b      	ands	r3, r1
 800271e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002720:	430b      	orrs	r3, r1
 8002722:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	035b      	lsls	r3, r3, #13
 8002728:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800272a:	429a      	cmp	r2, r3
 800272c:	d00a      	beq.n	8002744 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800272e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	d506      	bpl.n	8002742 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002734:	6802      	ldr	r2, [r0, #0]
 8002736:	6853      	ldr	r3, [r2, #4]
 8002738:	490d      	ldr	r1, [pc, #52]	; (8002770 <UART_AdvFeatureConfig+0xd8>)
 800273a:	400b      	ands	r3, r1
 800273c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800273e:	430b      	orrs	r3, r1
 8002740:	6053      	str	r3, [r2, #4]
}
 8002742:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	6853      	ldr	r3, [r2, #4]
 8002748:	490a      	ldr	r1, [pc, #40]	; (8002774 <UART_AdvFeatureConfig+0xdc>)
 800274a:	400b      	ands	r3, r1
 800274c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800274e:	430b      	orrs	r3, r1
 8002750:	6053      	str	r3, [r2, #4]
 8002752:	e7ec      	b.n	800272e <UART_AdvFeatureConfig+0x96>
 8002754:	fffdffff 	.word	0xfffdffff
 8002758:	fffeffff 	.word	0xfffeffff
 800275c:	fffbffff 	.word	0xfffbffff
 8002760:	ffff7fff 	.word	0xffff7fff
 8002764:	ffffefff 	.word	0xffffefff
 8002768:	ffffdfff 	.word	0xffffdfff
 800276c:	ffefffff 	.word	0xffefffff
 8002770:	fff7ffff 	.word	0xfff7ffff
 8002774:	ff9fffff 	.word	0xff9fffff

08002778 <HAL_UART_Init>:
{
 8002778:	b510      	push	{r4, lr}
 800277a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800277c:	d037      	beq.n	80027ee <HAL_UART_Init+0x76>
  if(huart->gState == HAL_UART_STATE_RESET)
 800277e:	2369      	movs	r3, #105	; 0x69
 8002780:	5cc3      	ldrb	r3, [r0, r3]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d029      	beq.n	80027da <HAL_UART_Init+0x62>
  huart->gState = HAL_UART_STATE_BUSY;
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	2369      	movs	r3, #105	; 0x69
 800278a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800278c:	6822      	ldr	r2, [r4, #0]
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	438b      	bics	r3, r1
 8002794:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002796:	0020      	movs	r0, r4
 8002798:	f7ff feba 	bl	8002510 <UART_SetConfig>
 800279c:	2801      	cmp	r0, #1
 800279e:	d01b      	beq.n	80027d8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11f      	bne.n	80027e6 <HAL_UART_Init+0x6e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	6853      	ldr	r3, [r2, #4]
 80027aa:	4912      	ldr	r1, [pc, #72]	; (80027f4 <HAL_UART_Init+0x7c>)
 80027ac:	400b      	ands	r3, r1
 80027ae:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	6893      	ldr	r3, [r2, #8]
 80027b4:	2108      	movs	r1, #8
 80027b6:	438b      	bics	r3, r1
 80027b8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80027ba:	6822      	ldr	r2, [r4, #0]
 80027bc:	6813      	ldr	r3, [r2, #0]
 80027be:	3907      	subs	r1, #7
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 80027c8:	2220      	movs	r2, #32
 80027ca:	3168      	adds	r1, #104	; 0x68
 80027cc:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 80027ce:	3101      	adds	r1, #1
 80027d0:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 80027d2:	3248      	adds	r2, #72	; 0x48
 80027d4:	54a3      	strb	r3, [r4, r2]
  return (UART_CheckIdleState(huart));
 80027d6:	2000      	movs	r0, #0
}
 80027d8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80027da:	2200      	movs	r2, #0
 80027dc:	3368      	adds	r3, #104	; 0x68
 80027de:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80027e0:	f002 fd58 	bl	8005294 <HAL_UART_MspInit>
 80027e4:	e7cf      	b.n	8002786 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80027e6:	0020      	movs	r0, r4
 80027e8:	f7ff ff56 	bl	8002698 <UART_AdvFeatureConfig>
 80027ec:	e7db      	b.n	80027a6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e7f2      	b.n	80027d8 <HAL_UART_Init+0x60>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	fffff7ff 	.word	0xfffff7ff

080027f8 <UART_WaitOnFlagUntilTimeout>:
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	46c6      	mov	lr, r8
 80027fc:	b500      	push	{lr}
 80027fe:	0007      	movs	r7, r0
 8002800:	000c      	movs	r4, r1
 8002802:	0016      	movs	r6, r2
 8002804:	4698      	mov	r8, r3
 8002806:	9d06      	ldr	r5, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	69d3      	ldr	r3, [r2, #28]
 800280c:	4023      	ands	r3, r4
 800280e:	1b1b      	subs	r3, r3, r4
 8002810:	4259      	negs	r1, r3
 8002812:	414b      	adcs	r3, r1
 8002814:	42b3      	cmp	r3, r6
 8002816:	d11e      	bne.n	8002856 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002818:	1c6b      	adds	r3, r5, #1
 800281a:	d0f6      	beq.n	800280a <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800281c:	2d00      	cmp	r5, #0
 800281e:	d005      	beq.n	800282c <UART_WaitOnFlagUntilTimeout+0x34>
 8002820:	f7fd fd28 	bl	8000274 <HAL_GetTick>
 8002824:	4643      	mov	r3, r8
 8002826:	1ac0      	subs	r0, r0, r3
 8002828:	4285      	cmp	r5, r0
 800282a:	d2ed      	bcs.n	8002808 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	490b      	ldr	r1, [pc, #44]	; (8002860 <UART_WaitOnFlagUntilTimeout+0x68>)
 8002832:	400b      	ands	r3, r1
 8002834:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	6893      	ldr	r3, [r2, #8]
 800283a:	31a3      	adds	r1, #163	; 0xa3
 800283c:	31ff      	adds	r1, #255	; 0xff
 800283e:	438b      	bics	r3, r1
 8002840:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002842:	2320      	movs	r3, #32
 8002844:	2269      	movs	r2, #105	; 0x69
 8002846:	54bb      	strb	r3, [r7, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002848:	3201      	adds	r2, #1
 800284a:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(huart);
 800284c:	2200      	movs	r2, #0
 800284e:	3348      	adds	r3, #72	; 0x48
 8002850:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
 8002854:	e000      	b.n	8002858 <UART_WaitOnFlagUntilTimeout+0x60>
  return HAL_OK;
 8002856:	2000      	movs	r0, #0
}
 8002858:	bc04      	pop	{r2}
 800285a:	4690      	mov	r8, r2
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	fffffe5f 	.word	0xfffffe5f

08002864 <HAL_UART_Transmit>:
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	46c6      	mov	lr, r8
 8002868:	b500      	push	{lr}
 800286a:	b084      	sub	sp, #16
 800286c:	0004      	movs	r4, r0
 800286e:	000f      	movs	r7, r1
 8002870:	0016      	movs	r6, r2
 8002872:	001d      	movs	r5, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002874:	2369      	movs	r3, #105	; 0x69
 8002876:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8002878:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800287a:	2b20      	cmp	r3, #32
 800287c:	d003      	beq.n	8002886 <HAL_UART_Transmit+0x22>
}
 800287e:	b004      	add	sp, #16
 8002880:	bc04      	pop	{r2}
 8002882:	4690      	mov	r8, r2
 8002884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8002886:	2900      	cmp	r1, #0
 8002888:	d05a      	beq.n	8002940 <HAL_UART_Transmit+0xdc>
      return  HAL_ERROR;
 800288a:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800288c:	2a00      	cmp	r2, #0
 800288e:	d0f6      	beq.n	800287e <HAL_UART_Transmit+0x1a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	015b      	lsls	r3, r3, #5
 8002894:	68a2      	ldr	r2, [r4, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d018      	beq.n	80028cc <HAL_UART_Transmit+0x68>
    __HAL_LOCK(huart);
 800289a:	2368      	movs	r3, #104	; 0x68
 800289c:	5ce3      	ldrb	r3, [r4, r3]
 800289e:	2002      	movs	r0, #2
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d0ec      	beq.n	800287e <HAL_UART_Transmit+0x1a>
 80028a4:	2201      	movs	r2, #1
 80028a6:	2368      	movs	r3, #104	; 0x68
 80028a8:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ae:	3220      	adds	r2, #32
 80028b0:	3369      	adds	r3, #105	; 0x69
 80028b2:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 80028b4:	f7fd fcde 	bl	8000274 <HAL_GetTick>
 80028b8:	9003      	str	r0, [sp, #12]
    huart->TxXferSize = Size;
 80028ba:	2350      	movs	r3, #80	; 0x50
 80028bc:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 80028be:	3302      	adds	r3, #2
 80028c0:	52e6      	strh	r6, [r4, r3]
    while(huart->TxXferCount > 0)
 80028c2:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	4698      	mov	r8, r3
    while(huart->TxXferCount > 0)
 80028ca:	e009      	b.n	80028e0 <HAL_UART_Transmit+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	6923      	ldr	r3, [r4, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e3      	bne.n	800289a <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80028d2:	07cb      	lsls	r3, r1, #31
 80028d4:	d5e1      	bpl.n	800289a <HAL_UART_Transmit+0x36>
 80028d6:	e7d2      	b.n	800287e <HAL_UART_Transmit+0x1a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80028d8:	783b      	ldrb	r3, [r7, #0]
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	8513      	strh	r3, [r2, #40]	; 0x28
 80028de:	3701      	adds	r7, #1
    while(huart->TxXferCount > 0)
 80028e0:	5ba3      	ldrh	r3, [r4, r6]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d019      	beq.n	800291c <HAL_UART_Transmit+0xb8>
      huart->TxXferCount--;
 80028e8:	5ba3      	ldrh	r3, [r4, r6]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	53a3      	strh	r3, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f0:	9500      	str	r5, [sp, #0]
 80028f2:	9b03      	ldr	r3, [sp, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	0020      	movs	r0, r4
 80028fa:	f7ff ff7d 	bl	80027f8 <UART_WaitOnFlagUntilTimeout>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d120      	bne.n	8002944 <HAL_UART_Transmit+0xe0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002902:	68a3      	ldr	r3, [r4, #8]
 8002904:	4543      	cmp	r3, r8
 8002906:	d1e7      	bne.n	80028d8 <HAL_UART_Transmit+0x74>
 8002908:	6923      	ldr	r3, [r4, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e4      	bne.n	80028d8 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800290e:	883b      	ldrh	r3, [r7, #0]
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	0ddb      	lsrs	r3, r3, #23
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8002918:	3702      	adds	r7, #2
 800291a:	e7e1      	b.n	80028e0 <HAL_UART_Transmit+0x7c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291c:	9500      	str	r5, [sp, #0]
 800291e:	9b03      	ldr	r3, [sp, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	0020      	movs	r0, r4
 8002926:	f7ff ff67 	bl	80027f8 <UART_WaitOnFlagUntilTimeout>
 800292a:	2800      	cmp	r0, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_Transmit+0xce>
      return HAL_TIMEOUT;
 800292e:	2003      	movs	r0, #3
 8002930:	e7a5      	b.n	800287e <HAL_UART_Transmit+0x1a>
    huart->gState = HAL_UART_STATE_READY;
 8002932:	2220      	movs	r2, #32
 8002934:	2369      	movs	r3, #105	; 0x69
 8002936:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8002938:	2200      	movs	r2, #0
 800293a:	3b01      	subs	r3, #1
 800293c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 800293e:	e79e      	b.n	800287e <HAL_UART_Transmit+0x1a>
      return  HAL_ERROR;
 8002940:	2001      	movs	r0, #1
 8002942:	e79c      	b.n	800287e <HAL_UART_Transmit+0x1a>
        return HAL_TIMEOUT;
 8002944:	2003      	movs	r0, #3
 8002946:	e79a      	b.n	800287e <HAL_UART_Transmit+0x1a>

08002948 <HAL_UART_Receive>:
{
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	46d6      	mov	lr, sl
 800294c:	4647      	mov	r7, r8
 800294e:	b580      	push	{r7, lr}
 8002950:	b085      	sub	sp, #20
 8002952:	0004      	movs	r4, r0
 8002954:	000f      	movs	r7, r1
 8002956:	0016      	movs	r6, r2
 8002958:	001d      	movs	r5, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800295a:	236a      	movs	r3, #106	; 0x6a
 800295c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 800295e:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <HAL_UART_Receive+0x26>
}
 8002964:	b005      	add	sp, #20
 8002966:	bc0c      	pop	{r2, r3}
 8002968:	4690      	mov	r8, r2
 800296a:	469a      	mov	sl, r3
 800296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 800296e:	2900      	cmp	r1, #0
 8002970:	d071      	beq.n	8002a56 <HAL_UART_Receive+0x10e>
      return  HAL_ERROR;
 8002972:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002974:	2a00      	cmp	r2, #0
 8002976:	d0f5      	beq.n	8002964 <HAL_UART_Receive+0x1c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	015b      	lsls	r3, r3, #5
 800297c:	68a2      	ldr	r2, [r4, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d028      	beq.n	80029d4 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8002982:	2368      	movs	r3, #104	; 0x68
 8002984:	5ce3      	ldrb	r3, [r4, r3]
 8002986:	2002      	movs	r0, #2
 8002988:	2b01      	cmp	r3, #1
 800298a:	d0eb      	beq.n	8002964 <HAL_UART_Receive+0x1c>
 800298c:	2201      	movs	r2, #1
 800298e:	2368      	movs	r3, #104	; 0x68
 8002990:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	2300      	movs	r3, #0
 8002994:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002996:	3221      	adds	r2, #33	; 0x21
 8002998:	336a      	adds	r3, #106	; 0x6a
 800299a:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800299c:	f7fd fc6a 	bl	8000274 <HAL_GetTick>
 80029a0:	9003      	str	r0, [sp, #12]
    huart->RxXferSize = Size;
 80029a2:	2358      	movs	r3, #88	; 0x58
 80029a4:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 80029a6:	3302      	adds	r3, #2
 80029a8:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 80029aa:	68a3      	ldr	r3, [r4, #8]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0152      	lsls	r2, r2, #5
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d015      	beq.n	80029e0 <HAL_UART_Receive+0x98>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_UART_Receive+0x7c>
 80029b8:	6923      	ldr	r3, [r4, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11b      	bne.n	80029f6 <HAL_UART_Receive+0xae>
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	335c      	adds	r3, #92	; 0x5c
 80029c2:	52e2      	strh	r2, [r4, r3]
    uhMask = huart->Mask;
 80029c4:	235c      	movs	r3, #92	; 0x5c
 80029c6:	5ae3      	ldrh	r3, [r4, r3]
 80029c8:	469a      	mov	sl, r3
    while(huart->RxXferCount > 0U)
 80029ca:	265a      	movs	r6, #90	; 0x5a
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	015b      	lsls	r3, r3, #5
 80029d0:	4698      	mov	r8, r3
    while(huart->RxXferCount > 0U)
 80029d2:	e01a      	b.n	8002a0a <HAL_UART_Receive+0xc2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1d3      	bne.n	8002982 <HAL_UART_Receive+0x3a>
      if((((uint32_t)pData)&1U) != 0U)
 80029da:	07cb      	lsls	r3, r1, #31
 80029dc:	d5d1      	bpl.n	8002982 <HAL_UART_Receive+0x3a>
 80029de:	e7c1      	b.n	8002964 <HAL_UART_Receive+0x1c>
    UART_MASK_COMPUTATION(huart);
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_UART_Receive+0xa6>
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_UART_Receive+0x118>)
 80029e8:	335c      	adds	r3, #92	; 0x5c
 80029ea:	52e2      	strh	r2, [r4, r3]
 80029ec:	e7ea      	b.n	80029c4 <HAL_UART_Receive+0x7c>
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	235c      	movs	r3, #92	; 0x5c
 80029f2:	52e2      	strh	r2, [r4, r3]
 80029f4:	e7e6      	b.n	80029c4 <HAL_UART_Receive+0x7c>
 80029f6:	227f      	movs	r2, #127	; 0x7f
 80029f8:	235c      	movs	r3, #92	; 0x5c
 80029fa:	52e2      	strh	r2, [r4, r3]
 80029fc:	e7e2      	b.n	80029c4 <HAL_UART_Receive+0x7c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a02:	4652      	mov	r2, sl
 8002a04:	4013      	ands	r3, r2
 8002a06:	703b      	strb	r3, [r7, #0]
 8002a08:	3701      	adds	r7, #1
    while(huart->RxXferCount > 0U)
 8002a0a:	5ba3      	ldrh	r3, [r4, r6]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d019      	beq.n	8002a46 <HAL_UART_Receive+0xfe>
      huart->RxXferCount--;
 8002a12:	5ba3      	ldrh	r3, [r4, r6]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	53a3      	strh	r3, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	9500      	str	r5, [sp, #0]
 8002a1c:	9b03      	ldr	r3, [sp, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2120      	movs	r1, #32
 8002a22:	0020      	movs	r0, r4
 8002a24:	f7ff fee8 	bl	80027f8 <UART_WaitOnFlagUntilTimeout>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d116      	bne.n	8002a5a <HAL_UART_Receive+0x112>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	68a3      	ldr	r3, [r4, #8]
 8002a2e:	4543      	cmp	r3, r8
 8002a30:	d1e5      	bne.n	80029fe <HAL_UART_Receive+0xb6>
 8002a32:	6923      	ldr	r3, [r4, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e2      	bne.n	80029fe <HAL_UART_Receive+0xb6>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a3c:	4652      	mov	r2, sl
 8002a3e:	4013      	ands	r3, r2
 8002a40:	803b      	strh	r3, [r7, #0]
        pData +=2U;
 8002a42:	3702      	adds	r7, #2
 8002a44:	e7e1      	b.n	8002a0a <HAL_UART_Receive+0xc2>
    huart->RxState = HAL_UART_STATE_READY;
 8002a46:	2220      	movs	r2, #32
 8002a48:	336a      	adds	r3, #106	; 0x6a
 8002a4a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	3b02      	subs	r3, #2
 8002a50:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8002a52:	2000      	movs	r0, #0
 8002a54:	e786      	b.n	8002964 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8002a56:	2001      	movs	r0, #1
 8002a58:	e784      	b.n	8002964 <HAL_UART_Receive+0x1c>
        return HAL_TIMEOUT;
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	e782      	b.n	8002964 <HAL_UART_Receive+0x1c>
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	000001ff 	.word	0x000001ff

08002a64 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a64:	2369      	movs	r3, #105	; 0x69
 8002a66:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002a68:	3b67      	subs	r3, #103	; 0x67
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a6a:	2a21      	cmp	r2, #33	; 0x21
 8002a6c:	d001      	beq.n	8002a72 <UART_Transmit_IT+0xe>
  }
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002a72:	3350      	adds	r3, #80	; 0x50
 8002a74:	5ac3      	ldrh	r3, [r0, r3]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d011      	beq.n	8002aa0 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	6882      	ldr	r2, [r0, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d018      	beq.n	8002ab8 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002a86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	64c2      	str	r2, [r0, #76]	; 0x4c
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	6802      	ldr	r2, [r0, #0]
 8002a90:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002a92:	2252      	movs	r2, #82	; 0x52
 8002a94:	5a83      	ldrh	r3, [r0, r2]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e7e6      	b.n	8002a6e <UART_Transmit_IT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002aa0:	6802      	ldr	r2, [r0, #0]
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	438b      	bics	r3, r1
 8002aa8:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002aaa:	6802      	ldr	r2, [r0, #0]
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	3940      	subs	r1, #64	; 0x40
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e7da      	b.n	8002a6e <UART_Transmit_IT+0xa>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab8:	6903      	ldr	r3, [r0, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e3      	bne.n	8002a86 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002abe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	05db      	lsls	r3, r3, #23
 8002ac4:	0ddb      	lsrs	r3, r3, #23
 8002ac6:	6802      	ldr	r2, [r0, #0]
 8002ac8:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002aca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002acc:	3302      	adds	r3, #2
 8002ace:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002ad0:	e7df      	b.n	8002a92 <UART_Transmit_IT+0x2e>

08002ad2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ad2:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ad4:	6802      	ldr	r2, [r0, #0]
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	438b      	bics	r3, r1
 8002adc:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ade:	2220      	movs	r2, #32
 8002ae0:	2369      	movs	r3, #105	; 0x69
 8002ae2:	54c2      	strb	r2, [r0, r3]

  HAL_UART_TxCpltCallback(huart);
 8002ae4:	f002 fa44 	bl	8004f70 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002ae8:	2000      	movs	r0, #0
 8002aea:	bd10      	pop	{r4, pc}

08002aec <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002aec:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aee:	236a      	movs	r3, #106	; 0x6a
 8002af0:	5cc3      	ldrb	r3, [r0, r3]
 8002af2:	2b22      	cmp	r3, #34	; 0x22
 8002af4:	d007      	beq.n	8002b06 <UART_Receive_IT+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002af6:	6802      	ldr	r2, [r0, #0]
 8002af8:	6993      	ldr	r3, [r2, #24]
 8002afa:	2108      	movs	r1, #8
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	bd10      	pop	{r4, pc}
  uint16_t  uhMask = huart->Mask;
 8002b06:	333a      	adds	r3, #58	; 0x3a
 8002b08:	5ac1      	ldrh	r1, [r0, r3]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b0a:	6803      	ldr	r3, [r0, #0]
 8002b0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b0e:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	0152      	lsls	r2, r2, #5
 8002b14:	6884      	ldr	r4, [r0, #8]
 8002b16:	4294      	cmp	r4, r2
 8002b18:	d01e      	beq.n	8002b58 <UART_Receive_IT+0x6c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002b1a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002b1c:	1c54      	adds	r4, r2, #1
 8002b1e:	6544      	str	r4, [r0, #84]	; 0x54
 8002b20:	400b      	ands	r3, r1
 8002b22:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8002b24:	235a      	movs	r3, #90	; 0x5a
 8002b26:	5ac2      	ldrh	r2, [r0, r3]
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	52c2      	strh	r2, [r0, r3]
    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
    if(--huart->RxXferCount == 0U)
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d1e6      	bne.n	8002b02 <UART_Receive_IT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	6802      	ldr	r2, [r0, #0]
 8002b36:	6813      	ldr	r3, [r2, #0]
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <UART_Receive_IT+0x80>)
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3e:	6802      	ldr	r2, [r0, #0]
 8002b40:	6893      	ldr	r3, [r2, #8]
 8002b42:	3123      	adds	r1, #35	; 0x23
 8002b44:	31ff      	adds	r1, #255	; 0xff
 8002b46:	438b      	bics	r3, r1
 8002b48:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	236a      	movs	r3, #106	; 0x6a
 8002b4e:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8002b50:	f001 ff90 	bl	8004a74 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e7d4      	b.n	8002b02 <UART_Receive_IT+0x16>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b58:	6902      	ldr	r2, [r0, #16]
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d1dd      	bne.n	8002b1a <UART_Receive_IT+0x2e>
      *tmp = (uint16_t)(uhdata & uhMask);
 8002b5e:	400b      	ands	r3, r1
 8002b60:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002b62:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8002b64:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b66:	3302      	adds	r3, #2
 8002b68:	6543      	str	r3, [r0, #84]	; 0x54
 8002b6a:	e7db      	b.n	8002b24 <UART_Receive_IT+0x38>
 8002b6c:	fffffedf 	.word	0xfffffedf

08002b70 <HAL_UART_IRQHandler>:
{
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b74:	6802      	ldr	r2, [r0, #0]
 8002b76:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b78:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002b7a:	0718      	lsls	r0, r3, #28
 8002b7c:	d130      	bne.n	8002be0 <HAL_UART_IRQHandler+0x70>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7e:	0698      	lsls	r0, r3, #26
 8002b80:	d501      	bpl.n	8002b86 <HAL_UART_IRQHandler+0x16>
 8002b82:	0688      	lsls	r0, r1, #26
 8002b84:	d409      	bmi.n	8002b9a <HAL_UART_IRQHandler+0x2a>
  cr3its = READ_REG(huart->Instance->CR3);
 8002b86:	6892      	ldr	r2, [r2, #8]
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b88:	061a      	lsls	r2, r3, #24
 8002b8a:	d501      	bpl.n	8002b90 <HAL_UART_IRQHandler+0x20>
 8002b8c:	060a      	lsls	r2, r1, #24
 8002b8e:	d41f      	bmi.n	8002bd0 <HAL_UART_IRQHandler+0x60>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b90:	065b      	lsls	r3, r3, #25
 8002b92:	d501      	bpl.n	8002b98 <HAL_UART_IRQHandler+0x28>
 8002b94:	064b      	lsls	r3, r1, #25
 8002b96:	d41f      	bmi.n	8002bd8 <HAL_UART_IRQHandler+0x68>
}
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
      UART_Receive_IT(huart);
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	f7ff ffa6 	bl	8002aec <UART_Receive_IT>
      return;
 8002ba0:	e7fa      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba2:	075a      	lsls	r2, r3, #29
 8002ba4:	d541      	bpl.n	8002c2a <HAL_UART_IRQHandler+0xba>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d03f      	beq.n	8002c2a <HAL_UART_IRQHandler+0xba>
 8002baa:	e037      	b.n	8002c1c <HAL_UART_IRQHandler+0xac>
        UART_Receive_IT(huart);
 8002bac:	0020      	movs	r0, r4
 8002bae:	f7ff ff9d 	bl	8002aec <UART_Receive_IT>
 8002bb2:	e04d      	b.n	8002c50 <HAL_UART_IRQHandler+0xe0>
            HAL_UART_ErrorCallback(huart);
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	f001 ff63 	bl	8004a80 <HAL_UART_ErrorCallback>
 8002bba:	e7ed      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
          HAL_UART_ErrorCallback(huart);
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	f001 ff5f 	bl	8004a80 <HAL_UART_ErrorCallback>
 8002bc2:	e7e9      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
        HAL_UART_ErrorCallback(huart);
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	f001 ff5b 	bl	8004a80 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002bce:	e7e3      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
    UART_Transmit_IT(huart);
 8002bd0:	0020      	movs	r0, r4
 8002bd2:	f7ff ff47 	bl	8002a64 <UART_Transmit_IT>
    return;
 8002bd6:	e7df      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
    UART_EndTransmit_IT(huart);
 8002bd8:	0020      	movs	r0, r4
 8002bda:	f7ff ff7a 	bl	8002ad2 <UART_EndTransmit_IT>
    return;
 8002bde:	e7db      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
  cr3its = READ_REG(huart->Instance->CR3);
 8002be0:	6890      	ldr	r0, [r2, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002be2:	2501      	movs	r5, #1
 8002be4:	4028      	ands	r0, r5
 8002be6:	d103      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x80>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002be8:	2590      	movs	r5, #144	; 0x90
 8002bea:	006d      	lsls	r5, r5, #1
 8002bec:	4229      	tst	r1, r5
 8002bee:	d0cb      	beq.n	8002b88 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf0:	07dd      	lsls	r5, r3, #31
 8002bf2:	d506      	bpl.n	8002c02 <HAL_UART_IRQHandler+0x92>
 8002bf4:	05cd      	lsls	r5, r1, #23
 8002bf6:	d504      	bpl.n	8002c02 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002bf8:	2501      	movs	r5, #1
 8002bfa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002bfe:	432a      	orrs	r2, r5
 8002c00:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c02:	079a      	lsls	r2, r3, #30
 8002c04:	d5cd      	bpl.n	8002ba2 <HAL_UART_IRQHandler+0x32>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d00f      	beq.n	8002c2a <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002c0a:	6822      	ldr	r2, [r4, #0]
 8002c0c:	2502      	movs	r5, #2
 8002c0e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c12:	3502      	adds	r5, #2
 8002c14:	432a      	orrs	r2, r5
 8002c16:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c18:	421d      	tst	r5, r3
 8002c1a:	d006      	beq.n	8002c2a <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	2504      	movs	r5, #4
 8002c20:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c22:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c24:	3d02      	subs	r5, #2
 8002c26:	432a      	orrs	r2, r5
 8002c28:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002c2a:	071a      	lsls	r2, r3, #28
 8002c2c:	d509      	bpl.n	8002c42 <HAL_UART_IRQHandler+0xd2>
 8002c2e:	068a      	lsls	r2, r1, #26
 8002c30:	d401      	bmi.n	8002c36 <HAL_UART_IRQHandler+0xc6>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	2008      	movs	r0, #8
 8002c3a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c3c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c3e:	4302      	orrs	r2, r0
 8002c40:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c42:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c44:	2a00      	cmp	r2, #0
 8002c46:	d0a7      	beq.n	8002b98 <HAL_UART_IRQHandler+0x28>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	d501      	bpl.n	8002c50 <HAL_UART_IRQHandler+0xe0>
 8002c4c:	068b      	lsls	r3, r1, #26
 8002c4e:	d4ad      	bmi.n	8002bac <HAL_UART_IRQHandler+0x3c>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002c50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002c52:	071b      	lsls	r3, r3, #28
 8002c54:	d403      	bmi.n	8002c5e <HAL_UART_IRQHandler+0xee>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002c5a:	065b      	lsls	r3, r3, #25
 8002c5c:	d5b2      	bpl.n	8002bc4 <HAL_UART_IRQHandler+0x54>
        UART_EndRxTransfer(huart);
 8002c5e:	0020      	movs	r0, r4
 8002c60:	f7ff fb36 	bl	80022d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	0652      	lsls	r2, r2, #25
 8002c6a:	d5a7      	bpl.n	8002bbc <HAL_UART_IRQHandler+0x4c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	438a      	bics	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d09c      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x44>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c7a:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_UART_IRQHandler+0x124>)
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c7e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002c80:	f7fd fe27 	bl	80008d2 <HAL_DMA_Abort_IT>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d100      	bne.n	8002c8a <HAL_UART_IRQHandler+0x11a>
 8002c88:	e786      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c8a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002c8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c8e:	4798      	blx	r3
 8002c90:	e782      	b.n	8002b98 <HAL_UART_IRQHandler+0x28>
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	080024fd 	.word	0x080024fd

08002c98 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List>:
//
//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////
void		INITIALIZE_BUS_I2C_Existing_Slave_Devices_List()
{
 8002c98:	b510      	push	{r4, lr}
	///////////////////////////////////////////////
	//
	//  SET ALL SLAVES I2C BUS ADDRESSES
	//
	///////////////////////////////////////////////
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_1 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_1 ;
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x70>)
 8002c9c:	2244      	movs	r2, #68	; 0x44
 8002c9e:	705a      	strb	r2, [r3, #1]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_2 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_2 ;
 8002ca0:	3204      	adds	r2, #4
 8002ca2:	709a      	strb	r2, [r3, #2]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_3 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_3 ;
 8002ca4:	3204      	adds	r2, #4
 8002ca6:	70da      	strb	r2, [r3, #3]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_4 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_4 ;
 8002ca8:	3204      	adds	r2, #4
 8002caa:	711a      	strb	r2, [r3, #4]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_5 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_5 ;
 8002cac:	3204      	adds	r2, #4
 8002cae:	715a      	strb	r2, [r3, #5]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_6 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_6 ;
 8002cb0:	3204      	adds	r2, #4
 8002cb2:	719a      	strb	r2, [r3, #6]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_7 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_7 ;
 8002cb4:	3204      	adds	r2, #4
 8002cb6:	71da      	strb	r2, [r3, #7]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_8 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_8 ;
 8002cb8:	3204      	adds	r2, #4
 8002cba:	721a      	strb	r2, [r3, #8]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_9 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_9 ;
 8002cbc:	3204      	adds	r2, #4
 8002cbe:	725a      	strb	r2, [r3, #9]
	g_BUS_I2C_EXISTING_SLAVE_Devices_List[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_10 ] 	=  I2C_ADDRESS_SLAVE_DEVICE_10 ;
 8002cc0:	3204      	adds	r2, #4
 8002cc2:	729a      	strb	r2, [r3, #10]
	///////////////////////////////////////////////
	//
	//  SET ALL SLAVES I2C BUS ADDRESSES
	//
	///////////////////////////////////////////////
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_1 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_1 ;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x74>)
 8002cc6:	3292      	adds	r2, #146	; 0x92
 8002cc8:	805a      	strh	r2, [r3, #2]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_2 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_2 ;
 8002cca:	3205      	adds	r2, #5
 8002ccc:	809a      	strh	r2, [r3, #4]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_3 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_3 ;
 8002cce:	22fa      	movs	r2, #250	; 0xfa
 8002cd0:	00d2      	lsls	r2, r2, #3
 8002cd2:	80da      	strh	r2, [r3, #6]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_4 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_4 ;
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x78>)
 8002cd6:	811a      	strh	r2, [r3, #8]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_5 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_5 ;
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x7c>)
 8002cda:	815a      	strh	r2, [r3, #10]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_6 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_6 ;
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x80>)
 8002cde:	819a      	strh	r2, [r3, #12]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_7 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_7 ;
 8002ce0:	3264      	adds	r2, #100	; 0x64
 8002ce2:	81da      	strh	r2, [r3, #14]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_8 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_8 ;
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x84>)
 8002ce6:	821a      	strh	r2, [r3, #16]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_9 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_9 ;
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x88>)
 8002cea:	825a      	strh	r2, [r3, #18]
	g_BUS_I2C_SLAVES_Update_Times_mem[ INDEX_I2C_ADDRESS_SLAVE_DEVICE_10 ] 	=  I2C_UPDATE_TIME_SLAVE_DEVICE_10 ;
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x8c>)
 8002cee:	829a      	strh	r2, [r3, #20]
 8002cf0:	2301      	movs	r3, #1
	//
	for ( i = 1 ; i < I2C_MAXIMUM_SLAVES ; i++ ) {
		g_BUS_I2C_SLAVES_Update_Times[ i ] = g_BUS_I2C_SLAVES_Update_Times_mem[ i ] ;
 8002cf2:	4c06      	ldr	r4, [pc, #24]	; (8002d0c <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x74>)
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x90>)
 8002cf6:	0059      	lsls	r1, r3, #1
 8002cf8:	5b0a      	ldrh	r2, [r1, r4]
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	520a      	strh	r2, [r1, r0]
 8002cfe:	3301      	adds	r3, #1
	for ( i = 1 ; i < I2C_MAXIMUM_SLAVES ; i++ ) {
 8002d00:	2b0b      	cmp	r3, #11
 8002d02:	d1f8      	bne.n	8002cf6 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List+0x5e>
	}
}
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	200000c8 	.word	0x200000c8
 8002d0c:	200000f4 	.word	0x200000f4
 8002d10:	00000834 	.word	0x00000834
 8002d14:	00000898 	.word	0x00000898
 8002d18:	000008fc 	.word	0x000008fc
 8002d1c:	000009c4 	.word	0x000009c4
 8002d20:	00000a28 	.word	0x00000a28
 8002d24:	00000a8c 	.word	0x00000a8c
 8002d28:	200000d8 	.word	0x200000d8

08002d2c <Load_Prot_V2_Header_Data_to_Send_Request>:
//
//////////////////////////////////////////////////////////////////////////////
void		Load_Prot_V2_Header_Data_to_Send_Request( uint8_t CMD_ID , uint8_t I2C_Slave_Address )
{
	//   SOS THE DEVICE ID TO SEND its ONLY 1 and its the MOBILE USER ID = 2
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_DEVICE_TO_SEND ] 		= I2C_Slave_Address ; 	//
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <Load_Prot_V2_Header_Data_to_Send_Request+0x1c>)
 8002d2e:	7019      	strb	r1, [r3, #0]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_CURRENT_DEVICE ] 		= I2C_ADDRESS_MASTER ;       //   CURRENT MCU DEVICE ID
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	709a      	strb	r2, [r3, #2]
	g_I2C_TX_Buffer[ INDEX_V2_PROTOCOL_ID ] 					= UART_PROTOCOL_V2_ID ;		//   UART PROTOCOL ID
 8002d34:	3a3e      	subs	r2, #62	; 0x3e
 8002d36:	711a      	strb	r2, [r3, #4]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_CMD_RECYCLE_INDEX ] 		= 0 ;						//   Future Use
 8002d38:	2200      	movs	r2, #0
 8002d3a:	70da      	strb	r2, [r3, #3]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_CMD_PARAMETER_1 ] 		= 0 ;						//   Future Use
 8002d3c:	71da      	strb	r2, [r3, #7]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_CMD_PARAMETER_2 ] 		= 0 ;						//   Future Use
 8002d3e:	721a      	strb	r2, [r3, #8]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_COMMAND_ID ] 			= CMD_ID ;                  //
 8002d40:	7198      	strb	r0, [r3, #6]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_CMD_DATA_LENGTH ]		= 0 ;                       //
 8002d42:	715a      	strb	r2, [r3, #5]
	g_I2C_TX_Buffer[ INDEX_PROTOCOL_V2_CMD_WRITE_OR_READ ] 		= 0 ;
 8002d44:	705a      	strb	r2, [r3, #1]
//	g_I2C_TX_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT ] 		= MY_SUCCESS ;


}
 8002d46:	4770      	bx	lr
 8002d48:	200001a4 	.word	0x200001a4

08002d4c <SEND_I2C_Command_to_The_Slave>:
{
 8002d4c:	b510      	push	{r4, lr}
	Slave_Address = I2C_ADDRESS_SLAVE_DEVICE_1 + ( ( I2C_Slave_Index - 1 ) * 4 ) ;
 8002d4e:	3110      	adds	r1, #16
 8002d50:	008c      	lsls	r4, r1, #2
 8002d52:	b2e4      	uxtb	r4, r4
	Load_Prot_V2_Header_Data_to_Send_Request( CMD_ID , Slave_Address );
 8002d54:	0021      	movs	r1, r4
 8002d56:	f7ff ffe9 	bl	8002d2c <Load_Prot_V2_Header_Data_to_Send_Request>
	g_I2C_Master_TX_Complete = MY_FALSE ;
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <SEND_I2C_Command_to_The_Slave+0x28>)
 8002d5e:	701a      	strb	r2, [r3, #0]
	if	( HAL_I2C_Master_Transmit_IT( &hi2c1 , Slave_Address , (uint8_t*)g_I2C_TX_Buffer , PROTOCOL_V2_MAX_PACKET_LENGTH ) != HAL_OK ) {
 8002d60:	b2a1      	uxth	r1, r4
 8002d62:	230b      	movs	r3, #11
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <SEND_I2C_Command_to_The_Slave+0x2c>)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <SEND_I2C_Command_to_The_Slave+0x30>)
 8002d68:	f7fe f950 	bl	800100c <HAL_I2C_Master_Transmit_IT>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d000      	beq.n	8002d72 <SEND_I2C_Command_to_The_Slave+0x26>
		asm("nop");
 8002d70:	46c0      	nop			; (mov r8, r8)
}
 8002d72:	bd10      	pop	{r4, pc}
 8002d74:	20000063 	.word	0x20000063
 8002d78:	200001a4 	.word	0x200001a4
 8002d7c:	2000014c 	.word	0x2000014c

08002d80 <TASK_BUS_I2C_Commands_Execute>:
{
 8002d80:	b510      	push	{r4, lr}
	if ( g_Tasks_Times[ TASK_INDEX_BUS_I2C_TICK_TIME ] == 0 ) {
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <TASK_BUS_I2C_Commands_Execute+0x168>)
 8002d84:	8b9b      	ldrh	r3, [r3, #28]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d131      	bne.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
		g_Tasks_Times[ TASK_INDEX_BUS_I2C_TICK_TIME ] = TASK_INTERVAL_TIME_FOR_BUS_I2C_TICK ;
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <TASK_BUS_I2C_Commands_Execute+0x168>)
 8002d90:	839a      	strh	r2, [r3, #28]
		g_BUS_I2C_Tick_Clock_Value++ ;
 8002d92:	4a56      	ldr	r2, [pc, #344]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002d94:	8813      	ldrh	r3, [r2, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	8013      	strh	r3, [r2, #0]
		if   		( ( g_BUS_I2C_Tick_Clock_Value >= 0 ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_MASTER_ONLY )  ){
 8002d9c:	8813      	ldrh	r3, [r2, #0]
 8002d9e:	8813      	ldrh	r3, [r2, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b1d      	cmp	r3, #29
 8002da4:	d923      	bls.n	8002dee <TASK_BUS_I2C_Commands_Execute+0x6e>
		else if     ( ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_MASTER_ONLY ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_EMERGENCY )  ){
 8002da6:	4b51      	ldr	r3, [pc, #324]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b1d      	cmp	r3, #29
 8002dae:	d904      	bls.n	8002dba <TASK_BUS_I2C_Commands_Execute+0x3a>
 8002db0:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b3b      	cmp	r3, #59	; 0x3b
 8002db8:	d91b      	bls.n	8002df2 <TASK_BUS_I2C_Commands_Execute+0x72>
		else if     ( ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_EMERGENCY ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_IDENTIFY_NEW_DEVICES ) ){
 8002dba:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b3b      	cmp	r3, #59	; 0x3b
 8002dc2:	d938      	bls.n	8002e36 <TASK_BUS_I2C_Commands_Execute+0xb6>
 8002dc4:	4b49      	ldr	r3, [pc, #292]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b63      	cmp	r3, #99	; 0x63
 8002dcc:	d833      	bhi.n	8002e36 <TASK_BUS_I2C_Commands_Execute+0xb6>
			if  ( g_I2C_Identification_PERIOD_Cycles >= BUS_I2C_IDENTIFICATION_SLAVES_PERIOD_CYCLES ) {
 8002dce:	4b48      	ldr	r3, [pc, #288]	; (8002ef0 <TASK_BUS_I2C_Commands_Execute+0x170>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d90b      	bls.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
				if 	( g_I2C_Identify_New_Slave_Device_Procedure_Step == 0 )  {
 8002dd8:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <TASK_BUS_I2C_Commands_Execute+0x174>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <TASK_BUS_I2C_Commands_Execute+0x76>
					g_I2C_Identify_New_Slave_Device_Procedure_Step = INDEX_I2C_ADDRESS_SLAVE_DEVICE_1 ;
 8002de0:	2201      	movs	r2, #1
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <TASK_BUS_I2C_Commands_Execute+0x174>)
 8002de4:	701a      	strb	r2, [r3, #0]
				g_I2C_Identify_New_Slave_Device_Accepted = MY_FALSE ;
 8002de6:	2200      	movs	r2, #0
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <TASK_BUS_I2C_Commands_Execute+0x178>)
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e000      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
			asm("nop");
 8002dee:	46c0      	nop			; (mov r8, r8)
}
 8002df0:	bd10      	pop	{r4, pc}
			asm("nop");
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	e7fc      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
				else if   ( g_I2C_Identify_New_Slave_Device_Procedure_Step < I2C_MAXIMUM_SLAVES )  {
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <TASK_BUS_I2C_Commands_Execute+0x174>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b0a      	cmp	r3, #10
 8002dfe:	d80d      	bhi.n	8002e1c <TASK_BUS_I2C_Commands_Execute+0x9c>
					if  (  g_I2C_Identify_New_Slave_Device_Accepted == MY_TRUE )  {
 8002e00:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <TASK_BUS_I2C_Commands_Execute+0x178>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d007      	beq.n	8002e18 <TASK_BUS_I2C_Commands_Execute+0x98>
						asm("nop");
 8002e08:	46c0      	nop			; (mov r8, r8)
					g_I2C_Identify_New_Slave_Device_Procedure_Step++ ;
 8002e0a:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <TASK_BUS_I2C_Commands_Execute+0x174>)
 8002e0c:	7813      	ldrb	r3, [r2, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	7013      	strb	r3, [r2, #0]
					if   ( g_I2C_Identify_New_Slave_Device_Procedure_Step < I2C_MAXIMUM_SLAVES )  {
 8002e14:	7813      	ldrb	r3, [r2, #0]
 8002e16:	e7e6      	b.n	8002de6 <TASK_BUS_I2C_Commands_Execute+0x66>
						asm("nop");
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	e7f6      	b.n	8002e0a <TASK_BUS_I2C_Commands_Execute+0x8a>
				else if ( g_I2C_Identify_New_Slave_Device_Procedure_Step >= I2C_MAXIMUM_SLAVES ) {
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <TASK_BUS_I2C_Commands_Execute+0x174>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b0a      	cmp	r3, #10
 8002e24:	d9df      	bls.n	8002de6 <TASK_BUS_I2C_Commands_Execute+0x66>
					g_I2C_Identification_PERIOD_Cycles 				= 0 ;
 8002e26:	2300      	movs	r3, #0
 8002e28:	4a31      	ldr	r2, [pc, #196]	; (8002ef0 <TASK_BUS_I2C_Commands_Execute+0x170>)
 8002e2a:	7013      	strb	r3, [r2, #0]
					g_BUS_I2C_Synchronization_PERIOD_Cycles			= 0 ;		// AVOID TO RE - SYNCHRONIXE THE SLAVES IN THE SAME PERIOD OF TIME
 8002e2c:	4a33      	ldr	r2, [pc, #204]	; (8002efc <TASK_BUS_I2C_Commands_Execute+0x17c>)
 8002e2e:	7013      	strb	r3, [r2, #0]
					g_I2C_Identify_New_Slave_Device_Procedure_Step 	= 0 ;
 8002e30:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <TASK_BUS_I2C_Commands_Execute+0x174>)
 8002e32:	7013      	strb	r3, [r2, #0]
 8002e34:	e7d7      	b.n	8002de6 <TASK_BUS_I2C_Commands_Execute+0x66>
		else if     ( ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_IDENTIFY_NEW_DEVICES ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_SILENCE_PAUSE )  ){
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b63      	cmp	r3, #99	; 0x63
 8002e3e:	d904      	bls.n	8002e4a <TASK_BUS_I2C_Commands_Execute+0xca>
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b8b      	cmp	r3, #139	; 0x8b
 8002e48:	d91b      	bls.n	8002e82 <TASK_BUS_I2C_Commands_Execute+0x102>
		else if     ( ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_SILENCE_PAUSE ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_SLAVES_SYNCHRONIZATION )  ){
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b8b      	cmp	r3, #139	; 0x8b
 8002e52:	d918      	bls.n	8002e86 <TASK_BUS_I2C_Commands_Execute+0x106>
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <TASK_BUS_I2C_Commands_Execute+0x180>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d812      	bhi.n	8002e86 <TASK_BUS_I2C_Commands_Execute+0x106>
			if   ( g_BUS_I2C_Synchronization_PERIOD_Cycles >= BUS_I2C_SYNCHRONIZE_SLAVES_PERIOD_CYCLES ) {
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <TASK_BUS_I2C_Commands_Execute+0x17c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d9c2      	bls.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
				g_BUS_I2C_Synchronization_PERIOD_Cycles = 0 ;
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <TASK_BUS_I2C_Commands_Execute+0x17c>)
 8002e6e:	701a      	strb	r2, [r3, #0]
				SEND_I2C_Command_to_The_Slave( BUS_I2C_CMD_SLAVE_SYNCHRONIZATION , INDEX_I2C_ADDRESS_SLAVE_DEVICE_1 );
 8002e70:	2101      	movs	r1, #1
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7ff ff6a 	bl	8002d4c <SEND_I2C_Command_to_The_Slave>
				HAL_GPIO_TogglePin( MCU_PCB_RED_LED_GPIO_Port , MCU_PCB_RED_LED_Pin ) ;
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	4822      	ldr	r0, [pc, #136]	; (8002f04 <TASK_BUS_I2C_Commands_Execute+0x184>)
 8002e7c:	f7fd ffd2 	bl	8000e24 <HAL_GPIO_TogglePin>
 8002e80:	e7b6      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
			asm("nop");
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	e7b4      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
		else if     ( ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_HEADER_END ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_1ST_SLAVE_DEVICE ) ) {
 8002e86:	4b19      	ldr	r3, [pc, #100]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <TASK_BUS_I2C_Commands_Execute+0x180>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d905      	bls.n	8002e9e <TASK_BUS_I2C_Commands_Execute+0x11e>
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <TASK_BUS_I2C_Commands_Execute+0x188>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d921      	bls.n	8002ee2 <TASK_BUS_I2C_Commands_Execute+0x162>
		else if     ( ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_1ST_SLAVE_DEVICE ) && ( g_BUS_I2C_Tick_Clock_Value < BUS_I2C_WINDOW_1ST_SECURITY_TIME ) ) {
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <TASK_BUS_I2C_Commands_Execute+0x188>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d906      	bls.n	8002eb8 <TASK_BUS_I2C_Commands_Execute+0x138>
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <TASK_BUS_I2C_Commands_Execute+0x18c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d800      	bhi.n	8002eb8 <TASK_BUS_I2C_Commands_Execute+0x138>
 8002eb6:	e79b      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
		else if     ( g_BUS_I2C_Tick_Clock_Value >= BUS_I2C_WINDOW_LAST_SLAVE_DEVICE )  {
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <TASK_BUS_I2C_Commands_Execute+0x190>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d800      	bhi.n	8002ec6 <TASK_BUS_I2C_Commands_Execute+0x146>
 8002ec4:	e794      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
			g_BUS_I2C_Tick_Clock_Value 		= 0 ;
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <TASK_BUS_I2C_Commands_Execute+0x16c>)
 8002eca:	801a      	strh	r2, [r3, #0]
			g_BUS_I2C_Synchronization_PERIOD_Cycles++ ;
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <TASK_BUS_I2C_Commands_Execute+0x17c>)
 8002ece:	7813      	ldrb	r3, [r2, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	7013      	strb	r3, [r2, #0]
			g_I2C_Identification_PERIOD_Cycles++ ;
 8002ed6:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <TASK_BUS_I2C_Commands_Execute+0x170>)
 8002ed8:	7813      	ldrb	r3, [r2, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	7013      	strb	r3, [r2, #0]
}
 8002ee0:	e786      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
			asm("nop");
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	e784      	b.n	8002df0 <TASK_BUS_I2C_Commands_Execute+0x70>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	20000128 	.word	0x20000128
 8002eec:	2000003e 	.word	0x2000003e
 8002ef0:	20000040 	.word	0x20000040
 8002ef4:	20000042 	.word	0x20000042
 8002ef8:	20000041 	.word	0x20000041
 8002efc:	2000003c 	.word	0x2000003c
 8002f00:	0000035b 	.word	0x0000035b
 8002f04:	48000400 	.word	0x48000400
 8002f08:	00000361 	.word	0x00000361
 8002f0c:	00000375 	.word	0x00000375
 8002f10:	00000465 	.word	0x00000465

08002f14 <LOAD_Header_Data_On_Buffer_to_Send_Response>:
//////////////////////////////////////////////////////////////////////////////////
void		LOAD_Header_Data_On_Buffer_to_Send_Response( uint8_t  Write_Read_Or_Request_Response , uint8_t  Success_Or_Fail )
{

	//   SOS THE DEVICE ID TO SEND its ONLY 1 and its the MOBILE USER ID = 2
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_DEVICE_TO_SEND ] 		= MOBILE_USER_DEVICE_ID ; 	//
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <LOAD_Header_Data_On_Buffer_to_Send_Response+0x30>)
 8002f16:	220a      	movs	r2, #10
 8002f18:	701a      	strb	r2, [r3, #0]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CURRENT_DEVICE ] 		= CURRENT_DEVICE_ID ;       //   CURRENT MCU DEVICE ID
 8002f1a:	3a01      	subs	r2, #1
 8002f1c:	709a      	strb	r2, [r3, #2]
	g_Process_Buffer[ INDEX_UART_V2_PROTOCOL_ID ] 					= UART_PROTOCOL_V2_ID ;		//   UART PROTOCOL ID
 8002f1e:	3a07      	subs	r2, #7
 8002f20:	711a      	strb	r2, [r3, #4]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RECYCLE_INDEX ] 	= 0 ;						//   Future Use
 8002f22:	2200      	movs	r2, #0
 8002f24:	70da      	strb	r2, [r3, #3]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_PARAMETER_1 ] 		= 0 ;						//   Future Use
 8002f26:	71da      	strb	r2, [r3, #7]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_PARAMETER_2 ] 		= 0 ;						//   Future Use
 8002f28:	721a      	strb	r2, [r3, #8]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_COMMAND_ID ] 			= 0 ;                       //
 8002f2a:	719a      	strb	r2, [r3, #6]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_DATA_LENGTH ]		= 0 ;                       //
 8002f2c:	715a      	strb	r2, [r3, #5]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_WRITE_OR_READ ] 	= Write_Read_Or_Request_Response ;
 8002f2e:	7058      	strb	r0, [r3, #1]

	if  ( Success_Or_Fail == MY_SUCCESS ) {
 8002f30:	2901      	cmp	r1, #1
 8002f32:	d003      	beq.n	8002f3c <LOAD_Header_Data_On_Buffer_to_Send_Response+0x28>
		g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT ] 		= MY_SUCCESS ;
	}
	else {
		g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT ] 		= MY_FAIL ;
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <LOAD_Header_Data_On_Buffer_to_Send_Response+0x30>)
 8002f38:	725a      	strb	r2, [r3, #9]
	}
}
 8002f3a:	4770      	bx	lr
		g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT ] 		= MY_SUCCESS ;
 8002f3c:	3201      	adds	r2, #1
 8002f3e:	725a      	strb	r2, [r3, #9]
 8002f40:	e7fb      	b.n	8002f3a <LOAD_Header_Data_On_Buffer_to_Send_Response+0x26>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	200002c8 	.word	0x200002c8

08002f48 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM>:
//
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////			N_14
void		LOAD_Zones_Status_On_Buffer_to_Send_INFORM()
{
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	2300      	movs	r3, #0
		//
		//  TEST THE CURRENT ZONE CONFIGURATION AND
		//  CURRENT STATUS. AND Decide which Value must be send
		//
		///////////////////////////////////////////////////////////
		if 			( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_DISABLE ) {
 8002f4c:	4e15      	ldr	r6, [pc, #84]	; (8002fa4 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x5c>)
			Value_To_Send = MONITORING_ZONE_VALUE_DISABLE ;
 8002f4e:	2004      	movs	r0, #4
		Current_Bit_Zone = ( uint8_t )( 1 << i );
 8002f50:	2701      	movs	r7, #1
		///////////////////////////////////////////////////
		//
		//  LOAD THE CORRESPONDING ZONE VALUE TO SEND
		//
		///////////////////////////////////////////////////
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] = Value_To_Send ;
 8002f52:	4d15      	ldr	r5, [pc, #84]	; (8002fa8 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x60>)
 8002f54:	e00e      	b.n	8002f74 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x2c>
		Current_Bit_Zone = ( uint8_t )( 1 << i );
 8002f56:	003a      	movs	r2, r7
 8002f58:	408a      	lsls	r2, r1
 8002f5a:	0011      	movs	r1, r2
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	4011      	ands	r1, r2
		else if 	( ( Current_Bit_Zone & g_Alarm_on_Zones  ) > 0 ) {
 8002f60:	4a12      	ldr	r2, [pc, #72]	; (8002fac <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x64>)
 8002f62:	8814      	ldrh	r4, [r2, #0]
			Value_To_Send = MONITORING_ZONE_VALUE_IN_ALARM ;
 8002f64:	2203      	movs	r2, #3
		else if 	( ( Current_Bit_Zone & g_Alarm_on_Zones  ) > 0 ) {
 8002f66:	420c      	tst	r4, r1
 8002f68:	d014      	beq.n	8002f94 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x4c>
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] = Value_To_Send ;
 8002f6a:	1959      	adds	r1, r3, r5
 8002f6c:	728a      	strb	r2, [r1, #10]
 8002f6e:	3301      	adds	r3, #1
	for ( i = 0 ; i < ( ZONES_MAXIMUM - 1 ) ; ++i ) {
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d015      	beq.n	8002fa0 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x58>
		Current_Bit_Zone = ( uint8_t )( 1 << i );
 8002f74:	0019      	movs	r1, r3
		if 			( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_DISABLE ) {
 8002f76:	5cf4      	ldrb	r4, [r6, r3]
			Value_To_Send = MONITORING_ZONE_VALUE_DISABLE ;
 8002f78:	0002      	movs	r2, r0
		if 			( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_DISABLE ) {
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	d0f5      	beq.n	8002f6a <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x22>
		else if 	( 	( g_Switch_Stable_Status != SWITCH_OFF )
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x68>)
 8002f80:	8812      	ldrh	r2, [r2, #0]
 8002f82:	b292      	uxth	r2, r2
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d0e6      	beq.n	8002f56 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0xe>
				 	&&  ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_BYPASS ) ) {
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x6c>)
 8002f8a:	5cd2      	ldrb	r2, [r2, r3]
 8002f8c:	2a05      	cmp	r2, #5
 8002f8e:	d1e2      	bne.n	8002f56 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0xe>
			Value_To_Send = MONITORING_ZONE_VALUE_BYPASSED ;
 8002f90:	2202      	movs	r2, #2
 8002f92:	e7ea      	b.n	8002f6a <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x22>
			if ( ( g_Zones_Wire_AND_Wireless & Current_Bit_Zone ) > 0 )   {			//   >>       >>
 8002f94:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x70>)
 8002f96:	8812      	ldrh	r2, [r2, #0]
 8002f98:	400a      	ands	r2, r1
 8002f9a:	4252      	negs	r2, r2
			Value_To_Send = MONITORING_ZONE_VALUE_DISABLE ;
 8002f9c:	0fd2      	lsrs	r2, r2, #31
 8002f9e:	e7e4      	b.n	8002f6a <LOAD_Zones_Status_On_Buffer_to_Send_INFORM+0x22>
	}
}
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	200002c0 	.word	0x200002c0
 8002fa8:	200002c8 	.word	0x200002c8
 8002fac:	2000004c 	.word	0x2000004c
 8002fb0:	20000078 	.word	0x20000078
 8002fb4:	2000031c 	.word	0x2000031c
 8002fb8:	20000088 	.word	0x20000088

08002fbc <Clear_Rx_Buffer>:
//
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////
void		Clear_Rx_Buffer()
{
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <Clear_Rx_Buffer+0x14>)
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	3108      	adds	r1, #8
	uint8_t   i ;
	/////////////////////////////////////////////////////////////
	//
	/////////////////////////////////////////////////////////////
	for ( i = 0 ; i < RECEIVE_COMMAND_PACKET_DATA_LENGTH ; i++ ) {
		g_RxBuffer_8bit[ i ] = END_POINT_8BIT ;
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
	for ( i = 0 ; i < RECEIVE_COMMAND_PACKET_DATA_LENGTH ; i++ ) {
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d1fb      	bne.n	8002fc4 <Clear_Rx_Buffer+0x8>
	}
}
 8002fcc:	4770      	bx	lr
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	20000358 	.word	0x20000358

08002fd4 <LOAD_The_Default_prg_Values_to_be_used_in_the_Flash_Drivers>:
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
void        LOAD_The_Default_prg_Values_to_be_used_in_the_Flash_Drivers()
{
	g_Default_Programming_Data_Array[ PROGR_DATA_1_INDEX ] 	= DEFAULT_EXIT_DELAY_TIME ;  // ENTRY_DELAY_TIME ; EXIT_DELAY_TIME ALARM_TIME
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <LOAD_The_Default_prg_Values_to_be_used_in_the_Flash_Drivers+0x30>)
 8002fd6:	2246      	movs	r2, #70	; 0x46
 8002fd8:	801a      	strh	r2, [r3, #0]
	g_Default_Programming_Data_Array[ PROGR_DATA_2_INDEX ] 	= DEFAULT_ENTRY_DELAY_TIME ;
 8002fda:	3a2d      	subs	r2, #45	; 0x2d
 8002fdc:	805a      	strh	r2, [r3, #2]
	g_Default_Programming_Data_Array[ PROGR_DATA_3_INDEX ] 	= DEFAULT_ALARM_TIME ;
 8002fde:	329b      	adds	r2, #155	; 0x9b
 8002fe0:	809a      	strh	r2, [r3, #4]
	g_Default_Programming_Data_Array[ PROGR_DATA_4_INDEX ] 	= ZONE_TYPE_DELAY ;
 8002fe2:	3ab3      	subs	r2, #179	; 0xb3
 8002fe4:	80da      	strh	r2, [r3, #6]
	g_Default_Programming_Data_Array[ PROGR_DATA_5_INDEX ] 	= ZONE_TYPE_FOLLOW ;
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	8119      	strh	r1, [r3, #8]
	g_Default_Programming_Data_Array[ PROGR_DATA_6_INDEX ] 	= ZONE_TYPE_IMMIDIATE ;
 8002fea:	3202      	adds	r2, #2
 8002fec:	815a      	strh	r2, [r3, #10]
	g_Default_Programming_Data_Array[ PROGR_DATA_7_INDEX ] 	= ZONE_TYPE_IMMIDIATE ;
 8002fee:	819a      	strh	r2, [r3, #12]
	g_Default_Programming_Data_Array[ PROGR_DATA_8_INDEX ] 	= DEFAULT_ALARM_CONTROL_ON_OFF_MODE  ;		//  >>   ADDED
 8002ff0:	81d9      	strh	r1, [r3, #14]
	g_Default_Programming_Data_Array[ PROGR_DATA_9_INDEX ] 	= ( uint16_t )( PGM_ENABLE_ON_REGULAR_ARM | PGM_ENABLE_ON_DISARM ) ;
 8002ff2:	821a      	strh	r2, [r3, #16]
	g_Default_Programming_Data_Array[ PROGR_DATA_10_INDEX ] = MY_FALSE ;
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	825a      	strh	r2, [r3, #18]
	g_Default_Programming_Data_Array[ PROGR_DATA_11_INDEX ] = AUTO_ARM_DISABLE_VALUE ;					//   N_18     added
 8002ff8:	829a      	strh	r2, [r3, #20]


	g_Default_Programming_Data_Array[ PROGR_DATA_12_INDEX ] = DEFAULT_WIRELESS_AS_PANIC_ZONE_5 ;					//   N_50     ADDED
 8002ffa:	310e      	adds	r1, #14
 8002ffc:	82d9      	strh	r1, [r3, #22]
	g_Default_Programming_Data_Array[ PROGR_DATA_13_INDEX ] = DEFAULT_CHIME_IN_ZONES_DISABLE  ;					//    >>        >>
 8002ffe:	831a      	strh	r2, [r3, #24]
}
 8003000:	4770      	bx	lr
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	20000474 	.word	0x20000474

08003008 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT>:
//
//
//////////////////////////////////////////////////////////////////////////////////				//		n_7    added
void		EXECUTE_Remote_Control_Signal_on_PGM1_OUT()
{
	if  ( ( g_REMOTE_Control_Signal_times ) && ( g_ALARM_Counting_Time == 0 ) && ( g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] == 0 ) ) {
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x88>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d025      	beq.n	800305c <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x54>
 8003010:	4b20      	ldr	r3, [pc, #128]	; (8003094 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x8c>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d120      	bne.n	800305c <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x54>
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x90>)
 800301c:	8a1b      	ldrh	r3, [r3, #16]
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d11b      	bne.n	800305c <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x54>
		if  ( ( g_REMOTE_Control_Signal_times == 4 ) || ( g_REMOTE_Control_Signal_times == 2 ) ) {
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x88>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d018      	beq.n	800305e <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x56>
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x88>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d014      	beq.n	800305e <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x56>
			//
		}
		else {

			// g_System_BASE_Timers[ INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = REMOTE_CONTROL_SIGNAL_TIME_OFF ;	//		N_7   REMOVED
			g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = REMOTE_CONTROL_SIGNAL_TIME_OFF ;		//       >>     ADDED
 8003034:	22c8      	movs	r2, #200	; 0xc8
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x90>)
 8003038:	821a      	strh	r2, [r3, #16]

			//////////////////////////////////////////////////////////////////
			//   TRIGGER THE SIREN ONLY IF ITS PROGRAMMED BY THE INSTELLER
			//////////////////////////////////////////////////////////////////
			if  ( g_SIREN_Follow_Remote_Control == MY_TRUE ) {
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x94>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d020      	beq.n	8003084 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x7c>
				SIEREN_OFF();
			}
			//////////////////////////////////////////////////////////////////////////////
			//   TRIGGER THE PGM OUT IF PREVIOUSLY ENABLED BY THE PROGRAMMING LOGIC
			//////////////////////////////////////////////////////////////////////////////
			PGM_OUTPUT_OFF();
 8003042:	2201      	movs	r2, #1
 8003044:	2390      	movs	r3, #144	; 0x90
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
			//
		}
		if   ( g_REMOTE_Control_Signal_times ) {
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x88>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x54>
			g_REMOTE_Control_Signal_times-- ;
 8003052:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x88>)
 8003054:	7813      	ldrb	r3, [r2, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	7013      	strb	r3, [r2, #0]
		}
	}

}
 800305c:	4770      	bx	lr
			g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = REMOTE_CONTROL_SIGNAL_TIME_ON ;		//       >>     ADDED
 800305e:	22fa      	movs	r2, #250	; 0xfa
 8003060:	0052      	lsls	r2, r2, #1
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x90>)
 8003064:	821a      	strh	r2, [r3, #16]
			if  ( g_SIREN_Follow_Remote_Control == MY_TRUE ) {
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x94>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d004      	beq.n	8003078 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x70>
			PGM_OUTPUT_ON();
 800306e:	2201      	movs	r2, #1
 8003070:	2390      	movs	r3, #144	; 0x90
 8003072:	05db      	lsls	r3, r3, #23
 8003074:	619a      	str	r2, [r3, #24]
 8003076:	e7e8      	b.n	800304a <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x42>
				SIEREN_ON();
 8003078:	3af3      	subs	r2, #243	; 0xf3
 800307a:	3aff      	subs	r2, #255	; 0xff
 800307c:	2390      	movs	r3, #144	; 0x90
 800307e:	05db      	lsls	r3, r3, #23
 8003080:	619a      	str	r2, [r3, #24]
 8003082:	e7f4      	b.n	800306e <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x66>
				SIEREN_OFF();
 8003084:	3ac6      	subs	r2, #198	; 0xc6
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e7d9      	b.n	8003042 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT+0x3a>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000068 	.word	0x20000068
 8003094:	20000048 	.word	0x20000048
 8003098:	20000128 	.word	0x20000128
 800309c:	2000006e 	.word	0x2000006e

080030a0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time>:
//////////////////////////////////////////////////////////////////////////////////
void		Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time( uint16_t Zone_Bit_No )
{
	uint8_t   i = 0 ;
	///////////////////////////////////
	g_Alarm_on_Zones  |= Zone_Bit_No ;   // SETUP THE THE ALARM BIT FLAG IN ALL OF THE CASES
 80030a0:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x44>)
 80030a2:	8813      	ldrh	r3, [r2, #0]
 80030a4:	4303      	orrs	r3, r0
 80030a6:	8013      	strh	r3, [r2, #0]
	//////////////////////////////////////////////////////////////////////////////////////////
	//  FOUND THE ZONE INDEX ONLY IF THE GIVEN FLAG IS >0 AND THE FLAG IT IS NOT ALREADY SET
	//////////////////////////////////////////////////////////////////////////////////////////
	if 	((( g_Current_Alarm_Time_ZONES_given & Zone_Bit_No ) == 0 ) && ( Zone_Bit_No )) {
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x48>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	4203      	tst	r3, r0
 80030ae:	d117      	bne.n	80030e0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x40>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d015      	beq.n	80030e0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x40>
		///////////////////////////////
		//  SETUP THE FLAG FIRST
		///////////////////////////////
		g_Current_Alarm_Time_ZONES_given  |= Zone_Bit_No ;
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x48>)
 80030b6:	8813      	ldrh	r3, [r2, #0]
 80030b8:	4303      	orrs	r3, r0
 80030ba:	8013      	strh	r3, [r2, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	e000      	b.n	80030c2 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x22>
		///////////////////////////////////////////////////
		//   SCANNING AND FOUND THE ZONE INDEX
		///////////////////////////////////////////////////
		while ( Zone_Bit_No )	{
			 Zone_Bit_No = (( uint16_t )Zone_Bit_No >> 1 );
			 i++ ;
 80030c0:	001a      	movs	r2, r3
			 Zone_Bit_No = (( uint16_t )Zone_Bit_No >> 1 );
 80030c2:	0840      	lsrs	r0, r0, #1
			 i++ ;
 80030c4:	1c53      	adds	r3, r2, #1
 80030c6:	b2db      	uxtb	r3, r3
		while ( Zone_Bit_No )	{
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d1f9      	bne.n	80030c0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x20>
		 }
		i--;
		if ( g_ALARMS_Counter_In_one_ARM_Sequence[ i ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )	{
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x4c>)
 80030ce:	5c9b      	ldrb	r3, [r3, r2]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d804      	bhi.n	80030e0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x40>
			g_ALARMS_Counter_In_one_ARM_Sequence[ i ]++ ;
 80030d6:	4905      	ldr	r1, [pc, #20]	; (80030ec <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time+0x4c>)
 80030d8:	5c8b      	ldrb	r3, [r1, r2]
 80030da:	3301      	adds	r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	548b      	strb	r3, [r1, r2]
		}
	}
}
 80030e0:	4770      	bx	lr
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	2000004c 	.word	0x2000004c
 80030e8:	20000054 	.word	0x20000054
 80030ec:	2000046c 	.word	0x2000046c

080030f0 <START_STOP_ALARM>:
void		START_STOP_ALARM( uint8_t Start_or_Stop , uint16_t  Zone_Bit_Flag  )
{
	/////////////////////////////////////
	//  START ALARM INITIAL SETTINGS
	/////////////////////////////////////
	if 		( Start_or_Stop == MY_START )	{
 80030f0:	2801      	cmp	r0, #1
 80030f2:	d019      	beq.n	8003128 <START_STOP_ALARM+0x38>
		SIEREN_ON();
	}
	/////////////////////////////////////
	//  STOP ALARM INITIAL SETTINGS
	/////////////////////////////////////
	else if ( Start_or_Stop == MY_STOP )	{
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d116      	bne.n	8003126 <START_STOP_ALARM+0x36>
		g_ALARM_Counting_Time 				= 0 ;
 80030f8:	2300      	movs	r3, #0
 80030fa:	2200      	movs	r2, #0
 80030fc:	4918      	ldr	r1, [pc, #96]	; (8003160 <START_STOP_ALARM+0x70>)
 80030fe:	800b      	strh	r3, [r1, #0]
		//
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_ALARM_DISCOUNT_TIME ] = 0 ;   //  RESET ( STOP ) TO DISCOUNT THE ALARM TIME   N_57
 8003100:	4918      	ldr	r1, [pc, #96]	; (8003164 <START_STOP_ALARM+0x74>)
 8003102:	600b      	str	r3, [r1, #0]
// 		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_EXIT_DELAY ]			= 0 ;  	//  This is done on the ROUTINE ->  Switch_ON_OFF_Alarm_Settings
		//
		g_Alarm_on_Zones					= 0 ;
 8003104:	4918      	ldr	r1, [pc, #96]	; (8003168 <START_STOP_ALARM+0x78>)
 8003106:	800b      	strh	r3, [r1, #0]
		g_Entry_Exit_Time_Delay				= 0 ;
 8003108:	4918      	ldr	r1, [pc, #96]	; (800316c <START_STOP_ALARM+0x7c>)
 800310a:	800b      	strh	r3, [r1, #0]
		g_Current_Alarm_Time_ZONES_given 	= 0 ;
 800310c:	4918      	ldr	r1, [pc, #96]	; (8003170 <START_STOP_ALARM+0x80>)
 800310e:	800b      	strh	r3, [r1, #0]
		g_Follow_Zone_has_Open_mem 			= MY_NO ;
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <START_STOP_ALARM+0x84>)
 8003112:	701a      	strb	r2, [r3, #0]
		g_Delay_Zone_has_Open_mem 			= MY_NO ;
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <START_STOP_ALARM+0x88>)
 8003116:	701a      	strb	r2, [r3, #0]
		BUZZER_OFF();
 8003118:	2390      	movs	r3, #144	; 0x90
 800311a:	05db      	lsls	r3, r3, #23
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	629a      	str	r2, [r3, #40]	; 0x28
		SIEREN_OFF();
 8003122:	2202      	movs	r2, #2
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8003126:	4770      	bx	lr
		g_ALARM_Counting_Time 													=  ( uint16_t )(( g_Alarm_Time * 60 ) + 1 );      //  N_57 Changed
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <START_STOP_ALARM+0x8c>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	223c      	movs	r2, #60	; 0x3c
 800312e:	4353      	muls	r3, r2
 8003130:	3301      	adds	r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <START_STOP_ALARM+0x70>)
 8003136:	8013      	strh	r3, [r2, #0]
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_ALARM_DISCOUNT_TIME ]		=  g_ALARM_Counting_Time ;  			// Convert MINUTES to SECONDS
 8003138:	8813      	ldrh	r3, [r2, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	4a09      	ldr	r2, [pc, #36]	; (8003164 <START_STOP_ALARM+0x74>)
 800313e:	6013      	str	r3, [r2, #0]
		g_Alarm_on_Zones 						   |=  Zone_Bit_Flag ;
 8003140:	4a09      	ldr	r2, [pc, #36]	; (8003168 <START_STOP_ALARM+0x78>)
 8003142:	8813      	ldrh	r3, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	8013      	strh	r3, [r2, #0]
		g_Current_Alarm_Time_ZONES_given		   |=  Zone_Bit_Flag ;
 8003148:	4a09      	ldr	r2, [pc, #36]	; (8003170 <START_STOP_ALARM+0x80>)
 800314a:	8813      	ldrh	r3, [r2, #0]
 800314c:	4319      	orrs	r1, r3
 800314e:	8011      	strh	r1, [r2, #0]
		BUZZER_ON();
 8003150:	2390      	movs	r3, #144	; 0x90
 8003152:	05db      	lsls	r3, r3, #23
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	619a      	str	r2, [r3, #24]
		SIEREN_ON();
 800315a:	2202      	movs	r2, #2
 800315c:	619a      	str	r2, [r3, #24]
 800315e:	e7e2      	b.n	8003126 <START_STOP_ALARM+0x36>
 8003160:	20000048 	.word	0x20000048
 8003164:	2000010c 	.word	0x2000010c
 8003168:	2000004c 	.word	0x2000004c
 800316c:	2000005c 	.word	0x2000005c
 8003170:	20000054 	.word	0x20000054
 8003174:	20000060 	.word	0x20000060
 8003178:	2000005a 	.word	0x2000005a
 800317c:	20000000 	.word	0x20000000

08003180 <Test_NON_24_Zones>:
{
 8003180:	b570      	push	{r4, r5, r6, lr}
	if  ( g_Switch_Stable_Status != SWITCH_OFF )	{
 8003182:	4b72      	ldr	r3, [pc, #456]	; (800334c <Test_NON_24_Zones+0x1cc>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d100      	bne.n	800318e <Test_NON_24_Zones+0xe>
 800318c:	e0dd      	b.n	800334a <Test_NON_24_Zones+0x1ca>
 800318e:	2400      	movs	r4, #0
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_IMMIDIATE )	{
 8003190:	4d6f      	ldr	r5, [pc, #444]	; (8003350 <Test_NON_24_Zones+0x1d0>)
 8003192:	e004      	b.n	800319e <Test_NON_24_Zones+0x1e>
						Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time( Zone_Bit_Flag ) ;
 8003194:	f7ff ff84 	bl	80030a0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time>
 8003198:	3401      	adds	r4, #1
		for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
 800319a:	2c05      	cmp	r4, #5
 800319c:	d01d      	beq.n	80031da <Test_NON_24_Zones+0x5a>
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_IMMIDIATE )	{
 800319e:	5d2b      	ldrb	r3, [r5, r4]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d1f9      	bne.n	8003198 <Test_NON_24_Zones+0x18>
				Zone_Bit_Flag = ( 1 << i );
 80031a4:	2001      	movs	r0, #1
 80031a6:	40a0      	lsls	r0, r4
 80031a8:	b280      	uxth	r0, r0
				if  (  g_Zones_Wire_AND_Wireless & Zone_Bit_Flag )	{					//		 >>       >>
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <Test_NON_24_Zones+0x1d4>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4203      	tst	r3, r0
 80031b0:	d0f2      	beq.n	8003198 <Test_NON_24_Zones+0x18>
					if ( g_ALARM_Counting_Time == 0 )  {
 80031b2:	4b69      	ldr	r3, [pc, #420]	; (8003358 <Test_NON_24_Zones+0x1d8>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1eb      	bne.n	8003194 <Test_NON_24_Zones+0x14>
						if  ( g_ALARMS_Counter_In_one_ARM_Sequence[ i ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )	{
 80031bc:	4b67      	ldr	r3, [pc, #412]	; (800335c <Test_NON_24_Zones+0x1dc>)
 80031be:	5d1b      	ldrb	r3, [r3, r4]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d8e8      	bhi.n	8003198 <Test_NON_24_Zones+0x18>
							g_ALARMS_Counter_In_one_ARM_Sequence[ i ]++ ;  // FALSE COUNTER INCREASE VALUE
 80031c6:	4965      	ldr	r1, [pc, #404]	; (800335c <Test_NON_24_Zones+0x1dc>)
 80031c8:	5d0b      	ldrb	r3, [r1, r4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	550b      	strb	r3, [r1, r4]
							START_STOP_ALARM( MY_START , Zone_Bit_Flag );
 80031d0:	0001      	movs	r1, r0
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7ff ff8c 	bl	80030f0 <START_STOP_ALARM>
 80031d8:	e7de      	b.n	8003198 <Test_NON_24_Zones+0x18>
 80031da:	2400      	movs	r4, #0
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_DELAY )	{
 80031dc:	4d5c      	ldr	r5, [pc, #368]	; (8003350 <Test_NON_24_Zones+0x1d0>)
 80031de:	e019      	b.n	8003214 <Test_NON_24_Zones+0x94>
 				if  ( ((  g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) || ( g_Delay_Zone_has_Open_mem == MY_YES ) )&& ( g_Entry_Exit_Time_Delay == 0 )	//       >>
 80031e0:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <Test_NON_24_Zones+0x1e0>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d124      	bne.n	8003234 <Test_NON_24_Zones+0xb4>
					&& (( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_BUZZER_ENTRY ) || ( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_SILENT_ENTRY ))) {
 80031ea:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d003      	beq.n	80031fa <Test_NON_24_Zones+0x7a>
 80031f2:	4b5c      	ldr	r3, [pc, #368]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d11c      	bne.n	8003234 <Test_NON_24_Zones+0xb4>
					if ( g_ALARM_Counting_Time == 0 )  {
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <Test_NON_24_Zones+0x1d8>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d159      	bne.n	80032b8 <Test_NON_24_Zones+0x138>
						if  ( g_ALARMS_Counter_In_one_ARM_Sequence[ i ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )	{
 8003204:	4b55      	ldr	r3, [pc, #340]	; (800335c <Test_NON_24_Zones+0x1dc>)
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d947      	bls.n	800329e <Test_NON_24_Zones+0x11e>
 800320e:	3401      	adds	r4, #1
		for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
 8003210:	2c05      	cmp	r4, #5
 8003212:	d054      	beq.n	80032be <Test_NON_24_Zones+0x13e>
 8003214:	b2e1      	uxtb	r1, r4
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_DELAY )	{
 8003216:	0022      	movs	r2, r4
 8003218:	5d2b      	ldrb	r3, [r5, r4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d1f7      	bne.n	800320e <Test_NON_24_Zones+0x8e>
				Zone_Bit_Flag = ( 1 << i );
 800321e:	2001      	movs	r0, #1
 8003220:	40a0      	lsls	r0, r4
 8003222:	b280      	uxth	r0, r0
 				if  ( ((  g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) || ( g_Delay_Zone_has_Open_mem == MY_YES ) )&& ( g_Entry_Exit_Time_Delay == 0 )	//       >>
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <Test_NON_24_Zones+0x1d4>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	4203      	tst	r3, r0
 800322a:	d1d9      	bne.n	80031e0 <Test_NON_24_Zones+0x60>
 800322c:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <Test_NON_24_Zones+0x1e8>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d0d5      	beq.n	80031e0 <Test_NON_24_Zones+0x60>
 				else  if  ( ( g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) && ( g_Entry_Exit_Time_Delay == 0 ) && (( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_ARM ) || ( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_ALARM ))
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <Test_NON_24_Zones+0x1d4>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	4203      	tst	r3, r0
 800323a:	d0e8      	beq.n	800320e <Test_NON_24_Zones+0x8e>
 800323c:	4b48      	ldr	r3, [pc, #288]	; (8003360 <Test_NON_24_Zones+0x1e0>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e3      	bne.n	800320e <Test_NON_24_Zones+0x8e>
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <Test_NON_24_Zones+0xd6>
 800324e:	4b45      	ldr	r3, [pc, #276]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d1db      	bne.n	800320e <Test_NON_24_Zones+0x8e>
 						 && ( g_ALARMS_Counter_In_one_ARM_Sequence[ i ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <Test_NON_24_Zones+0x1dc>)
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d8d6      	bhi.n	800320e <Test_NON_24_Zones+0x8e>
						 && ( g_Delay_Zone_has_Open_mem == MY_NO ) )  {
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <Test_NON_24_Zones+0x1e8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1d2      	bne.n	800320e <Test_NON_24_Zones+0x8e>
					g_Entry_Exit_Sequence 							= DELAY_ZONES_SEQUENCE_ON_BUZZER_ENTRY ;
 8003268:	2203      	movs	r2, #3
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 800326c:	701a      	strb	r2, [r3, #0]
					g_Delay_Zone_has_Open_mem						= MY_YES ;
 800326e:	3a02      	subs	r2, #2
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <Test_NON_24_Zones+0x1e8>)
 8003272:	701a      	strb	r2, [r3, #0]
					g_Delay_Zone_has_Open_Index_mem					= i ;
 8003274:	4b3d      	ldr	r3, [pc, #244]	; (800336c <Test_NON_24_Zones+0x1ec>)
 8003276:	7019      	strb	r1, [r3, #0]
					g_Entry_Exit_Time_Delay 										= g_Entry_Time + 1 ;  //  g_Exit_Time + 1 ;      //    N_7   ADDED
 8003278:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <Test_NON_24_Zones+0x1f0>)
 800327a:	8813      	ldrh	r3, [r2, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	b29b      	uxth	r3, r3
 8003280:	4937      	ldr	r1, [pc, #220]	; (8003360 <Test_NON_24_Zones+0x1e0>)
 8003282:	800b      	strh	r3, [r1, #0]
					g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_EXIT_DELAY ]		= g_Entry_Time + 1 ;  //  g_Exit_Time + 1 ;
 8003284:	8813      	ldrh	r3, [r2, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <Test_NON_24_Zones+0x1f4>)
 800328a:	6053      	str	r3, [r2, #4]
					g_Buzzer_ON_OFF_Times[ MY_ON ] 					= BUZZER_ON_ENTRY_BEEP_TIME_ON ;    // START THE BUZZER AND COUNT THE CORRESPONDING TIME
 800328c:	4a3a      	ldr	r2, [pc, #232]	; (8003378 <Test_NON_24_Zones+0x1f8>)
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <Test_NON_24_Zones+0x1fc>)
 8003290:	805a      	strh	r2, [r3, #2]
					BUZZER_ON();
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	2390      	movs	r3, #144	; 0x90
 8003298:	05db      	lsls	r3, r3, #23
 800329a:	619a      	str	r2, [r3, #24]
 800329c:	e7b7      	b.n	800320e <Test_NON_24_Zones+0x8e>
							g_ALARMS_Counter_In_one_ARM_Sequence[ i ]++ ;  // FALSE COUNTER INCREASE VALUE
 800329e:	492f      	ldr	r1, [pc, #188]	; (800335c <Test_NON_24_Zones+0x1dc>)
 80032a0:	5c8b      	ldrb	r3, [r1, r2]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	548b      	strb	r3, [r1, r2]
							START_STOP_ALARM( MY_START , Zone_Bit_Flag );
 80032a8:	0001      	movs	r1, r0
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7ff ff20 	bl	80030f0 <START_STOP_ALARM>
							g_Entry_Exit_Sequence = DELAY_ZONES_SEQUENCE_ON_ALARM ;
 80032b0:	2205      	movs	r2, #5
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e7aa      	b.n	800320e <Test_NON_24_Zones+0x8e>
						Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time( Zone_Bit_Flag ) ;
 80032b8:	f7ff fef2 	bl	80030a0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time>
 80032bc:	e7a7      	b.n	800320e <Test_NON_24_Zones+0x8e>
 80032be:	2400      	movs	r4, #0
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_FOLLOW )	{
 80032c0:	4d23      	ldr	r5, [pc, #140]	; (8003350 <Test_NON_24_Zones+0x1d0>)
 80032c2:	e011      	b.n	80032e8 <Test_NON_24_Zones+0x168>
				if  ( ( (  g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) || ( g_Follow_Zone_has_Open_mem == MY_YES ) ) &&  ( g_Entry_Exit_Time_Delay == 0 )  )	{
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <Test_NON_24_Zones+0x1e0>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11c      	bne.n	8003308 <Test_NON_24_Zones+0x188>
					if ( g_ALARM_Counting_Time == 0 )  {
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <Test_NON_24_Zones+0x1d8>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d134      	bne.n	8003342 <Test_NON_24_Zones+0x1c2>
						if  ( g_ALARMS_Counter_In_one_ARM_Sequence[ i ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )	{
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <Test_NON_24_Zones+0x1dc>)
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d926      	bls.n	8003330 <Test_NON_24_Zones+0x1b0>
 80032e2:	3401      	adds	r4, #1
		for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
 80032e4:	2c05      	cmp	r4, #5
 80032e6:	d030      	beq.n	800334a <Test_NON_24_Zones+0x1ca>
 80032e8:	b2e0      	uxtb	r0, r4
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_FOLLOW )	{
 80032ea:	0022      	movs	r2, r4
 80032ec:	5d2b      	ldrb	r3, [r5, r4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d1f7      	bne.n	80032e2 <Test_NON_24_Zones+0x162>
				Zone_Bit_Flag = ( 1 << i );
 80032f2:	2101      	movs	r1, #1
 80032f4:	40a1      	lsls	r1, r4
 80032f6:	b289      	uxth	r1, r1
				if  ( ( (  g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) || ( g_Follow_Zone_has_Open_mem == MY_YES ) ) &&  ( g_Entry_Exit_Time_Delay == 0 )  )	{
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <Test_NON_24_Zones+0x1d4>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	420b      	tst	r3, r1
 80032fe:	d1e1      	bne.n	80032c4 <Test_NON_24_Zones+0x144>
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <Test_NON_24_Zones+0x200>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d0dd      	beq.n	80032c4 <Test_NON_24_Zones+0x144>
				else if ( (  g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) && ( g_Entry_Exit_Time_Delay ) && ( g_Entry_Exit_Sequence > DELAY_ZONES_SEQUENCE_ON_ARM ) ) {
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <Test_NON_24_Zones+0x1d4>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	420b      	tst	r3, r1
 800330e:	d0e8      	beq.n	80032e2 <Test_NON_24_Zones+0x162>
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <Test_NON_24_Zones+0x1e0>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0e3      	beq.n	80032e2 <Test_NON_24_Zones+0x162>
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <Test_NON_24_Zones+0x1e4>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d9de      	bls.n	80032e2 <Test_NON_24_Zones+0x162>
					g_Follow_Zone_has_Open_mem 			= MY_YES ;
 8003324:	2201      	movs	r2, #1
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <Test_NON_24_Zones+0x200>)
 8003328:	701a      	strb	r2, [r3, #0]
					g_Follow_Zone_has_Open_Index_mem	= i ;
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <Test_NON_24_Zones+0x204>)
 800332c:	7018      	strb	r0, [r3, #0]
 800332e:	e7d8      	b.n	80032e2 <Test_NON_24_Zones+0x162>
							g_ALARMS_Counter_In_one_ARM_Sequence[ i ]++ ;  // FALSE COUNTER INCREASE VALUE
 8003330:	480a      	ldr	r0, [pc, #40]	; (800335c <Test_NON_24_Zones+0x1dc>)
 8003332:	5c83      	ldrb	r3, [r0, r2]
 8003334:	3301      	adds	r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	5483      	strb	r3, [r0, r2]
							START_STOP_ALARM( MY_START , Zone_Bit_Flag );
 800333a:	2001      	movs	r0, #1
 800333c:	f7ff fed8 	bl	80030f0 <START_STOP_ALARM>
 8003340:	e7cf      	b.n	80032e2 <Test_NON_24_Zones+0x162>
						Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time( Zone_Bit_Flag ) ;
 8003342:	0008      	movs	r0, r1
 8003344:	f7ff feac 	bl	80030a0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time>
 8003348:	e7cb      	b.n	80032e2 <Test_NON_24_Zones+0x162>
}
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	20000078 	.word	0x20000078
 8003350:	2000031c 	.word	0x2000031c
 8003354:	20000088 	.word	0x20000088
 8003358:	20000048 	.word	0x20000048
 800335c:	2000046c 	.word	0x2000046c
 8003360:	2000005c 	.word	0x2000005c
 8003364:	2000005b 	.word	0x2000005b
 8003368:	2000005a 	.word	0x2000005a
 800336c:	20000059 	.word	0x20000059
 8003370:	20000004 	.word	0x20000004
 8003374:	2000010c 	.word	0x2000010c
 8003378:	00004e20 	.word	0x00004e20
 800337c:	200001a0 	.word	0x200001a0
 8003380:	20000060 	.word	0x20000060
 8003384:	2000005f 	.word	0x2000005f

08003388 <Test_24_and_Panic_Zones>:
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b083      	sub	sp, #12
	volatile 	uint8_t   	Found_24_Zone = MY_FALSE ;
 800338c:	2200      	movs	r2, #0
 800338e:	466b      	mov	r3, sp
 8003390:	719a      	strb	r2, [r3, #6]
	for ( i = ZONE_1_INDEX ; i < ZONES_MAXIMUM ; ++i ) {
 8003392:	466b      	mov	r3, sp
 8003394:	71da      	strb	r2, [r3, #7]
 8003396:	3307      	adds	r3, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b04      	cmp	r3, #4
 800339e:	d900      	bls.n	80033a2 <Test_24_and_Panic_Zones+0x1a>
 80033a0:	e071      	b.n	8003486 <Test_24_and_Panic_Zones+0xfe>
		Found_24_Zone = MY_FALSE  ;    //	N_19
 80033a2:	466b      	mov	r3, sp
 80033a4:	1d9d      	adds	r5, r3, #6
 80033a6:	2700      	movs	r7, #0
		if  ( g_Switch_Stable_Status == SWITCH_OFF )	{
 80033a8:	4e38      	ldr	r6, [pc, #224]	; (800348c <Test_24_and_Panic_Zones+0x104>)
			if ( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_24_PANIC ) {
 80033aa:	1ddc      	adds	r4, r3, #7
 80033ac:	e010      	b.n	80033d0 <Test_24_and_Panic_Zones+0x48>
			if ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_24_PANIC ) {
 80033ae:	7823      	ldrb	r3, [r4, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4a37      	ldr	r2, [pc, #220]	; (8003490 <Test_24_and_Panic_Zones+0x108>)
 80033b4:	5cd3      	ldrb	r3, [r2, r3]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d018      	beq.n	80033ec <Test_24_and_Panic_Zones+0x64>
		if ( Found_24_Zone == MY_TRUE )	{
 80033ba:	782b      	ldrb	r3, [r5, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d018      	beq.n	80033f2 <Test_24_and_Panic_Zones+0x6a>
	for ( i = ZONE_1_INDEX ; i < ZONES_MAXIMUM ; ++i ) {
 80033c0:	7823      	ldrb	r3, [r4, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	7023      	strb	r3, [r4, #0]
 80033c8:	7823      	ldrb	r3, [r4, #0]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d85a      	bhi.n	8003486 <Test_24_and_Panic_Zones+0xfe>
		Found_24_Zone = MY_FALSE  ;    //	N_19
 80033d0:	702f      	strb	r7, [r5, #0]
		if  ( g_Switch_Stable_Status == SWITCH_OFF )	{
 80033d2:	8833      	ldrh	r3, [r6, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e9      	bne.n	80033ae <Test_24_and_Panic_Zones+0x26>
			if ( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_24_PANIC ) {
 80033da:	7823      	ldrb	r3, [r4, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <Test_24_and_Panic_Zones+0x10c>)
 80033e0:	5cd3      	ldrb	r3, [r2, r3]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d1e9      	bne.n	80033ba <Test_24_and_Panic_Zones+0x32>
				Found_24_Zone = MY_TRUE ;
 80033e6:	3b03      	subs	r3, #3
 80033e8:	702b      	strb	r3, [r5, #0]
 80033ea:	e7e6      	b.n	80033ba <Test_24_and_Panic_Zones+0x32>
				Found_24_Zone = MY_TRUE ;
 80033ec:	3b03      	subs	r3, #3
 80033ee:	702b      	strb	r3, [r5, #0]
 80033f0:	e7e3      	b.n	80033ba <Test_24_and_Panic_Zones+0x32>
			Zone_Bit_Flag = ( ( uint16_t ) 1 << i ) ;
 80033f2:	7822      	ldrb	r2, [r4, #0]
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	4093      	lsls	r3, r2
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	aa01      	add	r2, sp, #4
 80033fc:	8013      	strh	r3, [r2, #0]
			if  ( ( g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) && ( ( g_PANIC_24_Zones_Memory_Flags & Zone_Bit_Flag ) == 0 ) ) {
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <Test_24_and_Panic_Zones+0x110>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	8812      	ldrh	r2, [r2, #0]
 8003404:	421a      	tst	r2, r3
 8003406:	d031      	beq.n	800346c <Test_24_and_Panic_Zones+0xe4>
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <Test_24_and_Panic_Zones+0x114>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	aa01      	add	r2, sp, #4
 800340e:	8812      	ldrh	r2, [r2, #0]
 8003410:	421a      	tst	r2, r3
 8003412:	d12b      	bne.n	800346c <Test_24_and_Panic_Zones+0xe4>
				if ( g_ALARM_Counting_Time == 0 )  {
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <Test_24_and_Panic_Zones+0x118>)
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11a      	bne.n	8003454 <Test_24_and_Panic_Zones+0xcc>
					if  ( g_ALARMS_Counter_In_one_ARM_Sequence[ i ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )	{
 800341e:	7823      	ldrb	r3, [r4, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <Test_24_and_Panic_Zones+0x11c>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d8c9      	bhi.n	80033c0 <Test_24_and_Panic_Zones+0x38>
						g_ALARMS_Counter_In_one_ARM_Sequence[ i ]++ ;  // FALSE COUNTER INCREASE VALUE
 800342c:	7822      	ldrb	r2, [r4, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	491c      	ldr	r1, [pc, #112]	; (80034a4 <Test_24_and_Panic_Zones+0x11c>)
 8003432:	5c8b      	ldrb	r3, [r1, r2]
 8003434:	3301      	adds	r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	548b      	strb	r3, [r1, r2]
						START_STOP_ALARM( MY_START , Zone_Bit_Flag );
 800343a:	466b      	mov	r3, sp
 800343c:	8899      	ldrh	r1, [r3, #4]
 800343e:	b289      	uxth	r1, r1
 8003440:	2001      	movs	r0, #1
 8003442:	f7ff fe55 	bl	80030f0 <START_STOP_ALARM>
						g_PANIC_24_Zones_Memory_Flags |= Zone_Bit_Flag ;
 8003446:	466b      	mov	r3, sp
 8003448:	8899      	ldrh	r1, [r3, #4]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <Test_24_and_Panic_Zones+0x114>)
 800344c:	8813      	ldrh	r3, [r2, #0]
 800344e:	430b      	orrs	r3, r1
 8003450:	8013      	strh	r3, [r2, #0]
 8003452:	e7b5      	b.n	80033c0 <Test_24_and_Panic_Zones+0x38>
					Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time( Zone_Bit_Flag ) ;
 8003454:	466b      	mov	r3, sp
 8003456:	8898      	ldrh	r0, [r3, #4]
 8003458:	b280      	uxth	r0, r0
 800345a:	f7ff fe21 	bl	80030a0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time>
					g_PANIC_24_Zones_Memory_Flags |= Zone_Bit_Flag ;
 800345e:	466b      	mov	r3, sp
 8003460:	8899      	ldrh	r1, [r3, #4]
 8003462:	4a0e      	ldr	r2, [pc, #56]	; (800349c <Test_24_and_Panic_Zones+0x114>)
 8003464:	8813      	ldrh	r3, [r2, #0]
 8003466:	430b      	orrs	r3, r1
 8003468:	8013      	strh	r3, [r2, #0]
 800346a:	e7a9      	b.n	80033c0 <Test_24_and_Panic_Zones+0x38>
			else if  (( g_Zones_Wire_AND_Wireless & Zone_Bit_Flag ) == 0 ) {
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <Test_24_and_Panic_Zones+0x110>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	aa01      	add	r2, sp, #4
 8003472:	8812      	ldrh	r2, [r2, #0]
 8003474:	421a      	tst	r2, r3
 8003476:	d1a3      	bne.n	80033c0 <Test_24_and_Panic_Zones+0x38>
				g_PANIC_24_Zones_Memory_Flags &=  ~Zone_Bit_Flag ;
 8003478:	ab01      	add	r3, sp, #4
 800347a:	8819      	ldrh	r1, [r3, #0]
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <Test_24_and_Panic_Zones+0x114>)
 800347e:	8813      	ldrh	r3, [r2, #0]
 8003480:	438b      	bics	r3, r1
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	e79c      	b.n	80033c0 <Test_24_and_Panic_Zones+0x38>
}
 8003486:	b003      	add	sp, #12
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	20000078 	.word	0x20000078
 8003490:	2000031c 	.word	0x2000031c
 8003494:	200002c0 	.word	0x200002c0
 8003498:	20000088 	.word	0x20000088
 800349c:	20000064 	.word	0x20000064
 80034a0:	20000048 	.word	0x20000048
 80034a4:	2000046c 	.word	0x2000046c

080034a8 <Change_The_Delay_Zones_As_Instant>:
//
//
//
//////////////////////////////////////////////////////////////////////////////////		N_6   ADDED
void			Change_The_Delay_Zones_As_Instant()
{
 80034a8:	b530      	push	{r4, r5, lr}
	uint8_t    i ;
	//
	if   ( g_Switch_Stable_Status == SWITCH_ON_STAY_INSTANT_ARM ) {
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <Change_The_Delay_Zones_As_Instant+0x30>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d000      	beq.n	80034b6 <Change_The_Delay_Zones_As_Instant+0xe>
					g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_IMMIDIATE ;
				}
			}
		}
	}
}
 80034b4:	bd30      	pop	{r4, r5, pc}
 80034b6:	2300      	movs	r3, #0
			if   (   g_Zones_TYPE_on_Current_Arming_MODE[ i ] != ZONE_TYPE_BYPASS ) {		//		N_18   ADD
 80034b8:	4808      	ldr	r0, [pc, #32]	; (80034dc <Change_The_Delay_Zones_As_Instant+0x34>)
				if ( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_DELAY  ){
 80034ba:	4c09      	ldr	r4, [pc, #36]	; (80034e0 <Change_The_Delay_Zones_As_Instant+0x38>)
					g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_IMMIDIATE ;
 80034bc:	2503      	movs	r5, #3
 80034be:	e002      	b.n	80034c6 <Change_The_Delay_Zones_As_Instant+0x1e>
 80034c0:	3301      	adds	r3, #1
		for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d0f6      	beq.n	80034b4 <Change_The_Delay_Zones_As_Instant+0xc>
			if   (   g_Zones_TYPE_on_Current_Arming_MODE[ i ] != ZONE_TYPE_BYPASS ) {		//		N_18   ADD
 80034c6:	5cc2      	ldrb	r2, [r0, r3]
 80034c8:	2a05      	cmp	r2, #5
 80034ca:	d0f9      	beq.n	80034c0 <Change_The_Delay_Zones_As_Instant+0x18>
				if ( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_DELAY  ){
 80034cc:	5ce2      	ldrb	r2, [r4, r3]
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	d1f6      	bne.n	80034c0 <Change_The_Delay_Zones_As_Instant+0x18>
					g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_IMMIDIATE ;
 80034d2:	4a02      	ldr	r2, [pc, #8]	; (80034dc <Change_The_Delay_Zones_As_Instant+0x34>)
 80034d4:	54d5      	strb	r5, [r2, r3]
 80034d6:	e7f3      	b.n	80034c0 <Change_The_Delay_Zones_As_Instant+0x18>
 80034d8:	20000078 	.word	0x20000078
 80034dc:	2000031c 	.word	0x2000031c
 80034e0:	200002c0 	.word	0x200002c0

080034e4 <Change_The_FOLLOW_Zones_AS_DISABLE>:
//
//
//
//////////////////////////////////////////////////////////////////////////////////		N_6   ADDED
void			Change_The_FOLLOW_Zones_AS_DISABLE()
{
 80034e4:	2300      	movs	r3, #0
	uint8_t    i ;
	//
	for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
		if ( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_FOLLOW  ){
 80034e6:	4906      	ldr	r1, [pc, #24]	; (8003500 <Change_The_FOLLOW_Zones_AS_DISABLE+0x1c>)
		//  g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_DISABLE ;    	//    	N_18	REMOVED
			g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_BYPASS ;    	//                ADD
 80034e8:	2005      	movs	r0, #5
 80034ea:	e002      	b.n	80034f2 <Change_The_FOLLOW_Zones_AS_DISABLE+0xe>
 80034ec:	3301      	adds	r3, #1
	for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d005      	beq.n	80034fe <Change_The_FOLLOW_Zones_AS_DISABLE+0x1a>
		if ( g_Zones_TYPE_Configuration[ i ] == ZONE_TYPE_FOLLOW  ){
 80034f2:	5cca      	ldrb	r2, [r1, r3]
 80034f4:	2a02      	cmp	r2, #2
 80034f6:	d1f9      	bne.n	80034ec <Change_The_FOLLOW_Zones_AS_DISABLE+0x8>
			g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_BYPASS ;    	//                ADD
 80034f8:	4a02      	ldr	r2, [pc, #8]	; (8003504 <Change_The_FOLLOW_Zones_AS_DISABLE+0x20>)
 80034fa:	54d0      	strb	r0, [r2, r3]
 80034fc:	e7f6      	b.n	80034ec <Change_The_FOLLOW_Zones_AS_DISABLE+0x8>
		}
	}
}
 80034fe:	4770      	bx	lr
 8003500:	200002c0 	.word	0x200002c0
 8003504:	2000031c 	.word	0x2000031c

08003508 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM>:
//
//
//
//////////////////////////////////////////////////////////////////////////////////		N_6     ADDED
void			Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM()
{
 8003508:	b530      	push	{r4, r5, lr}
	//
	//  WAIT TO COUNT THE INTERVAL TIME BEFORE EXECUTE THE ROUTINE
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////
	if ( g_Tasks_Times[ TASK_INDEX_AUTO_SWITCH_TO_INSTANT_ARM ] == 0 ) {
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x50>)
 800350c:	889b      	ldrh	r3, [r3, #4]
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d120      	bne.n	8003556 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x4e>
		//////////////////////////////////////////////
		//  RECYCLE THE TIME for the next read
		//////////////////////////////////////////////
		g_Tasks_Times[ TASK_INDEX_AUTO_SWITCH_TO_INSTANT_ARM ] = INTERVAL_TIME_TO_TEST_AUTO_INTSTANT_ARM ;
 8003514:	225a      	movs	r2, #90	; 0x5a
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x50>)
 8003518:	809a      	strh	r2, [r3, #4]
		//
		if   (	( g_Entry_Exit_Time_Delay > 0 ) && ( g_Switch_Stable_Status != SWITCH_OFF )  )  {
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x54>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d018      	beq.n	8003556 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x4e>
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x58>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d013      	beq.n	8003556 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x4e>
 800352e:	2300      	movs	r3, #0
			for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
				if (  ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_DELAY  )
 8003530:	490c      	ldr	r1, [pc, #48]	; (8003564 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x5c>)


//					&&  ( ( g_Zones_Stable_Status & ( 1 << i ) ) > 0 )  ) {        // 		N_18  replace the above line		//		N_55  CHANGED
					&&  ( ( g_Zones_Wire_AND_Wireless & ( 1 << i ) ) > 0 )  ) {        // 		N_18  replace the above line
 8003532:	2401      	movs	r4, #1

					//
					g_ENTRY_Delay_Zone_did_Not_OPEN = MY_FALSE ;
 8003534:	2500      	movs	r5, #0
 8003536:	e002      	b.n	800353e <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x36>
 8003538:	3301      	adds	r3, #1
			for ( i = 0 ; i < ZONES_MAXIMUM ; ++i ) {
 800353a:	2b05      	cmp	r3, #5
 800353c:	d00b      	beq.n	8003556 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x4e>
				if (  ( g_Zones_TYPE_on_Current_Arming_MODE[ i ] == ZONE_TYPE_DELAY  )
 800353e:	5cca      	ldrb	r2, [r1, r3]
 8003540:	2a01      	cmp	r2, #1
 8003542:	d1f9      	bne.n	8003538 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x30>
					&&  ( ( g_Zones_Wire_AND_Wireless & ( 1 << i ) ) > 0 )  ) {        // 		N_18  replace the above line
 8003544:	4a08      	ldr	r2, [pc, #32]	; (8003568 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x60>)
 8003546:	8810      	ldrh	r0, [r2, #0]
 8003548:	0022      	movs	r2, r4
 800354a:	409a      	lsls	r2, r3
 800354c:	4210      	tst	r0, r2
 800354e:	d0f3      	beq.n	8003538 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x30>
					g_ENTRY_Delay_Zone_did_Not_OPEN = MY_FALSE ;
 8003550:	4a06      	ldr	r2, [pc, #24]	; (800356c <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x64>)
 8003552:	7015      	strb	r5, [r2, #0]
 8003554:	e7f0      	b.n	8003538 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM+0x30>
				}
			}
		}
	}
}
 8003556:	bd30      	pop	{r4, r5, pc}
 8003558:	20000128 	.word	0x20000128
 800355c:	2000005c 	.word	0x2000005c
 8003560:	20000078 	.word	0x20000078
 8003564:	2000031c 	.word	0x2000031c
 8003568:	20000088 	.word	0x20000088
 800356c:	20000002 	.word	0x20000002

08003570 <Show_Switch_LED_and_SETUP_ALARM_Status>:
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////
void		Show_Switch_LED_and_SETUP_ALARM_Status()
{
	if ( g_Tasks_Times[ TASK_INDEX_FLASHING_SWITCH_STATUS_LED ] == 0 ){
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <Show_Switch_LED_and_SETUP_ALARM_Status+0x6c>)
 8003572:	8a5b      	ldrh	r3, [r3, #18]
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d123      	bne.n	80035c2 <Show_Switch_LED_and_SETUP_ALARM_Status+0x52>
		if  		( g_Switch_Stable_Status == SWITCH_OFF )	{
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <Show_Switch_LED_and_SETUP_ALARM_Status+0x70>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d019      	beq.n	80035b8 <Show_Switch_LED_and_SETUP_ALARM_Status+0x48>
			//////////////////////////////////////////
			//   DISARM LED STATUS
			//////////////////////////////////////////
			SWITCH_Red_Led_OFF();
		}
		else if		( g_Switch_Stable_Status == SWITCH_ON_REGULAR_ARM )  {
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <Show_Switch_LED_and_SETUP_ALARM_Status+0x70>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d01a      	beq.n	80035c4 <Show_Switch_LED_and_SETUP_ALARM_Status+0x54>
			//   REGULAR ARM LED STATUS
			//////////////////////////////////////////
			SWITCH_Red_Led_ON();
		}
		else {
			SWITCH_Red_Led_Toggle();				//	     >>    ADDED
 800358e:	2290      	movs	r2, #144	; 0x90
 8003590:	05d2      	lsls	r2, r2, #23
 8003592:	6951      	ldr	r1, [r2, #20]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	404b      	eors	r3, r1
 800359a:	6153      	str	r3, [r2, #20]
			if			( g_Switch_Stable_Status == SWITCH_ON_STAY_ARM )  {
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <Show_Switch_LED_and_SETUP_ALARM_Status+0x70>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d014      	beq.n	80035d0 <Show_Switch_LED_and_SETUP_ALARM_Status+0x60>
				//////////////////////////////////////////
				//   STAY ARM LED STATUS
				//////////////////////////////////////////
				g_Tasks_Times[ TASK_INDEX_FLASHING_SWITCH_STATUS_LED ] = FLASING_SWITCH_LED_ON_STAY ;
			}
			else if 	( g_Switch_Stable_Status == SWITCH_ON_STAY_INSTANT_ARM )  {
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <Show_Switch_LED_and_SETUP_ALARM_Status+0x70>)
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d108      	bne.n	80035c2 <Show_Switch_LED_and_SETUP_ALARM_Status+0x52>
				//////////////////////////////////////////
				//   STAY INSTANT ARM LED STATUS
				//////////////////////////////////////////
				g_Tasks_Times[ TASK_INDEX_FLASHING_SWITCH_STATUS_LED ] = FLASING_SWITCH_LED_ON_STAY_INSTANT ;
 80035b0:	2296      	movs	r2, #150	; 0x96
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <Show_Switch_LED_and_SETUP_ALARM_Status+0x6c>)
 80035b4:	825a      	strh	r2, [r3, #18]
			}
		}
	}
}
 80035b6:	e004      	b.n	80035c2 <Show_Switch_LED_and_SETUP_ALARM_Status+0x52>
			SWITCH_Red_Led_OFF();
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	0152      	lsls	r2, r2, #5
 80035bc:	2390      	movs	r3, #144	; 0x90
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035c2:	4770      	bx	lr
			SWITCH_Red_Led_ON();
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	0152      	lsls	r2, r2, #5
 80035c8:	2390      	movs	r3, #144	; 0x90
 80035ca:	05db      	lsls	r3, r3, #23
 80035cc:	619a      	str	r2, [r3, #24]
 80035ce:	e7f8      	b.n	80035c2 <Show_Switch_LED_and_SETUP_ALARM_Status+0x52>
				g_Tasks_Times[ TASK_INDEX_FLASHING_SWITCH_STATUS_LED ] = FLASING_SWITCH_LED_ON_STAY ;
 80035d0:	22e1      	movs	r2, #225	; 0xe1
 80035d2:	0052      	lsls	r2, r2, #1
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <Show_Switch_LED_and_SETUP_ALARM_Status+0x6c>)
 80035d6:	825a      	strh	r2, [r3, #18]
 80035d8:	e7f3      	b.n	80035c2 <Show_Switch_LED_and_SETUP_ALARM_Status+0x52>
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	20000128 	.word	0x20000128
 80035e0:	20000078 	.word	0x20000078

080035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>:
//
//
//////////////////////////////////////////////////////////////////////////////////
void		SPECIFY_The_SIGNAL_on_The_PGM1_OUT( uint8_t For_ARM_Or_Disarm )
{
	if 		( For_ARM_Or_Disarm == FOR_ARM ) {
 80035e4:	2801      	cmp	r0, #1
 80035e6:	d002      	beq.n	80035ee <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0xa>
		   || ( ( g_PGM_Mode & PGM_ENABLE_ON_STAY_INSTANT_ARM ) && ( g_Switch_Stable_Status == SWITCH_ON_STAY_INSTANT_ARM ) ) ) {
			g_REMOTE_Control_Signal_times = PGM_SIGNAL_TIMES_ON_ARM ;
			g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = 1 ;      //
		}
	}
	else if ( For_ARM_Or_Disarm == FOR_DISARM ) {
 80035e8:	2802      	cmp	r0, #2
 80035ea:	d022      	beq.n	8003632 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x4e>
		if  ( g_PGM_Mode & PGM_ENABLE_ON_DISARM ) {
			g_REMOTE_Control_Signal_times = PGM_SIGNAL_TIMES_ON_DISARM ;
			g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = 1 ;    //
		}
	}
}
 80035ec:	4770      	bx	lr
		if  ( ( ( g_PGM_Mode & PGM_ENABLE_ON_REGULAR_ARM )      && ( g_Switch_Stable_Status == SWITCH_ON_REGULAR_ARM ) )
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x64>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	079b      	lsls	r3, r3, #30
 80035f4:	d504      	bpl.n	8003600 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x1c>
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x68>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d011      	beq.n	8003624 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x40>
		   || ( ( g_PGM_Mode & PGM_ENABLE_ON_STAY_ARM )  		&& ( g_Switch_Stable_Status == SWITCH_ON_STAY_ARM ) )
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x64>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	075b      	lsls	r3, r3, #29
 8003606:	d504      	bpl.n	8003612 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x2e>
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x68>)
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d008      	beq.n	8003624 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x40>
		   || ( ( g_PGM_Mode & PGM_ENABLE_ON_STAY_INSTANT_ARM ) && ( g_Switch_Stable_Status == SWITCH_ON_STAY_INSTANT_ARM ) ) ) {
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x64>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	d5e8      	bpl.n	80035ec <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x8>
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x68>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b03      	cmp	r3, #3
 8003622:	d1e3      	bne.n	80035ec <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x8>
			g_REMOTE_Control_Signal_times = PGM_SIGNAL_TIMES_ON_ARM ;
 8003624:	2202      	movs	r2, #2
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x6c>)
 8003628:	701a      	strb	r2, [r3, #0]
			g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = 1 ;      //
 800362a:	3a01      	subs	r2, #1
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x70>)
 800362e:	821a      	strh	r2, [r3, #16]
 8003630:	e7dc      	b.n	80035ec <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x8>
		if  ( g_PGM_Mode & PGM_ENABLE_ON_DISARM ) {
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x64>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	07db      	lsls	r3, r3, #31
 8003638:	d5d8      	bpl.n	80035ec <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x8>
			g_REMOTE_Control_Signal_times = PGM_SIGNAL_TIMES_ON_DISARM ;
 800363a:	2204      	movs	r2, #4
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x6c>)
 800363e:	701a      	strb	r2, [r3, #0]
			g_Tasks_Times[ TASK_INDEX_REMOTE_CONTROL_SIGNAL_TIME ] = 1 ;    //
 8003640:	3a03      	subs	r2, #3
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x70>)
 8003644:	821a      	strh	r2, [r3, #16]
}
 8003646:	e7d1      	b.n	80035ec <SPECIFY_The_SIGNAL_on_The_PGM1_OUT+0x8>
 8003648:	20000066 	.word	0x20000066
 800364c:	20000078 	.word	0x20000078
 8003650:	20000068 	.word	0x20000068
 8003654:	20000128 	.word	0x20000128

08003658 <Test_The_Time_Depending_Events>:
{
 8003658:	b510      	push	{r4, lr}
	if   ( g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_ALARM_DISCOUNT_TIME ] == BIG_TIMES_TRIGGER_VALUE ) {
 800365a:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <Test_The_Time_Depending_Events+0x248>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d01a      	beq.n	8003698 <Test_The_Time_Depending_Events+0x40>
	if   ( g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_EXIT_DELAY ] == BIG_TIMES_TRIGGER_VALUE ) {
 8003662:	4b8f      	ldr	r3, [pc, #572]	; (80038a0 <Test_The_Time_Depending_Events+0x248>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d035      	beq.n	80036d6 <Test_The_Time_Depending_Events+0x7e>
	if  ( ( g_Entry_Exit_Time_Delay ) && ( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_EXIT_DELAY )
 800366a:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <Test_The_Time_Depending_Events+0x24c>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <Test_The_Time_Depending_Events+0x26>
 8003674:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d100      	bne.n	800367e <Test_The_Time_Depending_Events+0x26>
 800367c:	e0a7      	b.n	80037ce <Test_The_Time_Depending_Events+0x176>
	else if ( ( g_Entry_Exit_Time_Delay ) && ( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_BUZZER_ENTRY )) {
 800367e:	4b89      	ldr	r3, [pc, #548]	; (80038a4 <Test_The_Time_Depending_Events+0x24c>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <Test_The_Time_Depending_Events+0x3a>
 8003688:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d100      	bne.n	8003692 <Test_The_Time_Depending_Events+0x3a>
 8003690:	e0ec      	b.n	800386c <Test_The_Time_Depending_Events+0x214>
	EXECUTE_Remote_Control_Signal_on_PGM1_OUT();
 8003692:	f7ff fcb9 	bl	8003008 <EXECUTE_Remote_Control_Signal_on_PGM1_OUT>
}
 8003696:	bd10      	pop	{r4, pc}
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_ALARM_DISCOUNT_TIME ] = 0 ;   //  RESET ( STOP ) TO DISCOUNT THE ALARM TIME
 8003698:	2300      	movs	r3, #0
 800369a:	4a81      	ldr	r2, [pc, #516]	; (80038a0 <Test_The_Time_Depending_Events+0x248>)
 800369c:	6013      	str	r3, [r2, #0]
		g_ALARM_Counting_Time = 0 ;
 800369e:	2200      	movs	r2, #0
 80036a0:	4982      	ldr	r1, [pc, #520]	; (80038ac <Test_The_Time_Depending_Events+0x254>)
 80036a2:	800b      	strh	r3, [r1, #0]
		SIEREN_OFF();				// STOPS THE SIEREN
 80036a4:	2190      	movs	r1, #144	; 0x90
 80036a6:	05c9      	lsls	r1, r1, #23
 80036a8:	2002      	movs	r0, #2
 80036aa:	6288      	str	r0, [r1, #40]	; 0x28
		BUZZER_OFF();				// STOPS THE BUZZER after the end of exit OR ENTRY delay
 80036ac:	2080      	movs	r0, #128	; 0x80
 80036ae:	0100      	lsls	r0, r0, #4
 80036b0:	6288      	str	r0, [r1, #40]	; 0x28
		g_Follow_Zone_has_Open_mem 			= MY_NO ;
 80036b2:	497f      	ldr	r1, [pc, #508]	; (80038b0 <Test_The_Time_Depending_Events+0x258>)
 80036b4:	700a      	strb	r2, [r1, #0]
		g_Delay_Zone_has_Open_mem			= MY_NO ;
 80036b6:	497f      	ldr	r1, [pc, #508]	; (80038b4 <Test_The_Time_Depending_Events+0x25c>)
 80036b8:	700a      	strb	r2, [r1, #0]
		g_Current_Alarm_Time_ZONES_given	= 0 ;
 80036ba:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <Test_The_Time_Depending_Events+0x260>)
 80036bc:	8013      	strh	r3, [r2, #0]
		if 	( g_Entry_Exit_Time_Delay == 0 )	{
 80036be:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <Test_The_Time_Depending_Events+0x24c>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <Test_The_Time_Depending_Events+0x76>
			g_Entry_Exit_Sequence = DELAY_ZONES_SEQUENCE_ON_ARM ;
 80036c8:	2202      	movs	r2, #2
 80036ca:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 80036cc:	701a      	strb	r2, [r3, #0]
		g_Current_Alarm_Time_ZONES_given = 0 ;
 80036ce:	2200      	movs	r2, #0
 80036d0:	4b79      	ldr	r3, [pc, #484]	; (80038b8 <Test_The_Time_Depending_Events+0x260>)
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	e7c5      	b.n	8003662 <Test_The_Time_Depending_Events+0xa>
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_EXIT_DELAY ] = 0 ;   //  RESET ( STOP ) TO DISCOUNT THE ALARM TIME
 80036d6:	2300      	movs	r3, #0
 80036d8:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <Test_The_Time_Depending_Events+0x248>)
 80036da:	6053      	str	r3, [r2, #4]
		g_Entry_Exit_Time_Delay = 0 ;
 80036dc:	4a71      	ldr	r2, [pc, #452]	; (80038a4 <Test_The_Time_Depending_Events+0x24c>)
 80036de:	8013      	strh	r3, [r2, #0]
		if 		( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_EXIT_DELAY ){
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d012      	beq.n	800370e <Test_The_Time_Depending_Events+0xb6>
		else if ( (g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_BUZZER_ENTRY ) || ( g_Entry_Exit_Sequence == DELAY_ZONES_SEQUENCE_ON_SILENT_ENTRY ) ) {
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d043      	beq.n	8003778 <Test_The_Time_Depending_Events+0x120>
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d03f      	beq.n	8003778 <Test_The_Time_Depending_Events+0x120>
		if ( g_ALARM_Counting_Time == 0 )	{
 80036f8:	4b6c      	ldr	r3, [pc, #432]	; (80038ac <Test_The_Time_Depending_Events+0x254>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1b3      	bne.n	800366a <Test_The_Time_Depending_Events+0x12>
			BUZZER_OFF();				// STOPS THE BUZZER after the end of exit OR ENTRY delay
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	2390      	movs	r3, #144	; 0x90
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	e7ad      	b.n	800366a <Test_The_Time_Depending_Events+0x12>
			g_Entry_Exit_Sequence = DELAY_ZONES_SEQUENCE_ON_ARM ;
 800370e:	2202      	movs	r2, #2
 8003710:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 8003712:	701a      	strb	r2, [r3, #0]
			if   (	( g_ENTRY_Delay_Zone_did_Not_OPEN == MY_TRUE  ) && ( g_Switch_Mode == ALARM_CONTROL_ON_OFF_MODE_AS_REMOTE )  ) {
 8003714:	4b69      	ldr	r3, [pc, #420]	; (80038bc <Test_The_Time_Depending_Events+0x264>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d003      	beq.n	8003724 <Test_The_Time_Depending_Events+0xcc>
			SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_ARM );		// 		N_17 Changed
 800371c:	2001      	movs	r0, #1
 800371e:	f7ff ff61 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 8003722:	e7e9      	b.n	80036f8 <Test_The_Time_Depending_Events+0xa0>
			if   (	( g_ENTRY_Delay_Zone_did_Not_OPEN == MY_TRUE  ) && ( g_Switch_Mode == ALARM_CONTROL_ON_OFF_MODE_AS_REMOTE )  ) {
 8003724:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <Test_The_Time_Depending_Events+0x268>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d1f7      	bne.n	800371c <Test_The_Time_Depending_Events+0xc4>
				if 			( g_AUTO_Stay_Instant == AUTO_ARM_DISABLE_VALUE ) { // g_Switch_Stable_Status == SWITCH_ON_REGULAR_ARM )  {
 800372c:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <Test_The_Time_Depending_Events+0x26c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <Test_The_Time_Depending_Events+0xe0>
					asm("nop");
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	e7f1      	b.n	800371c <Test_The_Time_Depending_Events+0xc4>
				else if 	(   ( g_AUTO_Stay_Instant    == AUTO_SLEEP_ARM_VALUE )
 8003738:	4b62      	ldr	r3, [pc, #392]	; (80038c4 <Test_The_Time_Depending_Events+0x26c>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d00e      	beq.n	800375e <Test_The_Time_Depending_Events+0x106>
				else if 	(	( g_AUTO_Stay_Instant    == AUTO_STAY_ARM_VALUE )
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <Test_The_Time_Depending_Events+0x26c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d1e9      	bne.n	800371c <Test_The_Time_Depending_Events+0xc4>
						    &&  ( g_Switch_Stable_Status == SWITCH_ON_REGULAR_ARM ) ) {
 8003748:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <Test_The_Time_Depending_Events+0x270>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d1e4      	bne.n	800371c <Test_The_Time_Depending_Events+0xc4>
					Change_The_FOLLOW_Zones_AS_DISABLE();
 8003752:	f7ff fec7 	bl	80034e4 <Change_The_FOLLOW_Zones_AS_DISABLE>
					g_Switch_Stable_Status = SWITCH_ON_STAY_ARM ;
 8003756:	2202      	movs	r2, #2
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <Test_The_Time_Depending_Events+0x270>)
 800375a:	801a      	strh	r2, [r3, #0]
 800375c:	e7de      	b.n	800371c <Test_The_Time_Depending_Events+0xc4>
							&&  ( g_Switch_Stable_Status == SWITCH_ON_REGULAR_ARM ) ) {
 800375e:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <Test_The_Time_Depending_Events+0x270>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d1eb      	bne.n	8003740 <Test_The_Time_Depending_Events+0xe8>
					Change_The_FOLLOW_Zones_AS_DISABLE();
 8003768:	f7ff febc 	bl	80034e4 <Change_The_FOLLOW_Zones_AS_DISABLE>
					g_Switch_Stable_Status = SWITCH_ON_STAY_INSTANT_ARM ;
 800376c:	2203      	movs	r2, #3
 800376e:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <Test_The_Time_Depending_Events+0x270>)
 8003770:	801a      	strh	r2, [r3, #0]
					Change_The_Delay_Zones_As_Instant();
 8003772:	f7ff fe99 	bl	80034a8 <Change_The_Delay_Zones_As_Instant>
 8003776:	e7d1      	b.n	800371c <Test_The_Time_Depending_Events+0xc4>
			if  ( g_ALARMS_Counter_In_one_ARM_Sequence[ g_Delay_Zone_has_Open_Index_mem ] < MAXIMUM_ALARMS_IN_ONE_ARMING_SEQUENCE )	{
 8003778:	4b54      	ldr	r3, [pc, #336]	; (80038cc <Test_The_Time_Depending_Events+0x274>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	4a54      	ldr	r2, [pc, #336]	; (80038d0 <Test_The_Time_Depending_Events+0x278>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d8b7      	bhi.n	80036f8 <Test_The_Time_Depending_Events+0xa0>
				g_ALARMS_Counter_In_one_ARM_Sequence[ g_Delay_Zone_has_Open_Index_mem ]++ ;  // FALSE COUNTER INCREASE VALUE
 8003788:	4950      	ldr	r1, [pc, #320]	; (80038cc <Test_The_Time_Depending_Events+0x274>)
 800378a:	780a      	ldrb	r2, [r1, #0]
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	4850      	ldr	r0, [pc, #320]	; (80038d0 <Test_The_Time_Depending_Events+0x278>)
 8003790:	5c83      	ldrb	r3, [r0, r2]
 8003792:	3301      	adds	r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	5483      	strb	r3, [r0, r2]
				START_STOP_ALARM( MY_START , ( ( uint16_t ) 1 << g_Delay_Zone_has_Open_Index_mem ) );
 8003798:	780b      	ldrb	r3, [r1, #0]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2101      	movs	r1, #1
 800379e:	4099      	lsls	r1, r3
 80037a0:	b289      	uxth	r1, r1
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7ff fca4 	bl	80030f0 <START_STOP_ALARM>
				g_Entry_Exit_Sequence = DELAY_ZONES_SEQUENCE_ON_ALARM ;
 80037a8:	2205      	movs	r2, #5
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 80037ac:	701a      	strb	r2, [r3, #0]
				if  ( g_Follow_Zone_has_Open_mem == MY_YES )	{
 80037ae:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <Test_The_Time_Depending_Events+0x258>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d1a0      	bne.n	80036f8 <Test_The_Time_Depending_Events+0xa0>
					g_Current_Alarm_Time_ZONES_given	= 0 ;
 80037b6:	2200      	movs	r2, #0
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <Test_The_Time_Depending_Events+0x260>)
 80037ba:	801a      	strh	r2, [r3, #0]
					Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time( ( uint16_t ) 1 << g_Follow_Zone_has_Open_Index_mem ) ;
 80037bc:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <Test_The_Time_Depending_Events+0x27c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2001      	movs	r0, #1
 80037c4:	4098      	lsls	r0, r3
 80037c6:	b280      	uxth	r0, r0
 80037c8:	f7ff fc6a 	bl	80030a0 <Load_New_Zones_In_Alarm_Flags_While_ANOTHER_Zone_already_in_Alarm_Counting_Time>
 80037cc:	e794      	b.n	80036f8 <Test_The_Time_Depending_Events+0xa0>
			&& ( g_ALARM_Counting_Time == 0 )
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <Test_The_Time_Depending_Events+0x254>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d000      	beq.n	80037da <Test_The_Time_Depending_Events+0x182>
 80037d8:	e751      	b.n	800367e <Test_The_Time_Depending_Events+0x26>
			&& ( g_Switch_Stable_Status != SWITCH_ON_STAY_INSTANT_ARM )   )  {				//  N_4   ADDED to avoid BUZZER ON when sleep ARM
 80037da:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <Test_The_Time_Depending_Events+0x270>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d100      	bne.n	80037e6 <Test_The_Time_Depending_Events+0x18e>
 80037e4:	e74b      	b.n	800367e <Test_The_Time_Depending_Events+0x26>
		g_Buzzer_ON_OFF_Times[ g_Buzzer_ON_OFF_Flag ]-- ;
 80037e6:	483c      	ldr	r0, [pc, #240]	; (80038d8 <Test_The_Time_Depending_Events+0x280>)
 80037e8:	7802      	ldrb	r2, [r0, #0]
 80037ea:	493c      	ldr	r1, [pc, #240]	; (80038dc <Test_The_Time_Depending_Events+0x284>)
 80037ec:	0052      	lsls	r2, r2, #1
 80037ee:	5a53      	ldrh	r3, [r2, r1]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	5253      	strh	r3, [r2, r1]
		if  ( g_Buzzer_ON_OFF_Times[ g_Buzzer_ON_OFF_Flag ] == 0 )	{
 80037f6:	7803      	ldrb	r3, [r0, #0]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	5a5b      	ldrh	r3, [r3, r1]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d000      	beq.n	8003804 <Test_The_Time_Depending_Events+0x1ac>
 8003802:	e746      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
			if ( g_Buzzer_ON_OFF_Flag == MY_ON ){
 8003804:	7803      	ldrb	r3, [r0, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d016      	beq.n	8003838 <Test_The_Time_Depending_Events+0x1e0>
			else if ( g_Buzzer_ON_OFF_Flag == MY_OFF) {
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <Test_The_Time_Depending_Events+0x280>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d000      	beq.n	8003814 <Test_The_Time_Depending_Events+0x1bc>
 8003812:	e73e      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
				if (g_Entry_Exit_Time_Delay < TIME_TO_CHANGE_THE_BUZZER_BEEP_SPEED ) {
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <Test_The_Time_Depending_Events+0x24c>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b08      	cmp	r3, #8
 800381c:	d821      	bhi.n	8003862 <Test_The_Time_Depending_Events+0x20a>
					g_Buzzer_ON_OFF_Times[ MY_ON ] = BUZZER_ON_EXIT_BEEP_AT_THE_END_TIME_ON ;
 800381e:	22fa      	movs	r2, #250	; 0xfa
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <Test_The_Time_Depending_Events+0x284>)
 8003824:	805a      	strh	r2, [r3, #2]
				g_Buzzer_ON_OFF_Flag = MY_ON ;
 8003826:	2201      	movs	r2, #1
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <Test_The_Time_Depending_Events+0x280>)
 800382a:	701a      	strb	r2, [r3, #0]
				BUZZER_ON();
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	2390      	movs	r3, #144	; 0x90
 8003832:	05db      	lsls	r3, r3, #23
 8003834:	619a      	str	r2, [r3, #24]
 8003836:	e72c      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
				if (g_Entry_Exit_Time_Delay < TIME_TO_CHANGE_THE_BUZZER_BEEP_SPEED ) {
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <Test_The_Time_Depending_Events+0x24c>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b08      	cmp	r3, #8
 8003840:	d80b      	bhi.n	800385a <Test_The_Time_Depending_Events+0x202>
					g_Buzzer_ON_OFF_Times[ MY_OFF ] = BUZZER_ON_EXIT_BEEP_AT_THE_END_TIME_OFF ;
 8003842:	22fa      	movs	r2, #250	; 0xfa
 8003844:	0152      	lsls	r2, r2, #5
 8003846:	800a      	strh	r2, [r1, #0]
				g_Buzzer_ON_OFF_Flag = MY_OFF ;
 8003848:	2200      	movs	r2, #0
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <Test_The_Time_Depending_Events+0x280>)
 800384c:	701a      	strb	r2, [r3, #0]
				BUZZER_OFF();
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	2390      	movs	r3, #144	; 0x90
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
 8003858:	e71b      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
					g_Buzzer_ON_OFF_Times[ MY_OFF ] = BUZZER_ON_EXIT_BEEP_TIME_OFF ;
 800385a:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <Test_The_Time_Depending_Events+0x288>)
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <Test_The_Time_Depending_Events+0x284>)
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e7f2      	b.n	8003848 <Test_The_Time_Depending_Events+0x1f0>
					g_Buzzer_ON_OFF_Times[ MY_ON ] = BUZZER_ON_EXIT_BEEP_TIME_ON ;
 8003862:	22fa      	movs	r2, #250	; 0xfa
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <Test_The_Time_Depending_Events+0x284>)
 8003868:	805a      	strh	r2, [r3, #2]
 800386a:	e7dc      	b.n	8003826 <Test_The_Time_Depending_Events+0x1ce>
		if  ( g_Buzzer_ON_OFF_Times[ MY_ON ] )   {
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <Test_The_Time_Depending_Events+0x284>)
 800386e:	885b      	ldrh	r3, [r3, #2]
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d100      	bne.n	8003878 <Test_The_Time_Depending_Events+0x220>
 8003876:	e70c      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
			g_Buzzer_ON_OFF_Times[ MY_ON ]-- ;
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <Test_The_Time_Depending_Events+0x284>)
 800387a:	8853      	ldrh	r3, [r2, #2]
 800387c:	3b01      	subs	r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	8053      	strh	r3, [r2, #2]
			if  ( g_Buzzer_ON_OFF_Times[ MY_ON ] == 0 )	{
 8003882:	8853      	ldrh	r3, [r2, #2]
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d000      	beq.n	800388c <Test_The_Time_Depending_Events+0x234>
 800388a:	e702      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
				BUZZER_OFF();
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	2390      	movs	r3, #144	; 0x90
 8003892:	05db      	lsls	r3, r3, #23
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
				g_Entry_Exit_Sequence = DELAY_ZONES_SEQUENCE_ON_SILENT_ENTRY ;
 8003896:	2204      	movs	r2, #4
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <Test_The_Time_Depending_Events+0x250>)
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e6f9      	b.n	8003692 <Test_The_Time_Depending_Events+0x3a>
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	2000010c 	.word	0x2000010c
 80038a4:	2000005c 	.word	0x2000005c
 80038a8:	2000005b 	.word	0x2000005b
 80038ac:	20000048 	.word	0x20000048
 80038b0:	20000060 	.word	0x20000060
 80038b4:	2000005a 	.word	0x2000005a
 80038b8:	20000054 	.word	0x20000054
 80038bc:	20000002 	.word	0x20000002
 80038c0:	20000009 	.word	0x20000009
 80038c4:	2000004a 	.word	0x2000004a
 80038c8:	20000078 	.word	0x20000078
 80038cc:	20000059 	.word	0x20000059
 80038d0:	2000046c 	.word	0x2000046c
 80038d4:	2000005f 	.word	0x2000005f
 80038d8:	20000050 	.word	0x20000050
 80038dc:	200001a0 	.word	0x200001a0
 80038e0:	00004e20 	.word	0x00004e20

080038e4 <SEND_Uart_Protocol_V2_Packet_Data>:
//
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////			N_12   ADDED
void		SEND_Uart_Protocol_V2_Packet_Data( uint8_t Data_Length )
{
 80038e4:	b510      	push	{r4, lr}
	////////////////////////////////////////////////////
	//	LOAD THE DATA LENGTH ON THE BUFFER TO SEND
	////////////////////////////////////////////////////
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_DATA_LENGTH ] = Data_Length ;
 80038e6:	4907      	ldr	r1, [pc, #28]	; (8003904 <SEND_Uart_Protocol_V2_Packet_Data+0x20>)
 80038e8:	7148      	strb	r0, [r1, #5]
	//
	////////////////////////////////
	//   SEND THE DATA
	////////////////////////////////
	Data_Length = Data_Length + UART_PROTOCOL_V2_HEADER_LENGTH  ;
 80038ea:	0003      	movs	r3, r0
 80038ec:	330a      	adds	r3, #10
	g_Process_Buffer[ Data_Length ] = UART_PROTOCOL_V2_ID ;					//      Add the ID PROTOCOL in the end of packet data
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2202      	movs	r2, #2
 80038f2:	54ca      	strb	r2, [r1, r3]
	Data_Length++ ;
 80038f4:	300b      	adds	r0, #11
	//
	HAL_UART_Transmit( &huart1 , g_Process_Buffer , Data_Length , UART_TIME_OUT_ON_TX );
 80038f6:	b2c2      	uxtb	r2, r0
 80038f8:	23c8      	movs	r3, #200	; 0xc8
 80038fa:	4803      	ldr	r0, [pc, #12]	; (8003908 <SEND_Uart_Protocol_V2_Packet_Data+0x24>)
 80038fc:	f7fe ffb2 	bl	8002864 <HAL_UART_Transmit>
}
 8003900:	bd10      	pop	{r4, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	200002c8 	.word	0x200002c8
 8003908:	2000021c 	.word	0x2000021c

0800390c <SEND_Uart_Protocol_V2_Packet_Data_New>:
//
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////			N_56   ADDED
void		SEND_Uart_Protocol_V2_Packet_Data_New( uint8_t Data_Length )
{
 800390c:	b510      	push	{r4, lr}
	////////////////////////////////////////////////////
	//	LOAD THE DATA LENGTH ON THE BUFFER TO SEND
	////////////////////////////////////////////////////
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_DATA_LENGTH ] = Data_Length ;
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <SEND_Uart_Protocol_V2_Packet_Data_New+0x28>)
 8003910:	7148      	strb	r0, [r1, #5]
	//
	////////////////////////////////
	//   SEND THE DATA
	////////////////////////////////
	Data_Length = Data_Length + UART_PROTOCOL_V2_HEADER_LENGTH  ;
 8003912:	0003      	movs	r3, r0
 8003914:	330a      	adds	r3, #10
	g_Process_Buffer[ Data_Length ] = UART_PROTOCOL_V2_ID ;					//      Add the ID PROTOCOL in the end of packet data
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2202      	movs	r2, #2
 800391a:	54ca      	strb	r2, [r1, r3]
	Data_Length++ ;
	//
	//	HAL_UART_Transmit( &huart1 , g_Process_Buffer , Data_Length , UART_TIME_OUT_ON_TX );
	//
	asm("nop");
 800391c:	46c0      	nop			; (mov r8, r8)
	Data_Length++ ;
 800391e:	300b      	adds	r0, #11
	if	( HAL_UART_Transmit_DMA( &huart1, (uint8_t*)g_Process_Buffer, Data_Length )!= HAL_OK)   {
 8003920:	b2c2      	uxtb	r2, r0
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <SEND_Uart_Protocol_V2_Packet_Data_New+0x2c>)
 8003924:	f7fe fd4e 	bl	80023c4 <HAL_UART_Transmit_DMA>
 8003928:	2800      	cmp	r0, #0
 800392a:	d000      	beq.n	800392e <SEND_Uart_Protocol_V2_Packet_Data_New+0x22>
		asm("nop");
 800392c:	46c0      	nop			; (mov r8, r8)
	}
	asm("nop");
 800392e:	46c0      	nop			; (mov r8, r8)
}
 8003930:	bd10      	pop	{r4, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	200002c8 	.word	0x200002c8
 8003938:	2000021c 	.word	0x2000021c

0800393c <LOAD_MONITORING_All_Data_AND_Send>:
{
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	0015      	movs	r5, r2
 8003940:	001c      	movs	r4, r3
	LOAD_Header_Data_On_Buffer_to_Send_Response( Write_Read_Or_Request_Response , Success_Or_Fail );
 8003942:	f7ff fae7 	bl	8002f14 <LOAD_Header_Data_On_Buffer_to_Send_Response>
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_COMMAND_ID ] 		= 	CMD_ID_EXECUTE_MONITORING_COMMAND ;
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <LOAD_MONITORING_All_Data_AND_Send+0x20>)
 8003948:	2202      	movs	r2, #2
 800394a:	719a      	strb	r2, [r3, #6]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_PARAMETER_1 ] 	=  	SUB_CMD_ID  ;
 800394c:	71dd      	strb	r5, [r3, #7]
	g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_PARAMETER_2 ] 	=  	SUB_SUB_CMD_ID  ;
 800394e:	721c      	strb	r4, [r3, #8]
	LOAD_Zones_Status_On_Buffer_to_Send_INFORM();
 8003950:	f7ff fafa 	bl	8002f48 <LOAD_Zones_Status_On_Buffer_to_Send_INFORM>
	SEND_Uart_Protocol_V2_Packet_Data_New( MONITORING_DATA_LENGTH );
 8003954:	2004      	movs	r0, #4
 8003956:	f7ff ffd9 	bl	800390c <SEND_Uart_Protocol_V2_Packet_Data_New>
}
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	200002c8 	.word	0x200002c8

08003960 <UPDATE_Mobile_User_For_New_Monitoring_Data>:
{
 8003960:	b510      	push	{r4, lr}
	if 	( g_Tasks_Times[ TASK_INDEX_UPDATE_MOBILE_USER_MONITORING_DATA ] == 0 ) {
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xe4>)
 8003964:	8adb      	ldrh	r3, [r3, #22]
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
		g_Tasks_Times[ TASK_INDEX_UPDATE_MOBILE_USER_MONITORING_DATA ] = INTERVAL_TIME_TO_UPDATE_MONITORING_MOBILE_USER ;
 800396c:	22e1      	movs	r2, #225	; 0xe1
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xe4>)
 8003972:	82da      	strh	r2, [r3, #22]
		if  ( g_START_Monitoring == MY_TRUE  ) {
 8003974:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xe8>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d004      	beq.n	8003986 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x26>
		else if   (	( g_START_STOP_Trigger_Monitoring == MY_TRUE ) && ( g_START_Monitoring == MY_FALSE )  ) {
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <UPDATE_Mobile_User_For_New_Monitoring_Data+0xec>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d051      	beq.n	8003a28 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xc8>
}
 8003984:	bd10      	pop	{r4, pc}
			if ( g_START_STOP_Trigger_Monitoring == MY_TRUE )   {
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <UPDATE_Mobile_User_For_New_Monitoring_Data+0xec>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d018      	beq.n	80039c0 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x60>
			else if  (  ( g_SUB_CMD_ID > 0 ) && ( g_Wireless_Remote_Control_Action == MY_FALSE ) ) {
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf0>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <UPDATE_Mobile_User_For_New_Monitoring_Data+0x3e>
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf4>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d025      	beq.n	80039ea <UPDATE_Mobile_User_For_New_Monitoring_Data+0x8a>
			else if  (  g_Wireless_Remote_Control_Action == MY_TRUE  )  {								//		N_56   Add
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf4>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d02e      	beq.n	8003a04 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xa4>
				LOAD_MONITORING_All_Data_AND_Send( PROTOCOL_V2_INFORM , g_Panel_Ready_To_Arm , ( uint8_t )( g_Switch_Stable_Status ) , ( uint8_t )( g_Alarm_on_Zones ) );
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf8>)
 80039a8:	7819      	ldrb	r1, [r3, #0]
 80039aa:	b2c9      	uxtb	r1, r1
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <UPDATE_Mobile_User_For_New_Monitoring_Data+0xfc>)
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x100>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	2005      	movs	r0, #5
 80039ba:	f7ff ffbf 	bl	800393c <LOAD_MONITORING_All_Data_AND_Send>
 80039be:	e7e1      	b.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
				g_START_STOP_Trigger_Monitoring	= MY_FALSE ;
 80039c0:	2200      	movs	r2, #0
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <UPDATE_Mobile_User_For_New_Monitoring_Data+0xec>)
 80039c4:	701a      	strb	r2, [r3, #0]
				if 		( g_START_WIFI_Monitoring == MY_TRUE ) {															//		N_20
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x104>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d006      	beq.n	80039dc <UPDATE_Mobile_User_For_New_Monitoring_Data+0x7c>
					LOAD_MONITORING_All_Data_AND_Send( PROTOCOL_V2_RESPONSE_INFORM , MY_SUCCESS , SUB_CMD_ID_START_MONITORING , 0 );
 80039ce:	2300      	movs	r3, #0
 80039d0:	2206      	movs	r2, #6
 80039d2:	2101      	movs	r1, #1
 80039d4:	2007      	movs	r0, #7
 80039d6:	f7ff ffb1 	bl	800393c <LOAD_MONITORING_All_Data_AND_Send>
 80039da:	e7d3      	b.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
					LOAD_MONITORING_All_Data_AND_Send( PROTOCOL_V2_RESPONSE_INFORM , MY_SUCCESS , SUB_CMD_ID_START_WIFI_MONITORING , 0 );
 80039dc:	2300      	movs	r3, #0
 80039de:	3208      	adds	r2, #8
 80039e0:	2101      	movs	r1, #1
 80039e2:	2007      	movs	r0, #7
 80039e4:	f7ff ffaa 	bl	800393c <LOAD_MONITORING_All_Data_AND_Send>
 80039e8:	e7cc      	b.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
				LOAD_MONITORING_All_Data_AND_Send( PROTOCOL_V2_RESPONSE_INFORM , g_SUB_CMD_ID_Result , g_SUB_CMD_ID , 0 );   	// N_17
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x108>)
 80039ec:	7819      	ldrb	r1, [r3, #0]
 80039ee:	b2c9      	uxtb	r1, r1
 80039f0:	4c17      	ldr	r4, [pc, #92]	; (8003a50 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf0>)
 80039f2:	7822      	ldrb	r2, [r4, #0]
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	2300      	movs	r3, #0
 80039f8:	2007      	movs	r0, #7
 80039fa:	f7ff ff9f 	bl	800393c <LOAD_MONITORING_All_Data_AND_Send>
				g_SUB_CMD_ID = 0 ;
 80039fe:	2300      	movs	r3, #0
 8003a00:	7023      	strb	r3, [r4, #0]
 8003a02:	e7bf      	b.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
				LOAD_MONITORING_All_Data_AND_Send( PROTOCOL_V2_INFORM , g_Panel_Ready_To_Arm , ( uint8_t )( g_Switch_Stable_Status ) , ( uint8_t )( g_Alarm_on_Zones ) );
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf8>)
 8003a06:	7819      	ldrb	r1, [r3, #0]
 8003a08:	b2c9      	uxtb	r1, r1
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <UPDATE_Mobile_User_For_New_Monitoring_Data+0xfc>)
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x100>)
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	2005      	movs	r0, #5
 8003a18:	f7ff ff90 	bl	800393c <LOAD_MONITORING_All_Data_AND_Send>
				g_Wireless_Remote_Control_Action 	= MY_FALSE ;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf4>)
 8003a20:	7013      	strb	r3, [r2, #0]
				g_SUB_CMD_ID 						= 0 ;
 8003a22:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xf0>)
 8003a24:	7013      	strb	r3, [r2, #0]
 8003a26:	e7ad      	b.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
		else if   (	( g_START_STOP_Trigger_Monitoring == MY_TRUE ) && ( g_START_Monitoring == MY_FALSE )  ) {
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <UPDATE_Mobile_User_For_New_Monitoring_Data+0xe8>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1a9      	bne.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
			g_START_STOP_Trigger_Monitoring									= MY_FALSE ;	// 	Reset the trigger flag
 8003a30:	2200      	movs	r2, #0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <UPDATE_Mobile_User_For_New_Monitoring_Data+0xec>)
 8003a34:	701a      	strb	r2, [r3, #0]
			LOAD_MONITORING_All_Data_AND_Send( PROTOCOL_V2_RESPONSE_INFORM , MY_SUCCESS , SUB_CMD_ID_STOP_MONITORING , 0 );
 8003a36:	2300      	movs	r3, #0
 8003a38:	3207      	adds	r2, #7
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	2007      	movs	r0, #7
 8003a3e:	f7ff ff7d 	bl	800393c <LOAD_MONITORING_All_Data_AND_Send>
}
 8003a42:	e79f      	b.n	8003984 <UPDATE_Mobile_User_For_New_Monitoring_Data+0x24>
 8003a44:	20000128 	.word	0x20000128
 8003a48:	2000006f 	.word	0x2000006f
 8003a4c:	20000070 	.word	0x20000070
 8003a50:	20000072 	.word	0x20000072
 8003a54:	2000007c 	.word	0x2000007c
 8003a58:	20000067 	.word	0x20000067
 8003a5c:	20000078 	.word	0x20000078
 8003a60:	2000004c 	.word	0x2000004c
 8003a64:	20000071 	.word	0x20000071
 8003a68:	20000073 	.word	0x20000073

08003a6c <Transfer_Programming_Data_to_Be_Write_or_Read>:
void        Transfer_Programming_Data_to_Be_Write_or_Read( uint8_t Write_or_Read )
{
	////////////////////////////////////////////////////////////////
	// SELECT THE CURRENT SELECTED OPERATION ( READ - WRITE )
	////////////////////////////////////////////////////////////////
	if  	( Write_or_Read == MY_WRITE ) {
 8003a6c:	2801      	cmp	r0, #1
 8003a6e:	d029      	beq.n	8003ac4 <Transfer_Programming_Data_to_Be_Write_or_Read+0x58>
		g_Programming_Data_Array[ PROGR_DATA_11_INDEX ] = g_AUTO_Stay_Instant ;
		//
		g_Programming_Data_Array[ PROGR_DATA_12_INDEX ] = g_Zones_Wireless ;    					//   N_50     ADDED
		g_Programming_Data_Array[ PROGR_DATA_13_INDEX ] = g_Zones_Chime ;    						//    >>        >>
	}
	else if ( Write_or_Read == MY_READ ) {
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d126      	bne.n	8003ac2 <Transfer_Programming_Data_to_Be_Write_or_Read+0x56>
		//////////////////////////////////////////////////////////////////////////
		//   AFTER LOAD THE PROGRAMMING DATA FROM THE FLASH THEN TRANSFER
		//   THEM IN THE GLOBAL VARIABLES TO BE READY FOR USED IN THE PROGRAM
		//////////////////////////////////////////////////////////////////////////
		g_Exit_Time									= g_Programming_Data_Array[ PROGR_DATA_1_INDEX ] ;
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <Transfer_Programming_Data_to_Be_Write_or_Read+0xa4>)
 8003a76:	8819      	ldrh	r1, [r3, #0]
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <Transfer_Programming_Data_to_Be_Write_or_Read+0xa8>)
 8003a7a:	8011      	strh	r1, [r2, #0]
		g_Entry_Time								= g_Programming_Data_Array[ PROGR_DATA_2_INDEX ] ;
 8003a7c:	8859      	ldrh	r1, [r3, #2]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <Transfer_Programming_Data_to_Be_Write_or_Read+0xac>)
 8003a80:	8011      	strh	r1, [r2, #0]
		g_Alarm_Time								= g_Programming_Data_Array[ PROGR_DATA_3_INDEX ] ;
 8003a82:	8899      	ldrh	r1, [r3, #4]
 8003a84:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <Transfer_Programming_Data_to_Be_Write_or_Read+0xb0>)
 8003a86:	8011      	strh	r1, [r2, #0]
		g_Zones_TYPE_Configuration[ ZONE_1_INDEX ]	= g_Programming_Data_Array[ PROGR_DATA_4_INDEX ] ;
 8003a88:	7999      	ldrb	r1, [r3, #6]
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <Transfer_Programming_Data_to_Be_Write_or_Read+0xb4>)
 8003a8c:	7011      	strb	r1, [r2, #0]
		g_Zones_TYPE_Configuration[ ZONE_2_INDEX ]	= g_Programming_Data_Array[ PROGR_DATA_5_INDEX ] ;
 8003a8e:	7a19      	ldrb	r1, [r3, #8]
 8003a90:	7051      	strb	r1, [r2, #1]
		g_Zones_TYPE_Configuration[ ZONE_3_INDEX ]	= g_Programming_Data_Array[ PROGR_DATA_6_INDEX ] ;
 8003a92:	7a99      	ldrb	r1, [r3, #10]
 8003a94:	7091      	strb	r1, [r2, #2]
		g_Zones_TYPE_Configuration[ ZONE_4_INDEX ]	= g_Programming_Data_Array[ PROGR_DATA_7_INDEX ] ;
 8003a96:	7b19      	ldrb	r1, [r3, #12]
 8003a98:	70d1      	strb	r1, [r2, #3]

		//   N_57
		//   The below definition its FIXED as PANIC ZONE the 5th ( VIRTUAL ZONE )
		//   Does not RECORD on the FLASH MEMORY
		//
		g_Zones_TYPE_Configuration[ ZONE_5_INDEX ]	= ZONE_TYPE_24_PANIC ;
 8003a9a:	2104      	movs	r1, #4
 8003a9c:	7111      	strb	r1, [r2, #4]

		g_Switch_Mode								= g_Programming_Data_Array[ PROGR_DATA_8_INDEX ] ;
 8003a9e:	7b99      	ldrb	r1, [r3, #14]
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <Transfer_Programming_Data_to_Be_Write_or_Read+0xb8>)
 8003aa2:	7011      	strb	r1, [r2, #0]
		g_PGM_Mode									= g_Programming_Data_Array[ PROGR_DATA_9_INDEX ] ;
 8003aa4:	7c19      	ldrb	r1, [r3, #16]
 8003aa6:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <Transfer_Programming_Data_to_Be_Write_or_Read+0xbc>)
 8003aa8:	7011      	strb	r1, [r2, #0]
		g_SIREN_Follow_Remote_Control				= g_Programming_Data_Array[ PROGR_DATA_10_INDEX ] ;
 8003aaa:	7c99      	ldrb	r1, [r3, #18]
 8003aac:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <Transfer_Programming_Data_to_Be_Write_or_Read+0xc0>)
 8003aae:	7011      	strb	r1, [r2, #0]
		g_AUTO_Stay_Instant							= g_Programming_Data_Array[ PROGR_DATA_11_INDEX ] ;		//		N_18  added
 8003ab0:	7d19      	ldrb	r1, [r3, #20]
 8003ab2:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <Transfer_Programming_Data_to_Be_Write_or_Read+0xc4>)
 8003ab4:	7011      	strb	r1, [r2, #0]
		//
		g_Zones_Wireless							= g_Programming_Data_Array[ PROGR_DATA_12_INDEX ] ;		//		N_50  ADDED
 8003ab6:	8ad9      	ldrh	r1, [r3, #22]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <Transfer_Programming_Data_to_Be_Write_or_Read+0xc8>)
 8003aba:	8011      	strh	r1, [r2, #0]
		g_Zones_Chime								= g_Programming_Data_Array[ PROGR_DATA_13_INDEX ] ;		//		  >>    >>
 8003abc:	8b1a      	ldrh	r2, [r3, #24]
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <Transfer_Programming_Data_to_Be_Write_or_Read+0xcc>)
 8003ac0:	801a      	strh	r2, [r3, #0]
	}
}
 8003ac2:	4770      	bx	lr
		g_Programming_Data_Array[ PROGR_DATA_1_INDEX ] 	= g_Exit_Time  ;
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <Transfer_Programming_Data_to_Be_Write_or_Read+0xa8>)
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <Transfer_Programming_Data_to_Be_Write_or_Read+0xa4>)
 8003aca:	801a      	strh	r2, [r3, #0]
		g_Programming_Data_Array[ PROGR_DATA_2_INDEX ] 	= g_Entry_Time ;
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <Transfer_Programming_Data_to_Be_Write_or_Read+0xac>)
 8003ace:	8812      	ldrh	r2, [r2, #0]
 8003ad0:	805a      	strh	r2, [r3, #2]
		g_Programming_Data_Array[ PROGR_DATA_3_INDEX ] 	= g_Alarm_Time ;
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <Transfer_Programming_Data_to_Be_Write_or_Read+0xb0>)
 8003ad4:	8812      	ldrh	r2, [r2, #0]
 8003ad6:	809a      	strh	r2, [r3, #4]
		g_Programming_Data_Array[ PROGR_DATA_4_INDEX ] 	= g_Zones_TYPE_Configuration[ ZONE_1_INDEX ] ;
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <Transfer_Programming_Data_to_Be_Write_or_Read+0xb4>)
 8003ada:	7811      	ldrb	r1, [r2, #0]
 8003adc:	80d9      	strh	r1, [r3, #6]
		g_Programming_Data_Array[ PROGR_DATA_5_INDEX ] 	= g_Zones_TYPE_Configuration[ ZONE_2_INDEX ] ;
 8003ade:	7851      	ldrb	r1, [r2, #1]
 8003ae0:	8119      	strh	r1, [r3, #8]
		g_Programming_Data_Array[ PROGR_DATA_6_INDEX ] 	= g_Zones_TYPE_Configuration[ ZONE_3_INDEX ] ;
 8003ae2:	7891      	ldrb	r1, [r2, #2]
 8003ae4:	8159      	strh	r1, [r3, #10]
		g_Programming_Data_Array[ PROGR_DATA_7_INDEX ] 	= g_Zones_TYPE_Configuration[ ZONE_4_INDEX ] ;
 8003ae6:	78d2      	ldrb	r2, [r2, #3]
 8003ae8:	819a      	strh	r2, [r3, #12]
		g_Programming_Data_Array[ PROGR_DATA_8_INDEX ] 	= g_Switch_Mode ;
 8003aea:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <Transfer_Programming_Data_to_Be_Write_or_Read+0xb8>)
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	81da      	strh	r2, [r3, #14]
		g_Programming_Data_Array[ PROGR_DATA_9_INDEX ] 	= g_PGM_Mode ;
 8003af0:	4a0d      	ldr	r2, [pc, #52]	; (8003b28 <Transfer_Programming_Data_to_Be_Write_or_Read+0xbc>)
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	821a      	strh	r2, [r3, #16]
		g_Programming_Data_Array[ PROGR_DATA_10_INDEX ] = g_SIREN_Follow_Remote_Control ;
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <Transfer_Programming_Data_to_Be_Write_or_Read+0xc0>)
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	825a      	strh	r2, [r3, #18]
		g_Programming_Data_Array[ PROGR_DATA_11_INDEX ] = g_AUTO_Stay_Instant ;
 8003afc:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <Transfer_Programming_Data_to_Be_Write_or_Read+0xc4>)
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	829a      	strh	r2, [r3, #20]
		g_Programming_Data_Array[ PROGR_DATA_12_INDEX ] = g_Zones_Wireless ;    					//   N_50     ADDED
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <Transfer_Programming_Data_to_Be_Write_or_Read+0xc8>)
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	82da      	strh	r2, [r3, #22]
		g_Programming_Data_Array[ PROGR_DATA_13_INDEX ] = g_Zones_Chime ;    						//    >>        >>
 8003b08:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <Transfer_Programming_Data_to_Be_Write_or_Read+0xcc>)
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	831a      	strh	r2, [r3, #24]
 8003b0e:	e7d8      	b.n	8003ac2 <Transfer_Programming_Data_to_Be_Write_or_Read+0x56>
 8003b10:	20000490 	.word	0x20000490
 8003b14:	20000006 	.word	0x20000006
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	200002c0 	.word	0x200002c0
 8003b24:	20000009 	.word	0x20000009
 8003b28:	20000066 	.word	0x20000066
 8003b2c:	2000006e 	.word	0x2000006e
 8003b30:	2000004a 	.word	0x2000004a
 8003b34:	2000000e 	.word	0x2000000e
 8003b38:	20000080 	.word	0x20000080

08003b3c <Record_All_Programming_Data_on_The_FLASH>:
{
 8003b3c:	b510      	push	{r4, lr}
	Transfer_Programming_Data_to_Be_Write_or_Read( MY_WRITE );
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7ff ff94 	bl	8003a6c <Transfer_Programming_Data_to_Be_Write_or_Read>
	Write_Programming_Data_Values_on_Flash_Memory( DATA_SOURCE_VARIABLES );
 8003b44:	2002      	movs	r0, #2
 8003b46:	f001 fa49 	bl	8004fdc <Write_Programming_Data_Values_on_Flash_Memory>
	Read_Programming_Data_Values_From_Flash_Memory();
 8003b4a:	f001 fac7 	bl	80050dc <Read_Programming_Data_Values_From_Flash_Memory>
	Transfer_Programming_Data_to_Be_Write_or_Read( MY_READ );
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7ff ff8c 	bl	8003a6c <Transfer_Programming_Data_to_Be_Write_or_Read>
}
 8003b54:	bd10      	pop	{r4, pc}
	...

08003b58 <TEST_ALL_Zones_For_ALARM_Events>:
//
//
//
//////////////////////////////////////////////////////////////////////////////					N_7		ADDED
void		TEST_ALL_Zones_For_ALARM_Events()
{
 8003b58:	b510      	push	{r4, lr}
	if ( g_Tasks_Times[ TASK_INDEX_TO_READ_THE_ZONES_IN_ALARM ] == 0 ) {
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <TEST_ALL_Zones_For_ALARM_Events+0x20>)
 8003b5c:	89db      	ldrh	r3, [r3, #14]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d000      	beq.n	8003b66 <TEST_ALL_Zones_For_ALARM_Events+0xe>
		///////////////////////////////////////////////////
		Test_24_and_Panic_Zones();
		//
		Test_NON_24_Zones();
	}
}
 8003b64:	bd10      	pop	{r4, pc}
		g_Tasks_Times[ TASK_INDEX_TO_READ_THE_ZONES_IN_ALARM ] = INTERVAL_TIME_TO_READ_THE_ZONES_IN_ALARM ;
 8003b66:	22c8      	movs	r2, #200	; 0xc8
 8003b68:	0092      	lsls	r2, r2, #2
 8003b6a:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <TEST_ALL_Zones_For_ALARM_Events+0x20>)
 8003b6c:	81da      	strh	r2, [r3, #14]
		Test_24_and_Panic_Zones();
 8003b6e:	f7ff fc0b 	bl	8003388 <Test_24_and_Panic_Zones>
		Test_NON_24_Zones();
 8003b72:	f7ff fb05 	bl	8003180 <Test_NON_24_Zones>
}
 8003b76:	e7f5      	b.n	8003b64 <TEST_ALL_Zones_For_ALARM_Events+0xc>
 8003b78:	20000128 	.word	0x20000128

08003b7c <LOAD_Bypass_Zones_on_Mobile_User_Request>:
//////////////////////////////////////////////////////////////////////////////////			N_18
void		LOAD_Bypass_Zones_on_Mobile_User_Request()
{
	uint8_t  i ;
	//
	if ( g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_PARAMETER_2 ] ==  SUB_SUB_CMD_ID_MONITORING_EXECUTE_BYPASS ) {
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <LOAD_Bypass_Zones_on_Mobile_User_Request+0x28>)
 8003b7e:	7a1b      	ldrb	r3, [r3, #8]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d000      	beq.n	8003b86 <LOAD_Bypass_Zones_on_Mobile_User_Request+0xa>
			if ( g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT + 1 + i ] == 1 ) {
				g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_BYPASS ;
			}
		}
	}
}
 8003b84:	4770      	bx	lr
 8003b86:	2300      	movs	r3, #0
			if ( g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT + 1 + i ] == 1 ) {
 8003b88:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <LOAD_Bypass_Zones_on_Mobile_User_Request+0x28>)
				g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_BYPASS ;
 8003b8a:	2005      	movs	r0, #5
 8003b8c:	e002      	b.n	8003b94 <LOAD_Bypass_Zones_on_Mobile_User_Request+0x18>
 8003b8e:	3301      	adds	r3, #1
		for ( i = ZONE_1_INDEX ; i < ZONES_MAXIMUM ; ++i ) {
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d0f7      	beq.n	8003b84 <LOAD_Bypass_Zones_on_Mobile_User_Request+0x8>
			if ( g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_RESULT + 1 + i ] == 1 ) {
 8003b94:	185a      	adds	r2, r3, r1
 8003b96:	7a92      	ldrb	r2, [r2, #10]
 8003b98:	2a01      	cmp	r2, #1
 8003b9a:	d1f8      	bne.n	8003b8e <LOAD_Bypass_Zones_on_Mobile_User_Request+0x12>
				g_Zones_TYPE_on_Current_Arming_MODE[ i ] = ZONE_TYPE_BYPASS ;
 8003b9c:	4a02      	ldr	r2, [pc, #8]	; (8003ba8 <LOAD_Bypass_Zones_on_Mobile_User_Request+0x2c>)
 8003b9e:	54d0      	strb	r0, [r2, r3]
 8003ba0:	e7f5      	b.n	8003b8e <LOAD_Bypass_Zones_on_Mobile_User_Request+0x12>
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	200002c8 	.word	0x200002c8
 8003ba8:	2000031c 	.word	0x2000031c

08003bac <MOBILE_User_Arm_Disarm_The_System>:
{
 8003bac:	b510      	push	{r4, lr}
	g_SUB_CMD_ID_Result		= MY_FAIL ;
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <MOBILE_User_Arm_Disarm_The_System+0xe4>)
 8003bb2:	701a      	strb	r2, [r3, #0]
	switch  ( User_Action ) {
 8003bb4:	2802      	cmp	r0, #2
 8003bb6:	d02d      	beq.n	8003c14 <MOBILE_User_Arm_Disarm_The_System+0x68>
 8003bb8:	d90c      	bls.n	8003bd4 <MOBILE_User_Arm_Disarm_The_System+0x28>
 8003bba:	2803      	cmp	r0, #3
 8003bbc:	d041      	beq.n	8003c42 <MOBILE_User_Arm_Disarm_The_System+0x96>
 8003bbe:	2804      	cmp	r0, #4
 8003bc0:	d127      	bne.n	8003c12 <MOBILE_User_Arm_Disarm_The_System+0x66>
		if ( g_Switch_Stable_Status == SWITCH_OFF ) {
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d051      	beq.n	8003c70 <MOBILE_User_Arm_Disarm_The_System+0xc4>
		g_SUB_CMD_ID 			= User_Action ;
 8003bcc:	2204      	movs	r2, #4
 8003bce:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <MOBILE_User_Arm_Disarm_The_System+0xec>)
 8003bd0:	701a      	strb	r2, [r3, #0]
}
 8003bd2:	e01e      	b.n	8003c12 <MOBILE_User_Arm_Disarm_The_System+0x66>
	switch  ( User_Action ) {
 8003bd4:	2801      	cmp	r0, #1
 8003bd6:	d11c      	bne.n	8003c12 <MOBILE_User_Arm_Disarm_The_System+0x66>
		if 	( 	( g_Switch_Stable_Status != SWITCH_OFF )
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <MOBILE_User_Arm_Disarm_The_System+0x4a>
			||	( ( g_Switch_Stable_Status == SWITCH_OFF ) && ( g_Alarm_on_Zones > 0 ) )
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10f      	bne.n	8003c0c <MOBILE_User_Arm_Disarm_The_System+0x60>
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <MOBILE_User_Arm_Disarm_The_System+0xf0>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <MOBILE_User_Arm_Disarm_The_System+0x60>
			g_SUB_CMD_ID_Result			= MY_SUCCESS ;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <MOBILE_User_Arm_Disarm_The_System+0xe4>)
 8003bfa:	7013      	strb	r3, [r2, #0]
			g_Switch_Stable_Status 		= SWITCH_OFF ;
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4a25      	ldr	r2, [pc, #148]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003c00:	8011      	strh	r1, [r2, #0]
			g_Switch_Changes_Direction 	= FROM_ON_TO_OFF ;
 8003c02:	4a27      	ldr	r2, [pc, #156]	; (8003ca0 <MOBILE_User_Arm_Disarm_The_System+0xf4>)
 8003c04:	7013      	strb	r3, [r2, #0]
			SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_DISARM );
 8003c06:	2002      	movs	r0, #2
 8003c08:	f7ff fcec 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
		g_SUB_CMD_ID 			= User_Action ;
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <MOBILE_User_Arm_Disarm_The_System+0xec>)
 8003c10:	701a      	strb	r2, [r3, #0]
}
 8003c12:	bd10      	pop	{r4, pc}
		if ( g_Switch_Stable_Status == SWITCH_OFF ) {
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <MOBILE_User_Arm_Disarm_The_System+0x7a>
		g_SUB_CMD_ID 			= User_Action ;
 8003c1e:	2202      	movs	r2, #2
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <MOBILE_User_Arm_Disarm_The_System+0xec>)
 8003c22:	701a      	strb	r2, [r3, #0]
		break;
 8003c24:	e7f5      	b.n	8003c12 <MOBILE_User_Arm_Disarm_The_System+0x66>
			LOAD_Bypass_Zones_on_Mobile_User_Request();
 8003c26:	f7ff ffa9 	bl	8003b7c <LOAD_Bypass_Zones_on_Mobile_User_Request>
			g_SUB_CMD_ID_Result			= MY_SUCCESS ;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <MOBILE_User_Arm_Disarm_The_System+0xe4>)
 8003c2e:	7013      	strb	r3, [r2, #0]
			g_Switch_Stable_Status 		= SWITCH_ON_REGULAR_ARM ;
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003c32:	8013      	strh	r3, [r2, #0]
			g_Switch_Changes_Direction 	= FROM_OFF_TO_ON ;
 8003c34:	2202      	movs	r2, #2
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <MOBILE_User_Arm_Disarm_The_System+0xf4>)
 8003c38:	701a      	strb	r2, [r3, #0]
			SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_ARM );
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f7ff fcd2 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 8003c40:	e7ed      	b.n	8003c1e <MOBILE_User_Arm_Disarm_The_System+0x72>
		if ( g_Switch_Stable_Status == SWITCH_OFF ) {
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <MOBILE_User_Arm_Disarm_The_System+0xa8>
		g_SUB_CMD_ID 			= User_Action ;
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MOBILE_User_Arm_Disarm_The_System+0xec>)
 8003c50:	701a      	strb	r2, [r3, #0]
		break;
 8003c52:	e7de      	b.n	8003c12 <MOBILE_User_Arm_Disarm_The_System+0x66>
			LOAD_Bypass_Zones_on_Mobile_User_Request();
 8003c54:	f7ff ff92 	bl	8003b7c <LOAD_Bypass_Zones_on_Mobile_User_Request>
			g_SUB_CMD_ID_Result			= MY_SUCCESS ;
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <MOBILE_User_Arm_Disarm_The_System+0xe4>)
 8003c5c:	701a      	strb	r2, [r3, #0]
			g_Switch_Stable_Status 		= SWITCH_ON_STAY_ARM ;
 8003c5e:	3201      	adds	r2, #1
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003c62:	801a      	strh	r2, [r3, #0]
			g_Switch_Changes_Direction 	= FROM_OFF_TO_ON ;
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <MOBILE_User_Arm_Disarm_The_System+0xf4>)
 8003c66:	701a      	strb	r2, [r3, #0]
			SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_ARM );
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f7ff fcbb 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 8003c6e:	e7ed      	b.n	8003c4c <MOBILE_User_Arm_Disarm_The_System+0xa0>
			LOAD_Bypass_Zones_on_Mobile_User_Request();
 8003c70:	f7ff ff84 	bl	8003b7c <LOAD_Bypass_Zones_on_Mobile_User_Request>
			g_SUB_CMD_ID_Result			= MY_SUCCESS ;
 8003c74:	2201      	movs	r2, #1
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MOBILE_User_Arm_Disarm_The_System+0xe4>)
 8003c78:	701a      	strb	r2, [r3, #0]
			g_Switch_Stable_Status 		= SWITCH_ON_STAY_INSTANT_ARM ;
 8003c7a:	3202      	adds	r2, #2
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <MOBILE_User_Arm_Disarm_The_System+0xe8>)
 8003c7e:	801a      	strh	r2, [r3, #0]
			g_Switch_Changes_Direction 	= FROM_OFF_TO_ON ;
 8003c80:	3a01      	subs	r2, #1
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <MOBILE_User_Arm_Disarm_The_System+0xf4>)
 8003c84:	701a      	strb	r2, [r3, #0]
			SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_ARM );
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7ff fcac 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 8003c8c:	e79e      	b.n	8003bcc <MOBILE_User_Arm_Disarm_The_System+0x20>
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000073 	.word	0x20000073
 8003c94:	20000078 	.word	0x20000078
 8003c98:	20000072 	.word	0x20000072
 8003c9c:	2000004c 	.word	0x2000004c
 8003ca0:	20000008 	.word	0x20000008

08003ca4 <TEST_For_Any_Chime_in_Zones>:
//
//
/////////////////////////////////
void		TEST_For_Any_Chime_in_Zones()
{
	if ( g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_CHIME_IN_ZONE ] == BIG_TIMES_TRIGGER_VALUE ) {
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <TEST_For_Any_Chime_in_Zones+0x1c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d000      	beq.n	8003cae <TEST_For_Any_Chime_in_Zones+0xa>
		//   STOP COUNTING THE CHIME ZONE TIME AND STOP THE BUZZER
		//
		///////////////////////////////////////////////////////////////
		SET_The_CHIME_Buzzer_ON_or_OFF( MY_OFF );
	}
}
 8003cac:	4770      	bx	lr
	if	( On_Off == MY_ON ) {
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_CHIME_IN_ZONE ] = BIG_TIMES_INTERVAL_TIME_FOR_CHIME_ZONES ;
		BUZZER_ON();
	}
	else if	( On_Off == MY_OFF ) {
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_CHIME_IN_ZONE ] = 0 ;
 8003cae:	2200      	movs	r2, #0
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <TEST_For_Any_Chime_in_Zones+0x1c>)
 8003cb2:	609a      	str	r2, [r3, #8]
		BUZZER_OFF();
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	2390      	movs	r3, #144	; 0x90
 8003cba:	05db      	lsls	r3, r3, #23
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cbe:	e7f5      	b.n	8003cac <TEST_For_Any_Chime_in_Zones+0x8>
 8003cc0:	2000010c 	.word	0x2000010c

08003cc4 <TASK_AUTO_Monitoring_OFF>:
//
//
/////////////////////////////////				N_51		ADDED
void		TASK_AUTO_Monitoring_OFF()
{
	if ( g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_AUTO_MONITORING_OFF ] == BIG_TIMES_TRIGGER_VALUE ) {
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <TASK_AUTO_Monitoring_OFF+0x20>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d000      	beq.n	8003cce <TASK_AUTO_Monitoring_OFF+0xa>
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_AUTO_MONITORING_OFF ] 	= 0 ;
		g_START_Monitoring 														= MY_FALSE ;
		g_START_WIFI_Monitoring													= MY_FALSE ;
		g_START_STOP_Trigger_Monitoring											= MY_FALSE ;
	}
}
 8003ccc:	4770      	bx	lr
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_AUTO_MONITORING_OFF ] 	= 0 ;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <TASK_AUTO_Monitoring_OFF+0x20>)
 8003cd2:	60d3      	str	r3, [r2, #12]
		g_START_Monitoring 														= MY_FALSE ;
 8003cd4:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <TASK_AUTO_Monitoring_OFF+0x24>)
 8003cd6:	7013      	strb	r3, [r2, #0]
		g_START_WIFI_Monitoring													= MY_FALSE ;
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <TASK_AUTO_Monitoring_OFF+0x28>)
 8003cda:	7013      	strb	r3, [r2, #0]
		g_START_STOP_Trigger_Monitoring											= MY_FALSE ;
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <TASK_AUTO_Monitoring_OFF+0x2c>)
 8003cde:	7013      	strb	r3, [r2, #0]
}
 8003ce0:	e7f4      	b.n	8003ccc <TASK_AUTO_Monitoring_OFF+0x8>
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	2000010c 	.word	0x2000010c
 8003ce8:	2000006f 	.word	0x2000006f
 8003cec:	20000071 	.word	0x20000071
 8003cf0:	20000070 	.word	0x20000070

08003cf4 <Read_Wireless_RX_Data_if_Exist>:
//
//  DECODE THE WIRELESS RCEIVED DATA
//
///////////////////////////////////////////									N_53		ADDED
void		Read_Wireless_RX_Data_if_Exist()
{
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf6:	b085      	sub	sp, #20
	/////////////////////////////////////////////////////////
	//
	//  READ INPUT PINS FROM THE WIRELESS RECEIVER
	//
	/////////////////////////////////////////////////////////
	if ( g_Tasks_Times[ TASK_READ_WIRELESS_RCEIEVED_DATA ] == 0 ) {
 8003cf8:	4ba8      	ldr	r3, [pc, #672]	; (8003f9c <Read_Wireless_RX_Data_if_Exist+0x2a8>)
 8003cfa:	8b1b      	ldrh	r3, [r3, #24]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <Read_Wireless_RX_Data_if_Exist+0x12>
			//////////////////////////////////////////////////////////
			g_Binary_Rx_Value_mem					= 0 ;
			g_Wireless_Rx_Trigger_Debounce_Counter 	= 0 ;
		}
	}
}
 8003d02:	b005      	add	sp, #20
 8003d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		g_Tasks_Times[ TASK_READ_WIRELESS_RCEIEVED_DATA ] = INTERVAL_TIME_TO_READ_WIRELESS_DATA ;
 8003d06:	220a      	movs	r2, #10
 8003d08:	4ba4      	ldr	r3, [pc, #656]	; (8003f9c <Read_Wireless_RX_Data_if_Exist+0x2a8>)
 8003d0a:	831a      	strh	r2, [r3, #24]
		D0 = HAL_GPIO_ReadPin( RX_D0_GPIO_Port , RX_D0_Pin );
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	0209      	lsls	r1, r1, #8
 8003d10:	2090      	movs	r0, #144	; 0x90
 8003d12:	05c0      	lsls	r0, r0, #23
 8003d14:	f7fd f87a 	bl	8000e0c <HAL_GPIO_ReadPin>
 8003d18:	0005      	movs	r5, r0
 8003d1a:	9001      	str	r0, [sp, #4]
		D1 = HAL_GPIO_ReadPin( RX_D1_GPIO_Port , RX_D1_Pin );
 8003d1c:	4ea0      	ldr	r6, [pc, #640]	; (8003fa0 <Read_Wireless_RX_Data_if_Exist+0x2ac>)
 8003d1e:	2108      	movs	r1, #8
 8003d20:	0030      	movs	r0, r6
 8003d22:	f7fd f873 	bl	8000e0c <HAL_GPIO_ReadPin>
 8003d26:	0007      	movs	r7, r0
 8003d28:	9002      	str	r0, [sp, #8]
		D2 = HAL_GPIO_ReadPin( RX_D2_GPIO_Port , RX_D2_Pin );
 8003d2a:	2110      	movs	r1, #16
 8003d2c:	0030      	movs	r0, r6
 8003d2e:	f7fd f86d 	bl	8000e0c <HAL_GPIO_ReadPin>
 8003d32:	0004      	movs	r4, r0
 8003d34:	9003      	str	r0, [sp, #12]
		D3 = HAL_GPIO_ReadPin( RX_D3_GPIO_Port , RX_D3_Pin );
 8003d36:	2120      	movs	r1, #32
 8003d38:	0030      	movs	r0, r6
 8003d3a:	f7fd f867 	bl	8000e0c <HAL_GPIO_ReadPin>
 8003d3e:	0003      	movs	r3, r0
		ALL_DATA_Value = D0 | D1 | D2 | D3 ;
 8003d40:	433d      	orrs	r5, r7
 8003d42:	432c      	orrs	r4, r5
 8003d44:	4320      	orrs	r0, r4
		if (  ALL_DATA_Value == GPIO_PIN_SET ) {
 8003d46:	b2c0      	uxtb	r0, r0
 8003d48:	2801      	cmp	r0, #1
 8003d4a:	d022      	beq.n	8003d92 <Read_Wireless_RX_Data_if_Exist+0x9e>
		else if (  g_Binary_Rx_Value_mem > 0 ) {
 8003d4c:	4b95      	ldr	r3, [pc, #596]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d000      	beq.n	8003d56 <Read_Wireless_RX_Data_if_Exist+0x62>
 8003d54:	e0d4      	b.n	8003f00 <Read_Wireless_RX_Data_if_Exist+0x20c>
		else if ( g_Wireless_Rx_Trigger_Debounce_Counter > RX_WIRELESS_MC_TRIGGER_ACCEPT_TIME ) {
 8003d56:	4b94      	ldr	r3, [pc, #592]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d800      	bhi.n	8003d62 <Read_Wireless_RX_Data_if_Exist+0x6e>
 8003d60:	e115      	b.n	8003f8e <Read_Wireless_RX_Data_if_Exist+0x29a>
			g_Wireless_Rx_Pause_Debounce_Counter++ ;
 8003d62:	4a92      	ldr	r2, [pc, #584]	; (8003fac <Read_Wireless_RX_Data_if_Exist+0x2b8>)
 8003d64:	7813      	ldrb	r3, [r2, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	7013      	strb	r3, [r2, #0]
			if 	( g_Wireless_Rx_Pause_Debounce_Counter > RX_WIRELESS_MC_PAUSE_ACCEPT_TIME ) {
 8003d6c:	7813      	ldrb	r3, [r2, #0]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b0a      	cmp	r3, #10
 8003d72:	d9c6      	bls.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
				asm("nop");
 8003d74:	46c0      	nop			; (mov r8, r8)
				asm("nop");
 8003d76:	46c0      	nop			; (mov r8, r8)
				asm("nop");
 8003d78:	46c0      	nop			; (mov r8, r8)
				asm("nop");
 8003d7a:	46c0      	nop			; (mov r8, r8)
				switch ( g_Binary_Rx_Value ) {
 8003d7c:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	2a09      	cmp	r2, #9
 8003d86:	d900      	bls.n	8003d8a <Read_Wireless_RX_Data_if_Exist+0x96>
 8003d88:	e0f3      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
 8003d8a:	0093      	lsls	r3, r2, #2
 8003d8c:	4a89      	ldr	r2, [pc, #548]	; (8003fb4 <Read_Wireless_RX_Data_if_Exist+0x2c0>)
 8003d8e:	58d3      	ldr	r3, [r2, r3]
 8003d90:	469f      	mov	pc, r3
			g_Binary_Rx_Value = 0 ;
 8003d92:	2100      	movs	r1, #0
 8003d94:	4a86      	ldr	r2, [pc, #536]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003d96:	7011      	strb	r1, [r2, #0]
			if 		( D0 == GPIO_PIN_SET  ) {
 8003d98:	9a01      	ldr	r2, [sp, #4]
 8003d9a:	2a01      	cmp	r2, #1
 8003d9c:	d029      	beq.n	8003df2 <Read_Wireless_RX_Data_if_Exist+0xfe>
			if	 	( D1 == GPIO_PIN_SET  ) {
 8003d9e:	9a02      	ldr	r2, [sp, #8]
 8003da0:	2a01      	cmp	r2, #1
 8003da2:	d02b      	beq.n	8003dfc <Read_Wireless_RX_Data_if_Exist+0x108>
			if		( D2 == GPIO_PIN_SET  ) {
 8003da4:	9a03      	ldr	r2, [sp, #12]
 8003da6:	2a01      	cmp	r2, #1
 8003da8:	d02e      	beq.n	8003e08 <Read_Wireless_RX_Data_if_Exist+0x114>
			if	 	( D3 == GPIO_PIN_SET  ) {
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d032      	beq.n	8003e14 <Read_Wireless_RX_Data_if_Exist+0x120>
			if 	(	( g_Binary_Rx_Value == BUTTON_A_REMOTE_CONTROL ) || ( g_Binary_Rx_Value == BUTTON_B_REMOTE_CONTROL )
 8003dae:	4b80      	ldr	r3, [pc, #512]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d034      	beq.n	8003e20 <Read_Wireless_RX_Data_if_Exist+0x12c>
 8003db6:	4b7e      	ldr	r3, [pc, #504]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d030      	beq.n	8003e20 <Read_Wireless_RX_Data_if_Exist+0x12c>
				|| 	( g_Binary_Rx_Value == BUTTON_C_REMOTE_CONTROL ) || ( g_Binary_Rx_Value == BUTTON_D_REMOTE_CONTROL )
 8003dbe:	4b7c      	ldr	r3, [pc, #496]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d02c      	beq.n	8003e20 <Read_Wireless_RX_Data_if_Exist+0x12c>
 8003dc6:	4b7a      	ldr	r3, [pc, #488]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d028      	beq.n	8003e20 <Read_Wireless_RX_Data_if_Exist+0x12c>
				if 		( 	( g_Binary_Rx_Value_mem == 0 )
 8003dce:	4b75      	ldr	r3, [pc, #468]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d100      	bne.n	8003dd8 <Read_Wireless_RX_Data_if_Exist+0xe4>
 8003dd6:	e080      	b.n	8003eda <Read_Wireless_RX_Data_if_Exist+0x1e6>
						||  ( g_Binary_Rx_Value_mem == g_Binary_Rx_Value ) ) {
 8003dd8:	4b72      	ldr	r3, [pc, #456]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4a74      	ldr	r2, [pc, #464]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d079      	beq.n	8003eda <Read_Wireless_RX_Data_if_Exist+0x1e6>
					g_Binary_Rx_Value_mem					= 0 ;
 8003de6:	2300      	movs	r3, #0
 8003de8:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003dea:	7013      	strb	r3, [r2, #0]
					g_Wireless_Rx_Trigger_Debounce_Counter 	= 0 ;
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003dee:	7013      	strb	r3, [r2, #0]
 8003df0:	e787      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
				g_Binary_Rx_Value |= 1 ;
 8003df2:	496f      	ldr	r1, [pc, #444]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003df4:	780a      	ldrb	r2, [r1, #0]
 8003df6:	4302      	orrs	r2, r0
 8003df8:	700a      	strb	r2, [r1, #0]
 8003dfa:	e7d0      	b.n	8003d9e <Read_Wireless_RX_Data_if_Exist+0xaa>
				g_Binary_Rx_Value |= 2 ;
 8003dfc:	496c      	ldr	r1, [pc, #432]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003dfe:	780a      	ldrb	r2, [r1, #0]
 8003e00:	2002      	movs	r0, #2
 8003e02:	4302      	orrs	r2, r0
 8003e04:	700a      	strb	r2, [r1, #0]
 8003e06:	e7cd      	b.n	8003da4 <Read_Wireless_RX_Data_if_Exist+0xb0>
				g_Binary_Rx_Value |= 4 ;
 8003e08:	4969      	ldr	r1, [pc, #420]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003e0a:	780a      	ldrb	r2, [r1, #0]
 8003e0c:	2004      	movs	r0, #4
 8003e0e:	4302      	orrs	r2, r0
 8003e10:	700a      	strb	r2, [r1, #0]
 8003e12:	e7ca      	b.n	8003daa <Read_Wireless_RX_Data_if_Exist+0xb6>
				g_Binary_Rx_Value |= 8 ;
 8003e14:	4a66      	ldr	r2, [pc, #408]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003e16:	7813      	ldrb	r3, [r2, #0]
 8003e18:	2108      	movs	r1, #8
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	7013      	strb	r3, [r2, #0]
 8003e1e:	e7c6      	b.n	8003dae <Read_Wireless_RX_Data_if_Exist+0xba>
				if 		( 	( g_Binary_Rx_Value_mem == 0 )
 8003e20:	4b60      	ldr	r3, [pc, #384]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <Read_Wireless_RX_Data_if_Exist+0x14e>
						||  ( g_Binary_Rx_Value_mem == g_Binary_Rx_Value ) ) {
 8003e28:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4a60      	ldr	r2, [pc, #384]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d005      	beq.n	8003e42 <Read_Wireless_RX_Data_if_Exist+0x14e>
					g_Binary_Rx_Value_mem					= 0 ;
 8003e36:	2300      	movs	r3, #0
 8003e38:	4a5a      	ldr	r2, [pc, #360]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003e3a:	7013      	strb	r3, [r2, #0]
					g_Wireless_Rx_Trigger_Debounce_Counter 	= 0 ;
 8003e3c:	4a5a      	ldr	r2, [pc, #360]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003e3e:	7013      	strb	r3, [r2, #0]
 8003e40:	e75f      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
					g_Binary_Rx_Value_mem = g_Binary_Rx_Value ;
 8003e42:	4b5b      	ldr	r3, [pc, #364]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4a56      	ldr	r2, [pc, #344]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003e4a:	7013      	strb	r3, [r2, #0]
					g_Wireless_Rx_Trigger_Debounce_Counter++ ;
 8003e4c:	4a56      	ldr	r2, [pc, #344]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003e4e:	7813      	ldrb	r3, [r2, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	7013      	strb	r3, [r2, #0]
					if ( g_Wireless_Rx_Trigger_Debounce_Counter > RX_WIRELESS_REMOTE_CONTROL_ACCEPT_TIME )  {
 8003e56:	7813      	ldrb	r3, [r2, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b1e      	cmp	r3, #30
 8003e5c:	d800      	bhi.n	8003e60 <Read_Wireless_RX_Data_if_Exist+0x16c>
 8003e5e:	e750      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
						Clear_Rx_Buffer();					// CLEAR UART BUFFER TO AVOID BYPASS ZONES
 8003e60:	f7ff f8ac 	bl	8002fbc <Clear_Rx_Buffer>
						switch ( g_Binary_Rx_Value ) {
 8003e64:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d01b      	beq.n	8003ea6 <Read_Wireless_RX_Data_if_Exist+0x1b2>
 8003e6e:	d90c      	bls.n	8003e8a <Read_Wireless_RX_Data_if_Exist+0x196>
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d024      	beq.n	8003ebe <Read_Wireless_RX_Data_if_Exist+0x1ca>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d128      	bne.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
							g_Zones_TYPE_Configuration[ ZONE_5_INDEX ] 				= ZONE_TYPE_24_PANIC ;			//    N_54
 8003e78:	2204      	movs	r2, #4
 8003e7a:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <Read_Wireless_RX_Data_if_Exist+0x2c4>)
 8003e7c:	711a      	strb	r2, [r3, #4]
							g_Zones_Wireless_Status				|= ( uint8_t )( 1 << ZONE_5_INDEX );
 8003e7e:	4a4f      	ldr	r2, [pc, #316]	; (8003fbc <Read_Wireless_RX_Data_if_Exist+0x2c8>)
 8003e80:	8813      	ldrh	r3, [r2, #0]
 8003e82:	2110      	movs	r1, #16
 8003e84:	430b      	orrs	r3, r1
 8003e86:	8013      	strh	r3, [r2, #0]
							break;
 8003e88:	e01f      	b.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
						switch ( g_Binary_Rx_Value ) {
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d11d      	bne.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
							if ( g_Alarm_on_Zones == 0 ) {																//		N_57   Add
 8003e8e:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <Read_Wireless_RX_Data_if_Exist+0x2cc>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d118      	bne.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
								MOBILE_User_Arm_Disarm_The_System( SUB_CMD_ID_MONITORING_EXECUTE_ARM );
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f7ff fe87 	bl	8003bac <MOBILE_User_Arm_Disarm_The_System>
								g_Wireless_Remote_Control_Action	= MY_TRUE ;											//		N_56   Add
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <Read_Wireless_RX_Data_if_Exist+0x2d0>)
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e011      	b.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
							if ( g_Alarm_on_Zones == 0 ) {																//		N_57   Add
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <Read_Wireless_RX_Data_if_Exist+0x2cc>)
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10c      	bne.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
								MOBILE_User_Arm_Disarm_The_System( SUB_CMD_ID_MONITORING_EXECUTE_SLEEP );
 8003eb0:	2004      	movs	r0, #4
 8003eb2:	f7ff fe7b 	bl	8003bac <MOBILE_User_Arm_Disarm_The_System>
								g_Wireless_Remote_Control_Action	= MY_TRUE ;											//		N_56   Add
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <Read_Wireless_RX_Data_if_Exist+0x2d0>)
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e005      	b.n	8003eca <Read_Wireless_RX_Data_if_Exist+0x1d6>
							MOBILE_User_Arm_Disarm_The_System( SUB_CMD_ID_MONITORING_EXECUTE_DISARM );
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7ff fe74 	bl	8003bac <MOBILE_User_Arm_Disarm_The_System>
							g_Wireless_Remote_Control_Action	= MY_TRUE ;											//		N_56   Add
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <Read_Wireless_RX_Data_if_Exist+0x2d0>)
 8003ec8:	701a      	strb	r2, [r3, #0]
						g_Binary_Rx_Value						= 0 ;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4a38      	ldr	r2, [pc, #224]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003ece:	7013      	strb	r3, [r2, #0]
						g_Binary_Rx_Value_mem					= 0 ;
 8003ed0:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003ed2:	7013      	strb	r3, [r2, #0]
						g_Wireless_Rx_Trigger_Debounce_Counter 	= 0 ;
 8003ed4:	4a34      	ldr	r2, [pc, #208]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003ed6:	7013      	strb	r3, [r2, #0]
 8003ed8:	e713      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
					g_Binary_Rx_Value_mem = g_Binary_Rx_Value ;
 8003eda:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4a30      	ldr	r2, [pc, #192]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003ee2:	7013      	strb	r3, [r2, #0]
					g_Wireless_Rx_Trigger_Debounce_Counter++ ;
 8003ee4:	4a30      	ldr	r2, [pc, #192]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003ee6:	7813      	ldrb	r3, [r2, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	7013      	strb	r3, [r2, #0]
					if ( g_Wireless_Rx_Trigger_Debounce_Counter > RX_WIRELESS_MC_TRIGGER_ACCEPT_TIME ) {
 8003eee:	7813      	ldrb	r3, [r2, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d800      	bhi.n	8003ef8 <Read_Wireless_RX_Data_if_Exist+0x204>
 8003ef6:	e704      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
						g_Binary_Rx_Value_mem = 0 ;
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e700      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
			g_Binary_Rx_Value_mem					= 0 ;
 8003f00:	2300      	movs	r3, #0
 8003f02:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003f04:	7013      	strb	r3, [r2, #0]
			g_Wireless_Rx_Trigger_Debounce_Counter 	= 0 ;
 8003f06:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003f08:	7013      	strb	r3, [r2, #0]
 8003f0a:	e6fa      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
					g_DEBUG_ZONE_1_OPEN_Counter++ ;
 8003f0c:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <Read_Wireless_RX_Data_if_Exist+0x2d4>)
 8003f0e:	7813      	ldrb	r3, [r2, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	7013      	strb	r3, [r2, #0]
					if  ( ( g_Zones_Wireless & 1 ) > 0 ) {
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <Read_Wireless_RX_Data_if_Exist+0x2d8>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	07db      	lsls	r3, r3, #31
 8003f1c:	d529      	bpl.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
						g_Zones_Wireless_Status |= 1 ;
 8003f1e:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <Read_Wireless_RX_Data_if_Exist+0x2c8>)
 8003f20:	8813      	ldrh	r3, [r2, #0]
 8003f22:	2101      	movs	r1, #1
 8003f24:	430b      	orrs	r3, r1
 8003f26:	8013      	strh	r3, [r2, #0]
 8003f28:	e023      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
					g_DEBUG_ZONE_1_CLOSE_Counter++;
 8003f2a:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <Read_Wireless_RX_Data_if_Exist+0x2dc>)
 8003f2c:	7813      	ldrb	r3, [r2, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	7013      	strb	r3, [r2, #0]
					if  ( ( g_Zones_Wireless & 1 ) > 0 ) {
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <Read_Wireless_RX_Data_if_Exist+0x2d8>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	07db      	lsls	r3, r3, #31
 8003f3a:	d51a      	bpl.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
						g_Zones_Wireless_Status &= ~1 ;
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <Read_Wireless_RX_Data_if_Exist+0x2c8>)
 8003f3e:	8813      	ldrh	r3, [r2, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	438b      	bics	r3, r1
 8003f44:	8013      	strh	r3, [r2, #0]
 8003f46:	e014      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
					if  ( ( g_Zones_Wireless & 2 ) > 0 ) {
 8003f48:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <Read_Wireless_RX_Data_if_Exist+0x2d8>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	079b      	lsls	r3, r3, #30
 8003f4e:	d510      	bpl.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
						g_Zones_Wireless_Status |= 2 ;
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <Read_Wireless_RX_Data_if_Exist+0x2c8>)
 8003f52:	8813      	ldrh	r3, [r2, #0]
 8003f54:	2102      	movs	r1, #2
 8003f56:	430b      	orrs	r3, r1
 8003f58:	8013      	strh	r3, [r2, #0]
 8003f5a:	e00a      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
					if  ( ( g_Zones_Wireless & 2 ) > 0 ) {
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <Read_Wireless_RX_Data_if_Exist+0x2d8>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	079b      	lsls	r3, r3, #30
 8003f62:	d506      	bpl.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
						g_Zones_Wireless_Status &= ~2 ;
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <Read_Wireless_RX_Data_if_Exist+0x2c8>)
 8003f66:	8813      	ldrh	r3, [r2, #0]
 8003f68:	2102      	movs	r1, #2
 8003f6a:	438b      	bics	r3, r1
 8003f6c:	8013      	strh	r3, [r2, #0]
 8003f6e:	e000      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
					asm("nop");
 8003f70:	46c0      	nop			; (mov r8, r8)
				g_Binary_Rx_Value							= 0 ;
 8003f72:	2300      	movs	r3, #0
 8003f74:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <Read_Wireless_RX_Data_if_Exist+0x2bc>)
 8003f76:	7013      	strb	r3, [r2, #0]
				g_Binary_Rx_Value_mem						= 0 ;
 8003f78:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003f7a:	7013      	strb	r3, [r2, #0]
				g_Wireless_Rx_Trigger_Debounce_Counter		= 0 ;
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003f7e:	7013      	strb	r3, [r2, #0]
				g_Wireless_Rx_Pause_Debounce_Counter		= 0 ;
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <Read_Wireless_RX_Data_if_Exist+0x2b8>)
 8003f82:	7013      	strb	r3, [r2, #0]
 8003f84:	e6bd      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
					asm("nop");
 8003f86:	46c0      	nop			; (mov r8, r8)
					break;
 8003f88:	e7f3      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
					asm("nop");
 8003f8a:	46c0      	nop			; (mov r8, r8)
					break;
 8003f8c:	e7f1      	b.n	8003f72 <Read_Wireless_RX_Data_if_Exist+0x27e>
			g_Binary_Rx_Value_mem					= 0 ;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <Read_Wireless_RX_Data_if_Exist+0x2b0>)
 8003f92:	7013      	strb	r3, [r2, #0]
			g_Wireless_Rx_Trigger_Debounce_Counter 	= 0 ;
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <Read_Wireless_RX_Data_if_Exist+0x2b4>)
 8003f96:	7013      	strb	r3, [r2, #0]
}
 8003f98:	e6b3      	b.n	8003d02 <Read_Wireless_RX_Data_if_Exist+0xe>
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	20000128 	.word	0x20000128
 8003fa0:	48000400 	.word	0x48000400
 8003fa4:	2000004f 	.word	0x2000004f
 8003fa8:	2000007e 	.word	0x2000007e
 8003fac:	2000007d 	.word	0x2000007d
 8003fb0:	2000004e 	.word	0x2000004e
 8003fb4:	080054c8 	.word	0x080054c8
 8003fb8:	200002c0 	.word	0x200002c0
 8003fbc:	2000008c 	.word	0x2000008c
 8003fc0:	2000004c 	.word	0x2000004c
 8003fc4:	2000007c 	.word	0x2000007c
 8003fc8:	20000057 	.word	0x20000057
 8003fcc:	2000000e 	.word	0x2000000e
 8003fd0:	20000056 	.word	0x20000056

08003fd4 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones>:
//
//
//
/////////////////////////////////////////////////////////						N_54  add
void		Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones()
{
 8003fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd6:	2200      	movs	r2, #0
	uint16_t		Bit_Flag ;

// 	for ( i = 0 ; i < ZONE_5_INDEX ; ++i) {							//		N_55	CHANGED
 	for ( i = 0 ; i < ZONES_MAXIMUM ; ++i) {

		Bit_Flag = ( 1 << i ) ;
 8003fd8:	2501      	movs	r5, #1
		//////////////////////////////////////////////////
		//
		//  TEST EITHER THE ZONE ITS OPEN OR CLOSED
		//
		//////////////////////////////////////////////////
		if  (  	( ( g_Zones_Wireless_Status & Bit_Flag )	== 0 )
 8003fda:	4c18      	ldr	r4, [pc, #96]	; (800403c <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x68>)
			///////////////////////////////////////////
			//
			//  EITHER WIRE OR WIRELESS ZONE ARE OPEN
			//
			///////////////////////////////////////////
			g_Zones_Wire_AND_Wireless |= Bit_Flag ;
 8003fdc:	4f18      	ldr	r7, [pc, #96]	; (8004040 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x6c>)
			if  (    ( ( g_Zones_Wire_AND_Wireless_mem & Bit_Flag ) == 0 )			//		N_55  add
 8003fde:	4819      	ldr	r0, [pc, #100]	; (8004044 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x70>)
 8003fe0:	e00c      	b.n	8003ffc <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x28>
			g_Zones_Wire_AND_Wireless |= Bit_Flag ;
 8003fe2:	8839      	ldrh	r1, [r7, #0]
 8003fe4:	4319      	orrs	r1, r3
 8003fe6:	8039      	strh	r1, [r7, #0]
			if  (    ( ( g_Zones_Wire_AND_Wireless_mem & Bit_Flag ) == 0 )			//		N_55  add
 8003fe8:	8801      	ldrh	r1, [r0, #0]
 8003fea:	4219      	tst	r1, r3
 8003fec:	d103      	bne.n	8003ff6 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x22>
			    &&   ( ( g_Zones_Chime & Bit_Flag ) > 0 )
 8003fee:	4916      	ldr	r1, [pc, #88]	; (8004048 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x74>)
 8003ff0:	8809      	ldrh	r1, [r1, #0]
 8003ff2:	4219      	tst	r1, r3
 8003ff4:	d112      	bne.n	800401c <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x48>
 8003ff6:	3201      	adds	r2, #1
 	for ( i = 0 ; i < ZONES_MAXIMUM ; ++i) {
 8003ff8:	2a05      	cmp	r2, #5
 8003ffa:	d018      	beq.n	800402e <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x5a>
		Bit_Flag = ( 1 << i ) ;
 8003ffc:	0029      	movs	r1, r5
 8003ffe:	4091      	lsls	r1, r2
 8004000:	b28b      	uxth	r3, r1
		if  (  	( ( g_Zones_Wireless_Status & Bit_Flag )	== 0 )
 8004002:	8826      	ldrh	r6, [r4, #0]
 8004004:	421e      	tst	r6, r3
 8004006:	d1ec      	bne.n	8003fe2 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0xe>
			&&	( ( g_Zones_Stable_Status & Bit_Flag ) 		== 0 )
 8004008:	4e10      	ldr	r6, [pc, #64]	; (800404c <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x78>)
 800400a:	8836      	ldrh	r6, [r6, #0]
 800400c:	421e      	tst	r6, r3
 800400e:	d1e8      	bne.n	8003fe2 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0xe>
			g_Zones_Wire_AND_Wireless &= ~Bit_Flag ;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x6c>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	438b      	bics	r3, r1
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x6c>)
 8004018:	800b      	strh	r3, [r1, #0]
 800401a:	e7ec      	b.n	8003ff6 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x22>
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_CHIME_IN_ZONE ] = BIG_TIMES_INTERVAL_TIME_FOR_CHIME_ZONES ;
 800401c:	2303      	movs	r3, #3
 800401e:	490c      	ldr	r1, [pc, #48]	; (8004050 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x7c>)
 8004020:	608b      	str	r3, [r1, #8]
		BUZZER_ON();
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	0109      	lsls	r1, r1, #4
 8004026:	2390      	movs	r3, #144	; 0x90
 8004028:	05db      	lsls	r3, r3, #23
 800402a:	6199      	str	r1, [r3, #24]
 800402c:	e7e3      	b.n	8003ff6 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x22>
 	///////////////////////////////////////////////////////////////////
 	//
 	//   UPDATE THE NEW ACCEPTED ZONES STATUS ( WIRE + WIRELESS )
 	//
 	///////////////////////////////////////////////////////////////////
 	g_Zones_Wire_AND_Wireless_mem = g_Zones_Wire_AND_Wireless ;
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x6c>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29b      	uxth	r3, r3
 8004034:	4a03      	ldr	r2, [pc, #12]	; (8004044 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones+0x70>)
 8004036:	8013      	strh	r3, [r2, #0]
}
 8004038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	2000008c 	.word	0x2000008c
 8004040:	20000088 	.word	0x20000088
 8004044:	2000008a 	.word	0x2000008a
 8004048:	20000080 	.word	0x20000080
 800404c:	20000086 	.word	0x20000086
 8004050:	2000010c 	.word	0x2000010c

08004054 <Define_The_Remote_Control_Action>:
// 		  DEFINE THE REMOTE CONTROL ACTION
// 		DEPENDS ON THE CURRENT SYSTEM FLAGS
//
/////////////////////////////////////////////////////////						N_54  add
void		Define_The_Remote_Control_Action()
{
 8004054:	b510      	push	{r4, lr}
	///////////////////////////////////////////////
	//
	//  TEST FOR ARM - OR - DISARM ACTION
	//
	///////////////////////////////////////////////
	if  ( ( g_Switch_Stable_Status == SWITCH_OFF ) && ( g_Alarm_on_Zones > 0 ) ) {
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <Define_The_Remote_Control_Action+0x5c>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <Define_The_Remote_Control_Action+0x16>
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <Define_The_Remote_Control_Action+0x60>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <Define_The_Remote_Control_Action+0x34>
		/////////////////////////////////////////////
		//  SET THE PGM SIGNAL FOR REMOTE DISASRM
		/////////////////////////////////////////////
		SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_DISARM );					//  N_17    REPLACE THE old
	}
	else if  ( g_Switch_Stable_Status == SWITCH_OFF )  {
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <Define_The_Remote_Control_Action+0x5c>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <Define_The_Remote_Control_Action+0x48>
	}
	else {
		///////////////////////////////////
		//      DISARM THE SYSTEM
		///////////////////////////////////
		g_Switch_Stable_Status 		= SWITCH_OFF ;
 8004074:	2200      	movs	r2, #0
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <Define_The_Remote_Control_Action+0x5c>)
 8004078:	801a      	strh	r2, [r3, #0]
		g_Switch_Changes_Direction 	= FROM_ON_TO_OFF ;
 800407a:	3201      	adds	r2, #1
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <Define_The_Remote_Control_Action+0x64>)
 800407e:	701a      	strb	r2, [r3, #0]
		//
		/////////////////////////////////////////////
		//  SET THE PGM SIGNAL FOR REMOTE DISASRM
		/////////////////////////////////////////////
		SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_DISARM );					//  N_17    REPLACE THE old
 8004080:	2002      	movs	r0, #2
 8004082:	f7ff faaf 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
	}
}
 8004086:	bd10      	pop	{r4, pc}
		g_Switch_Stable_Status 		= SWITCH_OFF ;
 8004088:	2200      	movs	r2, #0
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <Define_The_Remote_Control_Action+0x5c>)
 800408c:	801a      	strh	r2, [r3, #0]
		g_Switch_Changes_Direction 	= FROM_ON_TO_OFF ;
 800408e:	3201      	adds	r2, #1
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <Define_The_Remote_Control_Action+0x64>)
 8004092:	701a      	strb	r2, [r3, #0]
		SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_DISARM );					//  N_17    REPLACE THE old
 8004094:	2002      	movs	r0, #2
 8004096:	f7ff faa5 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 800409a:	e7f4      	b.n	8004086 <Define_The_Remote_Control_Action+0x32>
		g_Switch_Stable_Status 		= SWITCH_ON_REGULAR_ARM ;
 800409c:	2201      	movs	r2, #1
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <Define_The_Remote_Control_Action+0x5c>)
 80040a0:	801a      	strh	r2, [r3, #0]
		g_Switch_Changes_Direction 	= FROM_OFF_TO_ON ;
 80040a2:	3201      	adds	r2, #1
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <Define_The_Remote_Control_Action+0x64>)
 80040a6:	701a      	strb	r2, [r3, #0]
		SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_ARM );		//  N_17   added
 80040a8:	2001      	movs	r0, #1
 80040aa:	f7ff fa9b 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 80040ae:	e7ea      	b.n	8004086 <Define_The_Remote_Control_Action+0x32>
 80040b0:	20000078 	.word	0x20000078
 80040b4:	2000004c 	.word	0x2000004c
 80040b8:	20000008 	.word	0x20000008

080040bc <Read_SWITCH_ON_OFF_Status>:
{
 80040bc:	b510      	push	{r4, lr}
	if ( g_Tasks_Times[ TASK_INDEX_TO_READ_ADC ] == 0 ) {
 80040be:	4b6f      	ldr	r3, [pc, #444]	; (800427c <Read_SWITCH_ON_OFF_Status+0x1c0>)
 80040c0:	891b      	ldrh	r3, [r3, #8]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d113      	bne.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
		g_Tasks_Times[ TASK_INDEX_TO_READ_ADC ] = INTERVAL_TIME_TO_READ_THE_ADC_VALUE ;
 80040c8:	2223      	movs	r2, #35	; 0x23
 80040ca:	4b6c      	ldr	r3, [pc, #432]	; (800427c <Read_SWITCH_ON_OFF_Status+0x1c0>)
 80040cc:	811a      	strh	r2, [r3, #8]
		if  		( g_Switch_Mode == ALARM_CONTROL_ON_OFF_MODE_AS_SWITCH ) {
 80040ce:	4b6c      	ldr	r3, [pc, #432]	; (8004280 <Read_SWITCH_ON_OFF_Status+0x1c4>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d00d      	beq.n	80040f2 <Read_SWITCH_ON_OFF_Status+0x36>
		else if  	( g_Switch_Mode == ALARM_CONTROL_ON_OFF_MODE_AS_REMOTE ) {
 80040d6:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <Read_SWITCH_ON_OFF_Status+0x1c4>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d04e      	beq.n	800417c <Read_SWITCH_ON_OFF_Status+0xc0>
		if  		( g_Switch_Mode == ALARM_CONTROL_ON_OFF_MODE_AS_SWITCH ) {
 80040de:	4b68      	ldr	r3, [pc, #416]	; (8004280 <Read_SWITCH_ON_OFF_Status+0x1c4>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d058      	beq.n	8004198 <Read_SWITCH_ON_OFF_Status+0xdc>
		else if  ( g_Switch_Mode == ALARM_CONTROL_ON_OFF_MODE_AS_REMOTE ) {
 80040e6:	4b66      	ldr	r3, [pc, #408]	; (8004280 <Read_SWITCH_ON_OFF_Status+0x1c4>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d100      	bne.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
 80040ee:	e08e      	b.n	800420e <Read_SWITCH_ON_OFF_Status+0x152>
}
 80040f0:	bd10      	pop	{r4, pc}
		    HAL_ADC_Start(&hadc);
 80040f2:	4c64      	ldr	r4, [pc, #400]	; (8004284 <Read_SWITCH_ON_OFF_Status+0x1c8>)
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7fc f9db 	bl	80004b0 <HAL_ADC_Start>
			if ( HAL_ADC_PollForConversion( &hadc , 1000 ) == HAL_OK)   {
 80040fa:	21fa      	movs	r1, #250	; 0xfa
 80040fc:	0089      	lsls	r1, r1, #2
 80040fe:	0020      	movs	r0, r4
 8004100:	f7fc fa04 	bl	800050c <HAL_ADC_PollForConversion>
 8004104:	2800      	cmp	r0, #0
 8004106:	d00d      	beq.n	8004124 <Read_SWITCH_ON_OFF_Status+0x68>
				asm("nop");
 8004108:	46c0      	nop			; (mov r8, r8)
			g_ADC_Instant_Value			= ( ( uint16_t ) g_ADC_Instant_Value_Raw >> 4 );
 800410a:	4b5f      	ldr	r3, [pc, #380]	; (8004288 <Read_SWITCH_ON_OFF_Status+0x1cc>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	4a5e      	ldr	r2, [pc, #376]	; (800428c <Read_SWITCH_ON_OFF_Status+0x1d0>)
 8004112:	8013      	strh	r3, [r2, #0]
			if 		( g_ADC_Instant_Value > LIMIT_UP_SWITCH_STATUS_3 ){
 8004114:	8813      	ldrh	r3, [r2, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	2bb0      	cmp	r3, #176	; 0xb0
 800411a:	d90a      	bls.n	8004132 <Read_SWITCH_ON_OFF_Status+0x76>
				g_Switch_Instant_Status = SWITCH_OFF ;
 800411c:	2200      	movs	r2, #0
 800411e:	4b5c      	ldr	r3, [pc, #368]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	e7dc      	b.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
				g_ADC_Instant_Value_Raw = HAL_ADC_GetValue( &hadc);
 8004124:	4857      	ldr	r0, [pc, #348]	; (8004284 <Read_SWITCH_ON_OFF_Status+0x1c8>)
 8004126:	f7fc fa4f 	bl	80005c8 <HAL_ADC_GetValue>
 800412a:	b280      	uxth	r0, r0
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <Read_SWITCH_ON_OFF_Status+0x1cc>)
 800412e:	8018      	strh	r0, [r3, #0]
 8004130:	e7eb      	b.n	800410a <Read_SWITCH_ON_OFF_Status+0x4e>
			else if (( g_ADC_Instant_Value > LIMIT_UP_SWITCH_STATUS_2 ) && ( g_ADC_Instant_Value <= LIMIT_UP_SWITCH_STATUS_3 )) {
 8004132:	4b56      	ldr	r3, [pc, #344]	; (800428c <Read_SWITCH_ON_OFF_Status+0x1d0>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d908      	bls.n	800414e <Read_SWITCH_ON_OFF_Status+0x92>
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <Read_SWITCH_ON_OFF_Status+0x1d0>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	2bb0      	cmp	r3, #176	; 0xb0
 8004144:	d803      	bhi.n	800414e <Read_SWITCH_ON_OFF_Status+0x92>
				g_Switch_Instant_Status = SWITCH_ON_STAY_ARM ;
 8004146:	2202      	movs	r2, #2
 8004148:	4b51      	ldr	r3, [pc, #324]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	e7c7      	b.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
			else if (( g_ADC_Instant_Value > LIMIT_UP_SWITCH_STATUS_1 ) && ( g_ADC_Instant_Value <= LIMIT_UP_SWITCH_STATUS_2 )) {
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <Read_SWITCH_ON_OFF_Status+0x1d0>)
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b57      	cmp	r3, #87	; 0x57
 8004156:	d908      	bls.n	800416a <Read_SWITCH_ON_OFF_Status+0xae>
 8004158:	4b4c      	ldr	r3, [pc, #304]	; (800428c <Read_SWITCH_ON_OFF_Status+0x1d0>)
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d803      	bhi.n	800416a <Read_SWITCH_ON_OFF_Status+0xae>
				g_Switch_Instant_Status = SWITCH_ON_REGULAR_ARM ;
 8004162:	2201      	movs	r2, #1
 8004164:	4b4a      	ldr	r3, [pc, #296]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	e7b9      	b.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
			else if ( g_ADC_Instant_Value <= LIMIT_UP_SWITCH_STATUS_1 )  {
 800416a:	4b48      	ldr	r3, [pc, #288]	; (800428c <Read_SWITCH_ON_OFF_Status+0x1d0>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b57      	cmp	r3, #87	; 0x57
 8004172:	d8b4      	bhi.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
				g_Switch_Instant_Status = SWITCH_ON_STAY_INSTANT_ARM ;
 8004174:	2203      	movs	r2, #3
 8004176:	4b46      	ldr	r3, [pc, #280]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	e7b0      	b.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
			if 		( ( HAL_GPIO_ReadPin( REMOTE_ARM_PORT , PIN_TOGGLE_ON_OFF ) ) == 0 ) {
 800417c:	2102      	movs	r1, #2
 800417e:	4845      	ldr	r0, [pc, #276]	; (8004294 <Read_SWITCH_ON_OFF_Status+0x1d8>)
 8004180:	f7fc fe44 	bl	8000e0c <HAL_GPIO_ReadPin>
 8004184:	2800      	cmp	r0, #0
 8004186:	d103      	bne.n	8004190 <Read_SWITCH_ON_OFF_Status+0xd4>
				g_Switch_Instant_Status = MY_ON ;
 8004188:	2201      	movs	r2, #1
 800418a:	4b41      	ldr	r3, [pc, #260]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	e7a6      	b.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
				g_Switch_Instant_Status = MY_OFF ;
 8004190:	2200      	movs	r2, #0
 8004192:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	e7a2      	b.n	80040de <Read_SWITCH_ON_OFF_Status+0x22>
			if   ( g_Switch_Stable_Status == g_Switch_Instant_Status )		{
 8004198:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <Read_SWITCH_ON_OFF_Status+0x1dc>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d017      	beq.n	80041d6 <Read_SWITCH_ON_OFF_Status+0x11a>
				g_Switch_Sensivity_Counter-- ;
 80041a6:	4a3d      	ldr	r2, [pc, #244]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 80041a8:	8813      	ldrh	r3, [r2, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]
				if ( g_Switch_Sensivity_Counter == 0 )	{
 80041b0:	8813      	ldrh	r3, [r2, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d000      	beq.n	80041ba <Read_SWITCH_ON_OFF_Status+0xfe>
 80041b8:	e79a      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
					if ( g_Switch_Stable_Status == SWITCH_OFF )   {
 80041ba:	4b37      	ldr	r3, [pc, #220]	; (8004298 <Read_SWITCH_ON_OFF_Status+0x1dc>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <Read_SWITCH_ON_OFF_Status+0x122>
						if  ( g_Switch_Instant_Status == SWITCH_OFF )	{
 80041c4:	4b32      	ldr	r3, [pc, #200]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d013      	beq.n	80041f6 <Read_SWITCH_ON_OFF_Status+0x13a>
							g_Switch_Sensivity_Counter 	= SWITCH_SENSIVITY_TIME_IN_RELATION_WITH_ADC ;
 80041ce:	2208      	movs	r2, #8
 80041d0:	4b32      	ldr	r3, [pc, #200]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	e78c      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
				g_Switch_Sensivity_Counter 	= SWITCH_SENSIVITY_TIME_IN_RELATION_WITH_ADC ;
 80041d6:	2208      	movs	r2, #8
 80041d8:	4b30      	ldr	r3, [pc, #192]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	e788      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
						g_Switch_Changes_Direction 	= FROM_OFF_TO_ON ;
 80041de:	2202      	movs	r2, #2
 80041e0:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <Read_SWITCH_ON_OFF_Status+0x1e4>)
 80041e2:	701a      	strb	r2, [r3, #0]
						g_Switch_Stable_Status 		= g_Switch_Instant_Status ;
 80041e4:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <Read_SWITCH_ON_OFF_Status+0x1dc>)
 80041ec:	8013      	strh	r3, [r2, #0]
						SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_ARM );					//   N_17 add
 80041ee:	2001      	movs	r0, #1
 80041f0:	f7ff f9f8 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 80041f4:	e77c      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
							g_Switch_Changes_Direction 	= FROM_ON_TO_OFF ;
 80041f6:	2201      	movs	r2, #1
 80041f8:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <Read_SWITCH_ON_OFF_Status+0x1e4>)
 80041fa:	701a      	strb	r2, [r3, #0]
							g_Switch_Stable_Status 		= g_Switch_Instant_Status ;
 80041fc:	4b24      	ldr	r3, [pc, #144]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <Read_SWITCH_ON_OFF_Status+0x1dc>)
 8004204:	8013      	strh	r3, [r2, #0]
							SPECIFY_The_SIGNAL_on_The_PGM1_OUT( FOR_DISARM );
 8004206:	2002      	movs	r0, #2
 8004208:	f7ff f9ec 	bl	80035e4 <SPECIFY_The_SIGNAL_on_The_PGM1_OUT>
 800420c:	e770      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
			if    	( ( g_Switch_Instant_Status == MY_ON ) && ( g_Switch_Instant_Status_mem == MY_OFF ) ) {
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d00c      	beq.n	8004232 <Read_SWITCH_ON_OFF_Status+0x176>
			else if  ( ( g_Switch_Instant_Status == MY_OFF ) && ( g_Switch_Instant_Status_mem == MY_ON ) ) {
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <Read_SWITCH_ON_OFF_Status+0x1d4>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <Read_SWITCH_ON_OFF_Status+0x16e>
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <Read_SWITCH_ON_OFF_Status+0x1e8>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d01a      	beq.n	8004260 <Read_SWITCH_ON_OFF_Status+0x1a4>
				g_Switch_Sensivity_Counter 	= SWITCH_SENSIVITY_TIME_IN_RELATION_WITH_ADC ;
 800422a:	2208      	movs	r2, #8
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 800422e:	801a      	strh	r2, [r3, #0]
}
 8004230:	e75e      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
			if    	( ( g_Switch_Instant_Status == MY_ON ) && ( g_Switch_Instant_Status_mem == MY_OFF ) ) {
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <Read_SWITCH_ON_OFF_Status+0x1e8>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ee      	bne.n	8004218 <Read_SWITCH_ON_OFF_Status+0x15c>
		 		g_Switch_Sensivity_Counter-- ;
 800423a:	4a18      	ldr	r2, [pc, #96]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 800423c:	8813      	ldrh	r3, [r2, #0]
 800423e:	3b01      	subs	r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	8013      	strh	r3, [r2, #0]
				if ( g_Switch_Sensivity_Counter == 0 )	{
 8004244:	8813      	ldrh	r3, [r2, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d000      	beq.n	800424e <Read_SWITCH_ON_OFF_Status+0x192>
 800424c:	e750      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
					g_Switch_Instant_Status_mem = MY_ON ;
 800424e:	2201      	movs	r2, #1
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <Read_SWITCH_ON_OFF_Status+0x1e8>)
 8004252:	701a      	strb	r2, [r3, #0]
					g_Switch_Sensivity_Counter 	= ( uint16_t )( SWITCH_SENSIVITY_TIME_ON_RELEASE  ) ;
 8004254:	3202      	adds	r2, #2
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 8004258:	801a      	strh	r2, [r3, #0]
					Define_The_Remote_Control_Action();														//		N_54   ADDED
 800425a:	f7ff fefb 	bl	8004054 <Define_The_Remote_Control_Action>
 800425e:	e747      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
				g_Switch_Sensivity_Counter-- ;
 8004260:	4a0e      	ldr	r2, [pc, #56]	; (800429c <Read_SWITCH_ON_OFF_Status+0x1e0>)
 8004262:	8813      	ldrh	r3, [r2, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
				if ( g_Switch_Sensivity_Counter == 0 )	{
 800426a:	8813      	ldrh	r3, [r2, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d000      	beq.n	8004274 <Read_SWITCH_ON_OFF_Status+0x1b8>
 8004272:	e73d      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
					g_Switch_Instant_Status_mem = MY_OFF ;
 8004274:	2200      	movs	r2, #0
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <Read_SWITCH_ON_OFF_Status+0x1e8>)
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e739      	b.n	80040f0 <Read_SWITCH_ON_OFF_Status+0x34>
 800427c:	20000128 	.word	0x20000128
 8004280:	20000009 	.word	0x20000009
 8004284:	200003a4 	.word	0x200003a4
 8004288:	20000046 	.word	0x20000046
 800428c:	20000044 	.word	0x20000044
 8004290:	20000074 	.word	0x20000074
 8004294:	48000400 	.word	0x48000400
 8004298:	20000078 	.word	0x20000078
 800429c:	2000000a 	.word	0x2000000a
 80042a0:	20000008 	.word	0x20000008
 80042a4:	20000076 	.word	0x20000076

080042a8 <Reset_The_Bypassed_Zones>:
//
//   RESET THE BYPASS ZONES
//
/////////////////////////////////						N_18  add
void		Reset_The_Bypassed_Zones()
{
 80042a8:	2300      	movs	r3, #0
	uint8_t    i ;
	for ( i = 0; i < ZONES_MAXIMUM ; ++i ) {
		g_Zones_TYPE_on_Current_Arming_MODE[ i ] = g_Zones_TYPE_Configuration[ i ];
 80042aa:	4804      	ldr	r0, [pc, #16]	; (80042bc <Reset_The_Bypassed_Zones+0x14>)
 80042ac:	4904      	ldr	r1, [pc, #16]	; (80042c0 <Reset_The_Bypassed_Zones+0x18>)
 80042ae:	5cc2      	ldrb	r2, [r0, r3]
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	54ca      	strb	r2, [r1, r3]
 80042b4:	3301      	adds	r3, #1
	for ( i = 0; i < ZONES_MAXIMUM ; ++i ) {
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d1f9      	bne.n	80042ae <Reset_The_Bypassed_Zones+0x6>
	}
}
 80042ba:	4770      	bx	lr
 80042bc:	200002c0 	.word	0x200002c0
 80042c0:	2000031c 	.word	0x2000031c

080042c4 <Reset_False_ALARM_Counter>:
void		Reset_False_ALARM_Counter()
{
	uint8_t  i ;
	////////////
	for ( i  = 0;  i  < ZONES_MAXIMUM; ++ i ) {
		g_ALARMS_Counter_In_one_ARM_Sequence[ i ] = 0 ;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <Reset_False_ALARM_Counter+0x10>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	705a      	strb	r2, [r3, #1]
 80042cc:	709a      	strb	r2, [r3, #2]
 80042ce:	70da      	strb	r2, [r3, #3]
 80042d0:	711a      	strb	r2, [r3, #4]
	}
}
 80042d2:	4770      	bx	lr
 80042d4:	2000046c 	.word	0x2000046c

080042d8 <Switch_ON_OFF_Alarm_Settings>:
{
 80042d8:	b510      	push	{r4, lr}
	if ( ON_or_OFF == MY_OFF  )  {
 80042da:	2800      	cmp	r0, #0
 80042dc:	d002      	beq.n	80042e4 <Switch_ON_OFF_Alarm_Settings+0xc>
	else if (ON_or_OFF == MY_ON) {
 80042de:	2801      	cmp	r0, #1
 80042e0:	d023      	beq.n	800432a <Switch_ON_OFF_Alarm_Settings+0x52>
}
 80042e2:	bd10      	pop	{r4, pc}
		Reset_False_ALARM_Counter();
 80042e4:	f7ff ffee 	bl	80042c4 <Reset_False_ALARM_Counter>
		Reset_The_Bypassed_Zones();
 80042e8:	f7ff ffde 	bl	80042a8 <Reset_The_Bypassed_Zones>
		g_Switch_Changes_Direction 			= NO_CHANGE_ON_SWITCH_STATUS ;
 80042ec:	2300      	movs	r3, #0
 80042ee:	4a1f      	ldr	r2, [pc, #124]	; (800436c <Switch_ON_OFF_Alarm_Settings+0x94>)
 80042f0:	7013      	strb	r3, [r2, #0]
		g_Entry_Exit_Sequence				= DELAY_ZONES_SEQUENCE_ON_DISARM ;
 80042f2:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <Switch_ON_OFF_Alarm_Settings+0x98>)
 80042f4:	7013      	strb	r3, [r2, #0]
		g_Delay_Zone_has_Open_mem			= MY_NO ;
 80042f6:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <Switch_ON_OFF_Alarm_Settings+0x9c>)
 80042f8:	7013      	strb	r3, [r2, #0]
		g_Follow_Zone_has_Open_mem 			= MY_NO ;
 80042fa:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <Switch_ON_OFF_Alarm_Settings+0xa0>)
 80042fc:	7013      	strb	r3, [r2, #0]
		g_Delay_Zone_has_Open_Index_mem		= 0 ;
 80042fe:	4a1f      	ldr	r2, [pc, #124]	; (800437c <Switch_ON_OFF_Alarm_Settings+0xa4>)
 8004300:	7013      	strb	r3, [r2, #0]
		g_Entry_Exit_Time_Delay     		= 0 ;
 8004302:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <Switch_ON_OFF_Alarm_Settings+0xa8>)
 8004304:	8013      	strh	r3, [r2, #0]
		g_Current_Alarm_Time_ZONES_given	= 0 ;
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <Switch_ON_OFF_Alarm_Settings+0xac>)
 8004308:	8013      	strh	r3, [r2, #0]
		g_ENTRY_Delay_Zone_did_Not_OPEN		= MY_TRUE ;			//   N6  ADDED
 800430a:	2101      	movs	r1, #1
 800430c:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <Switch_ON_OFF_Alarm_Settings+0xb0>)
 800430e:	7011      	strb	r1, [r2, #0]
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_EXIT_DELAY ]		= 0 ; 						//		N_57
 8004310:	4a1e      	ldr	r2, [pc, #120]	; (800438c <Switch_ON_OFF_Alarm_Settings+0xb4>)
 8004312:	6053      	str	r3, [r2, #4]
		g_Zones_Wireless_Status &= ~( 1 << ZONE_5_INDEX );
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <Switch_ON_OFF_Alarm_Settings+0xb8>)
 8004316:	8813      	ldrh	r3, [r2, #0]
 8004318:	310f      	adds	r1, #15
 800431a:	438b      	bics	r3, r1
 800431c:	8013      	strh	r3, [r2, #0]
		BUZZER_OFF();
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	2390      	movs	r3, #144	; 0x90
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
 8004328:	e7db      	b.n	80042e2 <Switch_ON_OFF_Alarm_Settings+0xa>
		Reset_False_ALARM_Counter();
 800432a:	f7ff ffcb 	bl	80042c4 <Reset_False_ALARM_Counter>
		g_Entry_Exit_Time_Delay 										= g_Exit_Time + 1 ;      //    N_7   ADDED
 800432e:	4a19      	ldr	r2, [pc, #100]	; (8004394 <Switch_ON_OFF_Alarm_Settings+0xbc>)
 8004330:	8813      	ldrh	r3, [r2, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	4912      	ldr	r1, [pc, #72]	; (8004380 <Switch_ON_OFF_Alarm_Settings+0xa8>)
 8004338:	800b      	strh	r3, [r1, #0]
		g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_EXIT_DELAY ]		= g_Exit_Time + 1 ;
 800433a:	8813      	ldrh	r3, [r2, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <Switch_ON_OFF_Alarm_Settings+0xb4>)
 8004340:	6053      	str	r3, [r2, #4]
		g_Alarm_on_Zones 								= 0 ;
 8004342:	2200      	movs	r2, #0
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <Switch_ON_OFF_Alarm_Settings+0xc0>)
 8004346:	801a      	strh	r2, [r3, #0]
		g_ENTRY_Delay_Zone_did_Not_OPEN					= MY_TRUE ;		//   N6  ADDED
 8004348:	3201      	adds	r2, #1
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <Switch_ON_OFF_Alarm_Settings+0xb0>)
 800434c:	701a      	strb	r2, [r3, #0]
		if 	( g_Switch_Stable_Status != SWITCH_ON_STAY_INSTANT_ARM ) {
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <Switch_ON_OFF_Alarm_Settings+0xc4>)
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b03      	cmp	r3, #3
 8004356:	d0c4      	beq.n	80042e2 <Switch_ON_OFF_Alarm_Settings+0xa>
			g_Buzzer_ON_OFF_Flag                    		= MY_OFF ;
 8004358:	2200      	movs	r2, #0
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <Switch_ON_OFF_Alarm_Settings+0xc8>)
 800435c:	701a      	strb	r2, [r3, #0]
			g_Buzzer_ON_OFF_Times[ MY_OFF ] 				= BUZZER_ON_EXIT_BEEP_TIME_OFF ;
 800435e:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <Switch_ON_OFF_Alarm_Settings+0xcc>)
 8004360:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <Switch_ON_OFF_Alarm_Settings+0xd0>)
 8004362:	801a      	strh	r2, [r3, #0]
			g_Buzzer_ON_OFF_Times[ MY_ON ] 					= BUZZER_ON_EXIT_BEEP_TIME_ON ;
 8004364:	22fa      	movs	r2, #250	; 0xfa
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	805a      	strh	r2, [r3, #2]
}
 800436a:	e7ba      	b.n	80042e2 <Switch_ON_OFF_Alarm_Settings+0xa>
 800436c:	20000008 	.word	0x20000008
 8004370:	2000005b 	.word	0x2000005b
 8004374:	2000005a 	.word	0x2000005a
 8004378:	20000060 	.word	0x20000060
 800437c:	20000059 	.word	0x20000059
 8004380:	2000005c 	.word	0x2000005c
 8004384:	20000054 	.word	0x20000054
 8004388:	20000002 	.word	0x20000002
 800438c:	2000010c 	.word	0x2000010c
 8004390:	2000008c 	.word	0x2000008c
 8004394:	20000006 	.word	0x20000006
 8004398:	2000004c 	.word	0x2000004c
 800439c:	20000078 	.word	0x20000078
 80043a0:	20000050 	.word	0x20000050
 80043a4:	200001a0 	.word	0x200001a0
 80043a8:	00004e20 	.word	0x00004e20

080043ac <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer>:
{
 80043ac:	b510      	push	{r4, lr}
	if   		( Write_Or_Read == MY_WRITE ) {
 80043ae:	2801      	cmp	r0, #1
 80043b0:	d003      	beq.n	80043ba <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xe>
	else if   	( Write_Or_Read == MY_READ ) {
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d100      	bne.n	80043b8 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xc>
 80043b6:	e06d      	b.n	8004494 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xe8>
}
 80043b8:	bd10      	pop	{r4, pc}
			Zone_Type = g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] ;  // INDEX_UART_PROTOCOL_V2_CMD_RESULT + i ] ;
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80043bc:	7a9b      	ldrb	r3, [r3, #10]
			if   ( Zone_Type < MAX_ZONE_TYPES ) {
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d811      	bhi.n	80043e6 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x3a>
				g_Zones_TYPE_Configuration[ i ] = Zone_Type ;
 80043c2:	4a61      	ldr	r2, [pc, #388]	; (8004548 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x19c>)
 80043c4:	7013      	strb	r3, [r2, #0]
			Zone_Type = g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] ;  // INDEX_UART_PROTOCOL_V2_CMD_RESULT + i ] ;
 80043c6:	4b5f      	ldr	r3, [pc, #380]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80043c8:	7adb      	ldrb	r3, [r3, #11]
			if   ( Zone_Type < MAX_ZONE_TYPES ) {
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d80b      	bhi.n	80043e6 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x3a>
				g_Zones_TYPE_Configuration[ i ] = Zone_Type ;
 80043ce:	7053      	strb	r3, [r2, #1]
			Zone_Type = g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] ;  // INDEX_UART_PROTOCOL_V2_CMD_RESULT + i ] ;
 80043d0:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80043d2:	7b1b      	ldrb	r3, [r3, #12]
			if   ( Zone_Type < MAX_ZONE_TYPES ) {
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d806      	bhi.n	80043e6 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x3a>
				g_Zones_TYPE_Configuration[ i ] = Zone_Type ;
 80043d8:	7093      	strb	r3, [r2, #2]
			Zone_Type = g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] ;  // INDEX_UART_PROTOCOL_V2_CMD_RESULT + i ] ;
 80043da:	4b5a      	ldr	r3, [pc, #360]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80043dc:	7b5b      	ldrb	r3, [r3, #13]
			if   ( Zone_Type < MAX_ZONE_TYPES ) {
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d801      	bhi.n	80043e6 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x3a>
				g_Zones_TYPE_Configuration[ i ] = Zone_Type ;
 80043e2:	4a59      	ldr	r2, [pc, #356]	; (8004548 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x19c>)
 80043e4:	70d3      	strb	r3, [r2, #3]
		g_Entry_Time	= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_ENTRY_DELAY - 1 ] ;
 80043e6:	4a57      	ldr	r2, [pc, #348]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80043e8:	7b91      	ldrb	r1, [r2, #14]
 80043ea:	4b58      	ldr	r3, [pc, #352]	; (800454c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1a0>)
 80043ec:	8019      	strh	r1, [r3, #0]
		g_Exit_Time 	= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_EXIT_DELAY - 1 ] ;
 80043ee:	7bd1      	ldrb	r1, [r2, #15]
 80043f0:	4b57      	ldr	r3, [pc, #348]	; (8004550 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1a4>)
 80043f2:	8019      	strh	r1, [r3, #0]
		g_Alarm_Time 	= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_ALARM_TIME - 1 ] ;
 80043f4:	7c11      	ldrb	r1, [r2, #16]
 80043f6:	4b57      	ldr	r3, [pc, #348]	; (8004554 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1a8>)
 80043f8:	8019      	strh	r1, [r3, #0]
		g_Switch_Mode					= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_ENABLE_MODE - 1 ] ;
 80043fa:	7c51      	ldrb	r1, [r2, #17]
 80043fc:	4b56      	ldr	r3, [pc, #344]	; (8004558 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1ac>)
 80043fe:	7019      	strb	r1, [r3, #0]
		g_AUTO_Stay_Instant 			= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_AUTO_ARM_MODE - 1 ] ;
 8004400:	7c91      	ldrb	r1, [r2, #18]
 8004402:	4b56      	ldr	r3, [pc, #344]	; (800455c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b0>)
 8004404:	7019      	strb	r1, [r3, #0]
		g_SIREN_Follow_Remote_Control	= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_SIREN_FOLLOW_PGM - 1 ] ;
 8004406:	7cd1      	ldrb	r1, [r2, #19]
 8004408:	4b55      	ldr	r3, [pc, #340]	; (8004560 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b4>)
 800440a:	7019      	strb	r1, [r3, #0]
		if ( g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_DISARM - 1 ] == MY_ON ) {
 800440c:	7d13      	ldrb	r3, [r2, #20]
 800440e:	3b01      	subs	r3, #1
 8004410:	4259      	negs	r1, r3
 8004412:	414b      	adcs	r3, r1
		Result = 0 ;
 8004414:	b2db      	uxtb	r3, r3
		if ( g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_ARM - 1 ] == MY_ON ) {
 8004416:	7d52      	ldrb	r2, [r2, #21]
 8004418:	2a01      	cmp	r2, #1
 800441a:	d032      	beq.n	8004482 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xd6>
		if ( g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_STAY_ARM - 1 ] == MY_ON ) {
 800441c:	4a49      	ldr	r2, [pc, #292]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 800441e:	7d92      	ldrb	r2, [r2, #22]
 8004420:	2a01      	cmp	r2, #1
 8004422:	d031      	beq.n	8004488 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xdc>
		if ( g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_SLEEP_ARM - 1 ] == MY_ON ) {
 8004424:	4a47      	ldr	r2, [pc, #284]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 8004426:	7dd2      	ldrb	r2, [r2, #23]
 8004428:	2a01      	cmp	r2, #1
 800442a:	d030      	beq.n	800448e <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xe2>
		g_PGM_Mode = Result ;
 800442c:	4a4d      	ldr	r2, [pc, #308]	; (8004564 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b8>)
 800442e:	7013      	strb	r3, [r2, #0]
		g_Zones_Chime 	= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_CHIME_ZONES_1_2 - 1 ];		//  CHMIE ZONES 1 - 2
 8004430:	4944      	ldr	r1, [pc, #272]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 8004432:	7e8b      	ldrb	r3, [r1, #26]
 8004434:	484c      	ldr	r0, [pc, #304]	; (8004568 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1bc>)
 8004436:	8003      	strh	r3, [r0, #0]
		g_Zones_Chime 	|= Result ;		//  CHMIE ZONES 3 - 4
 8004438:	8804      	ldrh	r4, [r0, #0]
		Result 			=  ( uint16_t )( g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_CHIME_ZONES_3_4 - 1 ] << 2 ) ;
 800443a:	7eca      	ldrb	r2, [r1, #27]
 800443c:	0092      	lsls	r2, r2, #2
		g_Zones_Chime 	|= Result ;		//  CHMIE ZONES 3 - 4
 800443e:	b2d3      	uxtb	r3, r2
 8004440:	4323      	orrs	r3, r4
 8004442:	8003      	strh	r3, [r0, #0]
		g_Zones_Wireless 	= g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_WIRELESS_ZONES_1_2 - 1 ];		//  Wireless ZONES 1 - 2
 8004444:	7e0b      	ldrb	r3, [r1, #24]
 8004446:	4849      	ldr	r0, [pc, #292]	; (800456c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1c0>)
 8004448:	8003      	strh	r3, [r0, #0]
		g_Zones_Wireless 	|= Result | DEFAULT_WIRELESS_AS_PANIC_ZONE_5 ;		//	MUST BE ALWAYS EXIST AS 5th ZONE THE REMOTE CONTROL PANIC KEY
 800444a:	8804      	ldrh	r4, [r0, #0]
		Result 				=  ( uint16_t )( g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_WIRELESS_ZONES_3_4 - 1 ] << 2 ) ;
 800444c:	7e4a      	ldrb	r2, [r1, #25]
 800444e:	0092      	lsls	r2, r2, #2
		g_Zones_Wireless 	|= Result | DEFAULT_WIRELESS_AS_PANIC_ZONE_5 ;		//	MUST BE ALWAYS EXIST AS 5th ZONE THE REMOTE CONTROL PANIC KEY
 8004450:	2310      	movs	r3, #16
 8004452:	4313      	orrs	r3, r2
 8004454:	b2db      	uxtb	r3, r3
 8004456:	4323      	orrs	r3, r4
 8004458:	8003      	strh	r3, [r0, #0]
		Record_All_Programming_Data_on_The_FLASH();
 800445a:	f7ff fb6f 	bl	8003b3c <Record_All_Programming_Data_on_The_FLASH>
		START_STOP_ALARM( MY_STOP , 0 );						//  STOP THE ALARM IF ANY EXIST IN PROGGRESS		N_19
 800445e:	2100      	movs	r1, #0
 8004460:	2000      	movs	r0, #0
 8004462:	f7fe fe45 	bl	80030f0 <START_STOP_ALARM>
		Switch_ON_OFF_Alarm_Settings( MY_OFF );					//  RESET THE CHANGES STATUS IN ALL OF THE CASES     >>
 8004466:	2000      	movs	r0, #0
 8004468:	f7ff ff36 	bl	80042d8 <Switch_ON_OFF_Alarm_Settings>
		LOAD_Header_Data_On_Buffer_to_Send_Response( PROTOCOL_V2_WRITE    ,  MY_SUCCESS );
 800446c:	2101      	movs	r1, #1
 800446e:	2001      	movs	r0, #1
 8004470:	f7fe fd50 	bl	8002f14 <LOAD_Header_Data_On_Buffer_to_Send_Response>
		SEND_Uart_Protocol_V2_Packet_Data( 0 ) ;								//		N_12     added
 8004474:	2000      	movs	r0, #0
 8004476:	f7ff fa35 	bl	80038e4 <SEND_Uart_Protocol_V2_Packet_Data>
		g_Executed_UART_CMD_Successfully = MY_TRUE ;
 800447a:	2201      	movs	r2, #1
 800447c:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1c4>)
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e79a      	b.n	80043b8 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xc>
			Result |= 2 ;
 8004482:	3201      	adds	r2, #1
 8004484:	4313      	orrs	r3, r2
 8004486:	e7c9      	b.n	800441c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x70>
			Result |= 4 ;
 8004488:	3203      	adds	r2, #3
 800448a:	4313      	orrs	r3, r2
 800448c:	e7ca      	b.n	8004424 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x78>
			Result |= 8 ;
 800448e:	3207      	adds	r2, #7
 8004490:	4313      	orrs	r3, r2
 8004492:	e7cb      	b.n	800442c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x80>
		LOAD_Header_Data_On_Buffer_to_Send_Response( PROTOCOL_V2_READ     ,  MY_SUCCESS );
 8004494:	2101      	movs	r1, #1
 8004496:	3002      	adds	r0, #2
 8004498:	f7fe fd3c 	bl	8002f14 <LOAD_Header_Data_On_Buffer_to_Send_Response>
		g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_COMMAND_ID ] 		= 	CMD_ID_TRANSFER_ALL_PROGRAMMING_DATA ;
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 800449e:	2201      	movs	r2, #1
 80044a0:	719a      	strb	r2, [r3, #6]
			g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + i ] = g_Zones_TYPE_Configuration[ i ] ;
 80044a2:	4a29      	ldr	r2, [pc, #164]	; (8004548 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x19c>)
 80044a4:	7811      	ldrb	r1, [r2, #0]
 80044a6:	7299      	strb	r1, [r3, #10]
 80044a8:	7851      	ldrb	r1, [r2, #1]
 80044aa:	72d9      	strb	r1, [r3, #11]
 80044ac:	7891      	ldrb	r1, [r2, #2]
 80044ae:	7319      	strb	r1, [r3, #12]
 80044b0:	78d2      	ldrb	r2, [r2, #3]
 80044b2:	735a      	strb	r2, [r3, #13]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_ENTRY_DELAY - 1 ] 	= g_Entry_Time ;
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1a0>)
 80044b6:	8812      	ldrh	r2, [r2, #0]
 80044b8:	739a      	strb	r2, [r3, #14]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_EXIT_DELAY - 1 ] 	= g_Exit_Time ;
 80044ba:	4a25      	ldr	r2, [pc, #148]	; (8004550 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1a4>)
 80044bc:	8812      	ldrh	r2, [r2, #0]
 80044be:	73da      	strb	r2, [r3, #15]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_ALARM_TIME - 1 ] 	= g_Alarm_Time ;
 80044c0:	4a24      	ldr	r2, [pc, #144]	; (8004554 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1a8>)
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	741a      	strb	r2, [r3, #16]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_ENABLE_MODE  - 1 ]		= g_Switch_Mode ;
 80044c6:	4a24      	ldr	r2, [pc, #144]	; (8004558 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1ac>)
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	745a      	strb	r2, [r3, #17]
		g_Process_Buffer[  UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_AUTO_ARM_MODE - 1  ] 	= g_AUTO_Stay_Instant ;
 80044cc:	4a23      	ldr	r2, [pc, #140]	; (800455c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b0>)
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	749a      	strb	r2, [r3, #18]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_SIREN_FOLLOW_PGM - 1 ] = g_SIREN_Follow_Remote_Control ;
 80044d2:	4a23      	ldr	r2, [pc, #140]	; (8004560 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b4>)
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	74da      	strb	r2, [r3, #19]
		if ( g_PGM_Mode & 1 ) {
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b8>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	07db      	lsls	r3, r3, #31
 80044de:	d502      	bpl.n	80044e6 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x13a>
			g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_DISARM - 1 ] = 1 ;
 80044e0:	2201      	movs	r2, #1
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80044e4:	751a      	strb	r2, [r3, #20]
		if ( g_PGM_Mode & 2 ) {
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b8>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	079b      	lsls	r3, r3, #30
 80044ec:	d502      	bpl.n	80044f4 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x148>
			g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_ARM - 1 ] = 1 ;
 80044ee:	2201      	movs	r2, #1
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 80044f2:	755a      	strb	r2, [r3, #21]
		if ( g_PGM_Mode & 4 ) {
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b8>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	075b      	lsls	r3, r3, #29
 80044fa:	d502      	bpl.n	8004502 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x156>
			g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_STAY_ARM - 1 ] = 1 ;
 80044fc:	2201      	movs	r2, #1
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 8004500:	759a      	strb	r2, [r3, #22]
		if ( g_PGM_Mode & 8 ) {
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1b8>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	071b      	lsls	r3, r3, #28
 8004508:	d502      	bpl.n	8004510 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x164>
			g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_PGM_ACTIVATE_ON_SLEEP_ARM - 1 ] = 1 ;
 800450a:	2201      	movs	r2, #1
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 800450e:	75da      	strb	r2, [r3, #23]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_CHIME_ZONES_1_2 - 1 ] = ( g_Zones_Chime & 0x03 ) ;
 8004510:	4815      	ldr	r0, [pc, #84]	; (8004568 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1bc>)
 8004512:	8802      	ldrh	r2, [r0, #0]
 8004514:	490b      	ldr	r1, [pc, #44]	; (8004544 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x198>)
 8004516:	2303      	movs	r3, #3
 8004518:	401a      	ands	r2, r3
 800451a:	768a      	strb	r2, [r1, #26]
		Result = ( uint8_t )( ( g_Zones_Chime & 0x0C ) >> 2 ) ;
 800451c:	8802      	ldrh	r2, [r0, #0]
 800451e:	0892      	lsrs	r2, r2, #2
 8004520:	401a      	ands	r2, r3
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_CHIME_ZONES_3_4 - 1 ] = Result ;
 8004522:	76ca      	strb	r2, [r1, #27]
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_WIRELESS_ZONES_1_2 - 1 ] = ( g_Zones_Wireless & 0x03 ) ;
 8004524:	4811      	ldr	r0, [pc, #68]	; (800456c <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1c0>)
 8004526:	8802      	ldrh	r2, [r0, #0]
 8004528:	401a      	ands	r2, r3
 800452a:	760a      	strb	r2, [r1, #24]
		Result = ( uint8_t )( ( g_Zones_Wireless & 0x0C ) >> 2 ) ;
 800452c:	8802      	ldrh	r2, [r0, #0]
 800452e:	0892      	lsrs	r2, r2, #2
 8004530:	4013      	ands	r3, r2
		g_Process_Buffer[ UART_PROTOCOL_V2_HEADER_LENGTH + INDEX_PROGRAMMING_WIRELESS_ZONES_3_4 - 1 ] = Result ;
 8004532:	764b      	strb	r3, [r1, #25]
		SEND_Uart_Protocol_V2_Packet_Data( MAX_PROGRAMMING_DATA - 1  );
 8004534:	2012      	movs	r0, #18
 8004536:	f7ff f9d5 	bl	80038e4 <SEND_Uart_Protocol_V2_Packet_Data>
		g_Executed_UART_CMD_Successfully = MY_TRUE ;
 800453a:	2201      	movs	r2, #1
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0x1c4>)
 800453e:	701a      	strb	r2, [r3, #0]
}
 8004540:	e73a      	b.n	80043b8 <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer+0xc>
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	200002c8 	.word	0x200002c8
 8004548:	200002c0 	.word	0x200002c0
 800454c:	20000004 	.word	0x20000004
 8004550:	20000006 	.word	0x20000006
 8004554:	20000000 	.word	0x20000000
 8004558:	20000009 	.word	0x20000009
 800455c:	2000004a 	.word	0x2000004a
 8004560:	2000006e 	.word	0x2000006e
 8004564:	20000066 	.word	0x20000066
 8004568:	20000080 	.word	0x20000080
 800456c:	2000000e 	.word	0x2000000e
 8004570:	2000005e 	.word	0x2000005e

08004574 <DECO0DE_And_Execute_UART_Commands>:
{
 8004574:	b570      	push	{r4, r5, r6, lr}
	g_Executed_UART_CMD_Successfully = MY_FALSE ;
 8004576:	2200      	movs	r2, #0
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <DECO0DE_And_Execute_UART_Commands+0xc8>)
 800457a:	701a      	strb	r2, [r3, #0]
	RX_Count 		= g_RxCount ;
 800457c:	4b30      	ldr	r3, [pc, #192]	; (8004640 <DECO0DE_And_Execute_UART_Commands+0xcc>)
 800457e:	881c      	ldrh	r4, [r3, #0]
	Result 			= g_RxBuffer_8bit[ INDEX_UART_PROTOCOL_V2_CMD_DATA_LENGTH ] + UART_PROTOCOL_V2_HEADER_LENGTH + 1 ;
 8004580:	4b30      	ldr	r3, [pc, #192]	; (8004644 <DECO0DE_And_Execute_UART_Commands+0xd0>)
 8004582:	795b      	ldrb	r3, [r3, #5]
	if  ( 	( Result == RX_Count )
 8004584:	001a      	movs	r2, r3
 8004586:	320b      	adds	r2, #11
 8004588:	4294      	cmp	r4, r2
 800458a:	d005      	beq.n	8004598 <DECO0DE_And_Execute_UART_Commands+0x24>
	g_RxCount = 0 ;
 800458c:	2200      	movs	r2, #0
 800458e:	4b2c      	ldr	r3, [pc, #176]	; (8004640 <DECO0DE_And_Execute_UART_Commands+0xcc>)
 8004590:	801a      	strh	r2, [r3, #0]
	Clear_Rx_Buffer();
 8004592:	f7fe fd13 	bl	8002fbc <Clear_Rx_Buffer>
}
 8004596:	bd70      	pop	{r4, r5, r6, pc}
		&& 	( g_RxCount < MAX_UART_DATA_BUFFER )
 8004598:	2c3b      	cmp	r4, #59	; 0x3b
 800459a:	d8f7      	bhi.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
	Header_Length	= ( RX_Count - g_RxBuffer_8bit[ INDEX_UART_PROTOCOL_V2_CMD_DATA_LENGTH ] ) - 1 ;
 800459c:	1ae3      	subs	r3, r4, r3
		&& 	( Header_Length == UART_PROTOCOL_V2_HEADER_LENGTH )
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b0b      	cmp	r3, #11
 80045a2:	d1f3      	bne.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
		my_mem_copy( &g_Process_Buffer[0] , &g_RxBuffer_8bit[ 0 ] , RX_Count );
 80045a4:	4d28      	ldr	r5, [pc, #160]	; (8004648 <DECO0DE_And_Execute_UART_Commands+0xd4>)
 80045a6:	0022      	movs	r2, r4
 80045a8:	4926      	ldr	r1, [pc, #152]	; (8004644 <DECO0DE_And_Execute_UART_Commands+0xd0>)
 80045aa:	0028      	movs	r0, r5
 80045ac:	f000 fcee 	bl	8004f8c <my_mem_copy>
		if 	(   ( g_Process_Buffer[ INDEX_UART_V2_PROTOCOL_ID ] == UART_PROTOCOL_V2_ID )			  //  TEST  THE PROTOCOL ID
 80045b0:	792b      	ldrb	r3, [r5, #4]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d1ea      	bne.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
			&&  ( g_Process_Buffer[ RX_Count - 1 ] == UART_PROTOCOL_V2_ID )                           //   >>          >>
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <DECO0DE_And_Execute_UART_Commands+0xd4>)
 80045b8:	191c      	adds	r4, r3, r4
 80045ba:	3c01      	subs	r4, #1
 80045bc:	7823      	ldrb	r3, [r4, #0]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d1e4      	bne.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
			Command_ID 		= g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_COMMAND_ID ];
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <DECO0DE_And_Execute_UART_Commands+0xd4>)
			switch ( Command_ID ) {
 80045c4:	799b      	ldrb	r3, [r3, #6]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d003      	beq.n	80045d2 <DECO0DE_And_Execute_UART_Commands+0x5e>
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d00d      	beq.n	80045ea <DECO0DE_And_Execute_UART_Commands+0x76>
					asm("nop");
 80045ce:	46c0      	nop			; (mov r8, r8)
					break;
 80045d0:	e7dc      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
			Write_Or_Read	= g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_WRITE_OR_READ ];
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <DECO0DE_And_Execute_UART_Commands+0xd4>)
					if   ( Write_Or_Read == MY_WRITE ) {
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d003      	beq.n	80045e2 <DECO0DE_And_Execute_UART_Commands+0x6e>
						Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer( MY_READ );
 80045da:	2000      	movs	r0, #0
 80045dc:	f7ff fee6 	bl	80043ac <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer>
 80045e0:	e7d4      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
						Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer( MY_WRITE );
 80045e2:	2001      	movs	r0, #1
 80045e4:	f7ff fee2 	bl	80043ac <Write_Or_Read_Programming_Data_From_Or_to_UART_Buffer>
 80045e8:	e7d0      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
					SUB_CMD_ID = g_Process_Buffer[ INDEX_UART_PROTOCOL_V2_CMD_PARAMETER_1 ];
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <DECO0DE_And_Execute_UART_Commands+0xd4>)
 80045ec:	79d8      	ldrb	r0, [r3, #7]
					g_Big_Times_And_Seconds[ TASK_INDEX_BIG_TIMES_AUTO_MONITORING_OFF ] = BIG_TIMES_INTERVAL_TIME_TO_AUTO_STOP_MONITORING ;  // REFRESH THE AUTO STOP MONITORING TIME
 80045ee:	2296      	movs	r2, #150	; 0x96
 80045f0:	0052      	lsls	r2, r2, #1
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <DECO0DE_And_Execute_UART_Commands+0xd8>)
 80045f4:	60da      	str	r2, [r3, #12]
					switch ( SUB_CMD_ID ) {
 80045f6:	2808      	cmp	r0, #8
 80045f8:	d81d      	bhi.n	8004636 <DECO0DE_And_Execute_UART_Commands+0xc2>
 80045fa:	0083      	lsls	r3, r0, #2
 80045fc:	4a14      	ldr	r2, [pc, #80]	; (8004650 <DECO0DE_And_Execute_UART_Commands+0xdc>)
 80045fe:	58d3      	ldr	r3, [r2, r3]
 8004600:	469f      	mov	pc, r3
						MOBILE_User_Arm_Disarm_The_System( SUB_CMD_ID );
 8004602:	f7ff fad3 	bl	8003bac <MOBILE_User_Arm_Disarm_The_System>
						break;
 8004606:	e7c1      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
						g_START_Monitoring 				= MY_TRUE ;
 8004608:	2301      	movs	r3, #1
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <DECO0DE_And_Execute_UART_Commands+0xe0>)
 800460c:	7013      	strb	r3, [r2, #0]
						g_START_STOP_Trigger_Monitoring	= MY_TRUE ;
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <DECO0DE_And_Execute_UART_Commands+0xe4>)
 8004610:	7013      	strb	r3, [r2, #0]
						break;
 8004612:	e7bb      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
						g_START_WIFI_Monitoring			= MY_TRUE ;
 8004614:	2301      	movs	r3, #1
 8004616:	4a11      	ldr	r2, [pc, #68]	; (800465c <DECO0DE_And_Execute_UART_Commands+0xe8>)
 8004618:	7013      	strb	r3, [r2, #0]
						g_START_Monitoring 				= MY_TRUE ;
 800461a:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <DECO0DE_And_Execute_UART_Commands+0xe0>)
 800461c:	7013      	strb	r3, [r2, #0]
						g_START_STOP_Trigger_Monitoring	= MY_TRUE ;
 800461e:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <DECO0DE_And_Execute_UART_Commands+0xe4>)
 8004620:	7013      	strb	r3, [r2, #0]
						break;
 8004622:	e7b3      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
						g_START_Monitoring 				= MY_FALSE ;
 8004624:	2300      	movs	r3, #0
 8004626:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <DECO0DE_And_Execute_UART_Commands+0xe0>)
 8004628:	7013      	strb	r3, [r2, #0]
						g_START_WIFI_Monitoring			= MY_FALSE ;			// 		N_20
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <DECO0DE_And_Execute_UART_Commands+0xe8>)
 800462c:	7013      	strb	r3, [r2, #0]
						g_START_STOP_Trigger_Monitoring	= MY_TRUE ;
 800462e:	2201      	movs	r2, #1
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <DECO0DE_And_Execute_UART_Commands+0xe4>)
 8004632:	701a      	strb	r2, [r3, #0]
						break;
 8004634:	e7aa      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
						asm("nop");
 8004636:	46c0      	nop			; (mov r8, r8)
						break;
 8004638:	e7a8      	b.n	800458c <DECO0DE_And_Execute_UART_Commands+0x18>
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	2000005e 	.word	0x2000005e
 8004640:	2000006c 	.word	0x2000006c
 8004644:	20000358 	.word	0x20000358
 8004648:	200002c8 	.word	0x200002c8
 800464c:	2000010c 	.word	0x2000010c
 8004650:	080054f0 	.word	0x080054f0
 8004654:	2000006f 	.word	0x2000006f
 8004658:	20000070 	.word	0x20000070
 800465c:	20000071 	.word	0x20000071

08004660 <Retrieve_Decode_and_Execute_UART_Communication_CMDs>:
{
 8004660:	b510      	push	{r4, lr}
	if  ( ( g_Received_UART_Data == MY_TRUE ) && ( g_Tasks_Times[ TASK_INDEX_TEST_UART_RX_DATA ] == 0 ) ) {			//    N_8    ADDED
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x58>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d004      	beq.n	8004674 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x14>
	else if ( g_RX_Uart_Ready == MY_TRUE ) {
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x5c>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d00d      	beq.n	800468e <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x2e>
}
 8004672:	bd10      	pop	{r4, pc}
	if  ( ( g_Received_UART_Data == MY_TRUE ) && ( g_Tasks_Times[ TASK_INDEX_TEST_UART_RX_DATA ] == 0 ) ) {			//    N_8    ADDED
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x60>)
 8004676:	8a9b      	ldrh	r3, [r3, #20]
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f5      	bne.n	800466a <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0xa>
		g_Received_UART_Data 					= MY_FALSE ;
 800467e:	2400      	movs	r4, #0
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x58>)
 8004682:	701c      	strb	r4, [r3, #0]
		DECO0DE_And_Execute_UART_Commands();
 8004684:	f7ff ff76 	bl	8004574 <DECO0DE_And_Execute_UART_Commands>
		g_Counting_Time_to_Discard_Rx_Buffer	= 0 ;
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x64>)
 800468a:	801c      	strh	r4, [r3, #0]
 800468c:	e7f1      	b.n	8004672 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x12>
		g_RX_Uart_Ready 		= MY_FALSE ;
 800468e:	2200      	movs	r2, #0
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x5c>)
 8004692:	701a      	strb	r2, [r3, #0]
		g_Received_UART_Data 	= MY_TRUE ;
 8004694:	3201      	adds	r2, #1
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x58>)
 8004698:	701a      	strb	r2, [r3, #0]
		g_RxCount++ ;
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x68>)
 800469c:	8819      	ldrh	r1, [r3, #0]
 800469e:	3101      	adds	r1, #1
 80046a0:	b289      	uxth	r1, r1
 80046a2:	8019      	strh	r1, [r3, #0]
		g_Tasks_Times[ TASK_INDEX_TEST_UART_RX_DATA ] = INTERVAL_TIME_TO_TEST_UART_RECEIVED_DATA ;
 80046a4:	3227      	adds	r2, #39	; 0x27
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x60>)
 80046a8:	829a      	strh	r2, [r3, #20]
		HAL_UART_Receive_IT( &huart1 , &g_RxBuffer_8bit[ g_RxCount ] , 1 );
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x6c>)
 80046ac:	18c9      	adds	r1, r1, r3
 80046ae:	3a27      	subs	r2, #39	; 0x27
 80046b0:	4807      	ldr	r0, [pc, #28]	; (80046d0 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x70>)
 80046b2:	f7fd fe1f 	bl	80022f4 <HAL_UART_Receive_IT>
}
 80046b6:	e7dc      	b.n	8004672 <Retrieve_Decode_and_Execute_UART_Communication_CMDs+0x12>
 80046b8:	2000006a 	.word	0x2000006a
 80046bc:	20000069 	.word	0x20000069
 80046c0:	20000128 	.word	0x20000128
 80046c4:	20000052 	.word	0x20000052
 80046c8:	2000006c 	.word	0x2000006c
 80046cc:	20000358 	.word	0x20000358
 80046d0:	2000021c 	.word	0x2000021c

080046d4 <Test_User_Change_on_ARMING_Status>:
{
 80046d4:	b510      	push	{r4, lr}
	if ( g_Tasks_Times[ TASK_INDEX_TO_READ_CHANGES_ON_REMOTE_SWITCH ] == 0 ) {									//		N_7		ADDED
 80046d6:	4b25      	ldr	r3, [pc, #148]	; (800476c <Test_User_Change_on_ARMING_Status+0x98>)
 80046d8:	895b      	ldrh	r3, [r3, #10]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <Test_User_Change_on_ARMING_Status+0x20>
		g_Tasks_Times[ TASK_INDEX_TO_READ_CHANGES_ON_REMOTE_SWITCH ] = INTERVAL_TIME_TO_READ_CHANGES_ON_REMOTE_SWITCH ;
 80046e0:	220a      	movs	r2, #10
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <Test_User_Change_on_ARMING_Status+0x98>)
 80046e4:	815a      	strh	r2, [r3, #10]
		switch ( g_Switch_Changes_Direction ) {
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <Test_User_Change_on_ARMING_Status+0x9c>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d002      	beq.n	80046f6 <Test_User_Change_on_ARMING_Status+0x22>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d00e      	beq.n	8004712 <Test_User_Change_on_ARMING_Status+0x3e>
}
 80046f4:	bd10      	pop	{r4, pc}
				if ( g_Alarm_on_Zones )	{
 80046f6:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <Test_User_Change_on_ARMING_Status+0xa0>)
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <Test_User_Change_on_ARMING_Status+0x34>
				Switch_ON_OFF_Alarm_Settings( MY_OFF );
 8004700:	2000      	movs	r0, #0
 8004702:	f7ff fde9 	bl	80042d8 <Switch_ON_OFF_Alarm_Settings>
				break;
 8004706:	e7f5      	b.n	80046f4 <Test_User_Change_on_ARMING_Status+0x20>
					START_STOP_ALARM( MY_STOP , 0 );
 8004708:	2100      	movs	r1, #0
 800470a:	2000      	movs	r0, #0
 800470c:	f7fe fcf0 	bl	80030f0 <START_STOP_ALARM>
 8004710:	e7f6      	b.n	8004700 <Test_User_Change_on_ARMING_Status+0x2c>
				g_Switch_Changes_Direction 	= NO_CHANGE_ON_SWITCH_STATUS ;  //  RESET THE CHANGES ON SWITCH STATUS
 8004712:	2200      	movs	r2, #0
 8004714:	4b16      	ldr	r3, [pc, #88]	; (8004770 <Test_User_Change_on_ARMING_Status+0x9c>)
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	2300      	movs	r3, #0
					if   (   g_Zones_TYPE_on_Current_Arming_MODE[ i ] != ZONE_TYPE_BYPASS ) {
 800471a:	4917      	ldr	r1, [pc, #92]	; (8004778 <Test_User_Change_on_ARMING_Status+0xa4>)
						g_Zones_TYPE_on_Current_Arming_MODE[ i ] = g_Zones_TYPE_Configuration[ i ];
 800471c:	4c17      	ldr	r4, [pc, #92]	; (800477c <Test_User_Change_on_ARMING_Status+0xa8>)
 800471e:	0008      	movs	r0, r1
 8004720:	e002      	b.n	8004728 <Test_User_Change_on_ARMING_Status+0x54>
 8004722:	3301      	adds	r3, #1
				for ( i = 0; i < ZONES_MAXIMUM ; ++i ) {
 8004724:	2b05      	cmp	r3, #5
 8004726:	d006      	beq.n	8004736 <Test_User_Change_on_ARMING_Status+0x62>
					if   (   g_Zones_TYPE_on_Current_Arming_MODE[ i ] != ZONE_TYPE_BYPASS ) {
 8004728:	5cca      	ldrb	r2, [r1, r3]
 800472a:	2a05      	cmp	r2, #5
 800472c:	d0f9      	beq.n	8004722 <Test_User_Change_on_ARMING_Status+0x4e>
						g_Zones_TYPE_on_Current_Arming_MODE[ i ] = g_Zones_TYPE_Configuration[ i ];
 800472e:	5ce2      	ldrb	r2, [r4, r3]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	54c2      	strb	r2, [r0, r3]
 8004734:	e7f5      	b.n	8004722 <Test_User_Change_on_ARMING_Status+0x4e>
				if ( ( g_Switch_Stable_Status == SWITCH_ON_STAY_ARM ) || ( ( g_Switch_Stable_Status == SWITCH_ON_STAY_INSTANT_ARM ) ) ) {
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <Test_User_Change_on_ARMING_Status+0xac>)
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d00b      	beq.n	8004758 <Test_User_Change_on_ARMING_Status+0x84>
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <Test_User_Change_on_ARMING_Status+0xac>)
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d006      	beq.n	8004758 <Test_User_Change_on_ARMING_Status+0x84>
				Switch_ON_OFF_Alarm_Settings( MY_ON );
 800474a:	2001      	movs	r0, #1
 800474c:	f7ff fdc4 	bl	80042d8 <Switch_ON_OFF_Alarm_Settings>
				g_Entry_Exit_Sequence = DELAY_ZONES_SEQUENCE_ON_EXIT_DELAY ;
 8004750:	2201      	movs	r2, #1
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <Test_User_Change_on_ARMING_Status+0xb0>)
 8004754:	701a      	strb	r2, [r3, #0]
}
 8004756:	e7cd      	b.n	80046f4 <Test_User_Change_on_ARMING_Status+0x20>
					Change_The_FOLLOW_Zones_AS_DISABLE();
 8004758:	f7fe fec4 	bl	80034e4 <Change_The_FOLLOW_Zones_AS_DISABLE>
					if   ( g_Switch_Stable_Status == SWITCH_ON_STAY_INSTANT_ARM ) {
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <Test_User_Change_on_ARMING_Status+0xac>)
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d1f1      	bne.n	800474a <Test_User_Change_on_ARMING_Status+0x76>
						Change_The_Delay_Zones_As_Instant();
 8004766:	f7fe fe9f 	bl	80034a8 <Change_The_Delay_Zones_As_Instant>
 800476a:	e7ee      	b.n	800474a <Test_User_Change_on_ARMING_Status+0x76>
 800476c:	20000128 	.word	0x20000128
 8004770:	20000008 	.word	0x20000008
 8004774:	2000004c 	.word	0x2000004c
 8004778:	2000031c 	.word	0x2000031c
 800477c:	200002c0 	.word	0x200002c0
 8004780:	20000078 	.word	0x20000078
 8004784:	2000005b 	.word	0x2000005b

08004788 <Show_LED_For_Zones_Status>:
void		Show_LED_For_Zones_Status()
{
	///////////////////////////////////////////////////////////
	//  IF AN ALARM EXIST THEN SHOW LED QUICKLY FLASHING
	///////////////////////////////////////////////////////////
	if  ( g_Alarm_on_Zones )	{
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <Show_LED_For_Zones_Status+0x74>)
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <Show_LED_For_Zones_Status+0x38>
		g_Zones_LED_Indication_Flags = LED_FLASHING_ON_ALARM ;
 8004792:	2202      	movs	r2, #2
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <Show_LED_For_Zones_Status+0x78>)
 8004796:	701a      	strb	r2, [r3, #0]
		g_Zones_LED_Flashing_on_Alarm_Counter-- ;
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <Show_LED_For_Zones_Status+0x7c>)
 800479a:	8813      	ldrh	r3, [r2, #0]
 800479c:	3b01      	subs	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8013      	strh	r3, [r2, #0]

		if ( g_Zones_LED_Flashing_on_Alarm_Counter == 0 )	{
 80047a2:	8813      	ldrh	r3, [r2, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11c      	bne.n	80047e4 <Show_LED_For_Zones_Status+0x5c>
			g_Zones_LED_Flashing_on_Alarm_Counter = LED_FLASHING_ON_ALARM_TIME ;
 80047aa:	2202      	movs	r2, #2
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <Show_LED_For_Zones_Status+0x7c>)
 80047ae:	801a      	strh	r2, [r3, #0]
			SWITCH_Green_Led_Toggle();				//	>>    ADDED
 80047b0:	2290      	movs	r2, #144	; 0x90
 80047b2:	05d2      	lsls	r2, r2, #23
 80047b4:	6951      	ldr	r1, [r2, #20]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	404b      	eors	r3, r1
 80047bc:	6153      	str	r3, [r2, #20]
 80047be:	e011      	b.n	80047e4 <Show_LED_For_Zones_Status+0x5c>
	//  OTHERWISE SHOW LED ON / OFF DEPENDS ON ALL ZONES ARE CLOSED OR SOME ONE ZONE IS OPEN
	////////////////////////////////////////////////////////////////////////////////////////////
	else {

//		if  ( g_Zones_Stable_Status == 0 )	{		//		N_55     changed
		if  ( g_Zones_Wire_AND_Wireless == 0 )	{
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <Show_LED_For_Zones_Status+0x80>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <Show_LED_For_Zones_Status+0x5e>


			g_Zones_LED_Indication_Flags = LED_ON ;
 80047ca:	3301      	adds	r3, #1
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <Show_LED_For_Zones_Status+0x78>)
 80047ce:	7013      	strb	r3, [r2, #0]
			SWITCH_Green_Led_ON();
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0049      	lsls	r1, r1, #1
 80047d4:	2290      	movs	r2, #144	; 0x90
 80047d6:	05d2      	lsls	r2, r2, #23
 80047d8:	6191      	str	r1, [r2, #24]
			g_Panel_Ready_To_Arm = MY_ON ;			//		N_15 Added
 80047da:	4a0c      	ldr	r2, [pc, #48]	; (800480c <Show_LED_For_Zones_Status+0x84>)
 80047dc:	7013      	strb	r3, [r2, #0]
		}
		//
		/////////////////////////////////////////////////////////////////////////////////
		//   KEEP THE VARIABLE TO COUNT IN A SAFE VALUE BEFORE START FLASHING THE LED
		/////////////////////////////////////////////////////////////////////////////////
		g_Zones_LED_Flashing_on_Alarm_Counter = LED_FLASHING_ON_ALARM_TIME ;
 80047de:	2202      	movs	r2, #2
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <Show_LED_For_Zones_Status+0x7c>)
 80047e2:	801a      	strh	r2, [r3, #0]
	}
}
 80047e4:	4770      	bx	lr
			g_Zones_LED_Indication_Flags = LED_OFF ;
 80047e6:	2300      	movs	r3, #0
 80047e8:	4a05      	ldr	r2, [pc, #20]	; (8004800 <Show_LED_For_Zones_Status+0x78>)
 80047ea:	7013      	strb	r3, [r2, #0]
			SWITCH_Green_Led_OFF();
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	0049      	lsls	r1, r1, #1
 80047f0:	2290      	movs	r2, #144	; 0x90
 80047f2:	05d2      	lsls	r2, r2, #23
 80047f4:	6291      	str	r1, [r2, #40]	; 0x28
			g_Panel_Ready_To_Arm = MY_OFF ;			//		N_15 Added
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <Show_LED_For_Zones_Status+0x84>)
 80047f8:	7013      	strb	r3, [r2, #0]
 80047fa:	e7f0      	b.n	80047de <Show_LED_For_Zones_Status+0x56>
 80047fc:	2000004c 	.word	0x2000004c
 8004800:	20000084 	.word	0x20000084
 8004804:	2000000c 	.word	0x2000000c
 8004808:	20000088 	.word	0x20000088
 800480c:	20000067 	.word	0x20000067

08004810 <Read_Zones_Instant_Status>:
//
//   READ THE INSTANT ZONES STATUS
//
//////////////////////////////////////////////////////////////////////////////////		N_1		ADDED	BELOW NEW routine implementation
void		Read_Zones_Instant_Status()
{
 8004810:	b510      	push	{r4, lr}
	uint8_t ReadValue;
	/////////////////////////////////////////////////////
	//   READ ALL ZONES STATUS ( INSTANT STATUS )
	/////////////////////////////////////////////////////
//	ReadValue = GPIO_ReadInputDataBit( ZONE_1_2_PORT , PIN_ZONE_1 );
	ReadValue = HAL_GPIO_ReadPin(  ZONES_PORT , PIN_ZONE_1 );
 8004812:	2110      	movs	r1, #16
 8004814:	2090      	movs	r0, #144	; 0x90
 8004816:	05c0      	lsls	r0, r0, #23
 8004818:	f7fc faf8 	bl	8000e0c <HAL_GPIO_ReadPin>
	if ( ReadValue == 0 )	{  g_Zones_Instant_Status &= ~ZONE_1_STATUS_BIT ; }
 800481c:	2800      	cmp	r0, #0
 800481e:	d16c      	bne.n	80048fa <Read_Zones_Instant_Status+0xea>
 8004820:	4a5a      	ldr	r2, [pc, #360]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 8004822:	8813      	ldrh	r3, [r2, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	438b      	bics	r3, r1
 8004828:	8013      	strh	r3, [r2, #0]
	else 					{  g_Zones_Instant_Status |= ZONE_1_STATUS_BIT ; }
	//
//	ReadValue = GPIO_ReadInputDataBit( ZONE_1_2_PORT , PIN_ZONE_2 );
	ReadValue = HAL_GPIO_ReadPin( ZONES_PORT , PIN_ZONE_2 );
 800482a:	2120      	movs	r1, #32
 800482c:	2090      	movs	r0, #144	; 0x90
 800482e:	05c0      	lsls	r0, r0, #23
 8004830:	f7fc faec 	bl	8000e0c <HAL_GPIO_ReadPin>
	if ( ReadValue == 0 )	{  g_Zones_Instant_Status &= ~ZONE_2_STATUS_BIT ; }
 8004834:	2800      	cmp	r0, #0
 8004836:	d166      	bne.n	8004906 <Read_Zones_Instant_Status+0xf6>
 8004838:	4a54      	ldr	r2, [pc, #336]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 800483a:	8813      	ldrh	r3, [r2, #0]
 800483c:	2102      	movs	r1, #2
 800483e:	438b      	bics	r3, r1
 8004840:	8013      	strh	r3, [r2, #0]
	else 					{  g_Zones_Instant_Status |= ZONE_2_STATUS_BIT ; }
	//
//	ReadValue = GPIO_ReadInputDataBit( ZONE_3_4_PORT , PIN_ZONE_3 );
	ReadValue = HAL_GPIO_ReadPin( ZONES_PORT , PIN_ZONE_3 );
 8004842:	2140      	movs	r1, #64	; 0x40
 8004844:	2090      	movs	r0, #144	; 0x90
 8004846:	05c0      	lsls	r0, r0, #23
 8004848:	f7fc fae0 	bl	8000e0c <HAL_GPIO_ReadPin>
	if ( ReadValue == 0 )	{  g_Zones_Instant_Status &= ~ZONE_3_STATUS_BIT ; }
 800484c:	2800      	cmp	r0, #0
 800484e:	d160      	bne.n	8004912 <Read_Zones_Instant_Status+0x102>
 8004850:	4a4e      	ldr	r2, [pc, #312]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 8004852:	8813      	ldrh	r3, [r2, #0]
 8004854:	2104      	movs	r1, #4
 8004856:	438b      	bics	r3, r1
 8004858:	8013      	strh	r3, [r2, #0]
	else 					{  g_Zones_Instant_Status |= ZONE_3_STATUS_BIT ; }
	//
//	ReadValue = GPIO_ReadInputDataBit( ZONE_3_4_PORT , PIN_ZONE_4 );
	ReadValue = HAL_GPIO_ReadPin( ZONES_PORT , PIN_ZONE_4 );
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	2090      	movs	r0, #144	; 0x90
 800485e:	05c0      	lsls	r0, r0, #23
 8004860:	f7fc fad4 	bl	8000e0c <HAL_GPIO_ReadPin>
	if ( ReadValue == 0 )	{  g_Zones_Instant_Status &= ~ZONE_4_STATUS_BIT ; }
 8004864:	2800      	cmp	r0, #0
 8004866:	d15a      	bne.n	800491e <Read_Zones_Instant_Status+0x10e>
 8004868:	4a48      	ldr	r2, [pc, #288]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 800486a:	8813      	ldrh	r3, [r2, #0]
 800486c:	2108      	movs	r1, #8
 800486e:	438b      	bics	r3, r1
 8004870:	8013      	strh	r3, [r2, #0]
	//////////////////////////////////////
	//
	//////////////////
	//   ZONE - 1
	//////////////////
	if ( g_Zones_TYPE_Configuration[ ZONE_1_INDEX ] != ZONE_TYPE_DISABLE  ) {										//		N_19
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <Read_Zones_Instant_Status+0x180>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <Read_Zones_Instant_Status+0x7e>
		if  ( ( g_Zones_Stable_Status & ZONE_1_STATUS_BIT ) == ( g_Zones_Instant_Status & ZONE_1_STATUS_BIT ))		{
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	4053      	eors	r3, r2
 8004884:	07db      	lsls	r3, r3, #31
 8004886:	d450      	bmi.n	800492a <Read_Zones_Instant_Status+0x11a>
			///////////////////////////////
			// NO CHANGE ON THE STATUS BIT
			///////////////////////////////
			g_Zones_Sensivity_Counter[ ZONE_1_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004888:	2207      	movs	r2, #7
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 800488c:	801a      	strh	r2, [r3, #0]
	}
	//
	//////////////////
	//   ZONE - 2
	//////////////////
	if ( g_Zones_TYPE_Configuration[ ZONE_2_INDEX ] != ZONE_TYPE_DISABLE  ) {										//		N_19
 800488e:	4b40      	ldr	r3, [pc, #256]	; (8004990 <Read_Zones_Instant_Status+0x180>)
 8004890:	785b      	ldrb	r3, [r3, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <Read_Zones_Instant_Status+0x9a>
		if  ( ( g_Zones_Stable_Status & ZONE_2_STATUS_BIT ) == ( g_Zones_Instant_Status & ZONE_2_STATUS_BIT ))		{
 8004896:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	4053      	eors	r3, r2
 80048a0:	079b      	lsls	r3, r3, #30
 80048a2:	d451      	bmi.n	8004948 <Read_Zones_Instant_Status+0x138>
			g_Zones_Sensivity_Counter[ ZONE_2_INDEX ] = ZONES_SENSIVITY_TIME ;
 80048a4:	2207      	movs	r2, #7
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 80048a8:	805a      	strh	r2, [r3, #2]
	}
	//
	//////////////////
	//   ZONE - 3
	//////////////////
	if ( g_Zones_TYPE_Configuration[ ZONE_3_INDEX ] != ZONE_TYPE_DISABLE  ) {										//		N_19
 80048aa:	4b39      	ldr	r3, [pc, #228]	; (8004990 <Read_Zones_Instant_Status+0x180>)
 80048ac:	789b      	ldrb	r3, [r3, #2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <Read_Zones_Instant_Status+0xb6>

		if  ( ( g_Zones_Stable_Status & ZONE_3_STATUS_BIT ) == ( g_Zones_Instant_Status & ZONE_3_STATUS_BIT ))		{
 80048b2:	4b38      	ldr	r3, [pc, #224]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	4b35      	ldr	r3, [pc, #212]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	4053      	eors	r3, r2
 80048bc:	075b      	lsls	r3, r3, #29
 80048be:	d452      	bmi.n	8004966 <Read_Zones_Instant_Status+0x156>
			g_Zones_Sensivity_Counter[ ZONE_3_INDEX ] = ZONES_SENSIVITY_TIME ;
 80048c0:	2207      	movs	r2, #7
 80048c2:	4b35      	ldr	r3, [pc, #212]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 80048c4:	809a      	strh	r2, [r3, #4]
	}
	//
	////////////////// `
	//   ZONE - 4
	//////////////////
	if ( g_Zones_TYPE_Configuration[ ZONE_4_INDEX ] != ZONE_TYPE_DISABLE  ) {										//		N_19
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <Read_Zones_Instant_Status+0x180>)
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d05d      	beq.n	800498a <Read_Zones_Instant_Status+0x17a>
		if  ( ( g_Zones_Stable_Status & ZONE_4_STATUS_BIT ) == ( g_Zones_Instant_Status & ZONE_4_STATUS_BIT ))	{
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	4053      	eors	r3, r2
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	d553      	bpl.n	8004984 <Read_Zones_Instant_Status+0x174>
			g_Zones_Sensivity_Counter[ ZONE_4_INDEX ] = ZONES_SENSIVITY_TIME ;
		}
		else {
			g_Zones_Sensivity_Counter[ ZONE_4_INDEX ]-- ;
 80048dc:	4a2e      	ldr	r2, [pc, #184]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 80048de:	88d3      	ldrh	r3, [r2, #6]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	80d3      	strh	r3, [r2, #6]
			if ( g_Zones_Sensivity_Counter[ ZONE_4_INDEX ] == 0 )	{
 80048e6:	88d3      	ldrh	r3, [r2, #6]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d14d      	bne.n	800498a <Read_Zones_Instant_Status+0x17a>

//				g_Zones_Sensivity_Counter[ ZONE_4_INDEX ] = ZONES_SENSIVITY_TIME ;				//			N_54     ADDED  SOS_TEST IF ANY OTHER BETTER LOGIC EXIST

				g_Zones_Stable_Status ^= ZONE_4_STATUS_BIT ;
 80048ee:	4a29      	ldr	r2, [pc, #164]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 80048f0:	8813      	ldrh	r3, [r2, #0]
 80048f2:	2108      	movs	r1, #8
 80048f4:	404b      	eors	r3, r1
 80048f6:	8013      	strh	r3, [r2, #0]
//				Test_The_Current_Zone_For_Trigger_The_Chime( ZONE_4_STATUS_BIT );		//		n_50		added		N_55  REMOVED
			}
		}
	}
}
 80048f8:	e047      	b.n	800498a <Read_Zones_Instant_Status+0x17a>
	else 					{  g_Zones_Instant_Status |= ZONE_1_STATUS_BIT ; }
 80048fa:	4a24      	ldr	r2, [pc, #144]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 80048fc:	8813      	ldrh	r3, [r2, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	430b      	orrs	r3, r1
 8004902:	8013      	strh	r3, [r2, #0]
 8004904:	e791      	b.n	800482a <Read_Zones_Instant_Status+0x1a>
	else 					{  g_Zones_Instant_Status |= ZONE_2_STATUS_BIT ; }
 8004906:	4a21      	ldr	r2, [pc, #132]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 8004908:	8813      	ldrh	r3, [r2, #0]
 800490a:	2102      	movs	r1, #2
 800490c:	430b      	orrs	r3, r1
 800490e:	8013      	strh	r3, [r2, #0]
 8004910:	e797      	b.n	8004842 <Read_Zones_Instant_Status+0x32>
	else 					{  g_Zones_Instant_Status |= ZONE_3_STATUS_BIT ; }
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 8004914:	8813      	ldrh	r3, [r2, #0]
 8004916:	2104      	movs	r1, #4
 8004918:	430b      	orrs	r3, r1
 800491a:	8013      	strh	r3, [r2, #0]
 800491c:	e79d      	b.n	800485a <Read_Zones_Instant_Status+0x4a>
	else 					{  g_Zones_Instant_Status |= ZONE_4_STATUS_BIT ; }
 800491e:	4a1b      	ldr	r2, [pc, #108]	; (800498c <Read_Zones_Instant_Status+0x17c>)
 8004920:	8813      	ldrh	r3, [r2, #0]
 8004922:	2108      	movs	r1, #8
 8004924:	430b      	orrs	r3, r1
 8004926:	8013      	strh	r3, [r2, #0]
 8004928:	e7a3      	b.n	8004872 <Read_Zones_Instant_Status+0x62>
			g_Zones_Sensivity_Counter[ ZONE_1_INDEX ]-- ;
 800492a:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 800492c:	8813      	ldrh	r3, [r2, #0]
 800492e:	3b01      	subs	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
			if ( g_Zones_Sensivity_Counter[ ZONE_1_INDEX ] == 0 )	{
 8004934:	8813      	ldrh	r3, [r2, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1a8      	bne.n	800488e <Read_Zones_Instant_Status+0x7e>
				g_Zones_Stable_Status ^= ZONE_1_STATUS_BIT ;
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 800493e:	8813      	ldrh	r3, [r2, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	404b      	eors	r3, r1
 8004944:	8013      	strh	r3, [r2, #0]
 8004946:	e7a2      	b.n	800488e <Read_Zones_Instant_Status+0x7e>
			g_Zones_Sensivity_Counter[ ZONE_2_INDEX ]-- ;
 8004948:	4a13      	ldr	r2, [pc, #76]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 800494a:	8853      	ldrh	r3, [r2, #2]
 800494c:	3b01      	subs	r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	8053      	strh	r3, [r2, #2]
			if ( g_Zones_Sensivity_Counter[ ZONE_2_INDEX ] == 0 )	{
 8004952:	8853      	ldrh	r3, [r2, #2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1a7      	bne.n	80048aa <Read_Zones_Instant_Status+0x9a>
				g_Zones_Stable_Status ^= ZONE_2_STATUS_BIT ;
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 800495c:	8813      	ldrh	r3, [r2, #0]
 800495e:	2102      	movs	r1, #2
 8004960:	404b      	eors	r3, r1
 8004962:	8013      	strh	r3, [r2, #0]
 8004964:	e7a1      	b.n	80048aa <Read_Zones_Instant_Status+0x9a>
			g_Zones_Sensivity_Counter[ ZONE_3_INDEX ]-- ;
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 8004968:	8893      	ldrh	r3, [r2, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	8093      	strh	r3, [r2, #4]
			if ( g_Zones_Sensivity_Counter[ ZONE_3_INDEX ] == 0 )	{
 8004970:	8893      	ldrh	r3, [r2, #4]
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1a6      	bne.n	80048c6 <Read_Zones_Instant_Status+0xb6>
				g_Zones_Stable_Status ^= ZONE_3_STATUS_BIT ;
 8004978:	4a06      	ldr	r2, [pc, #24]	; (8004994 <Read_Zones_Instant_Status+0x184>)
 800497a:	8813      	ldrh	r3, [r2, #0]
 800497c:	2104      	movs	r1, #4
 800497e:	404b      	eors	r3, r1
 8004980:	8013      	strh	r3, [r2, #0]
 8004982:	e7a0      	b.n	80048c6 <Read_Zones_Instant_Status+0xb6>
			g_Zones_Sensivity_Counter[ ZONE_4_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004984:	2207      	movs	r2, #7
 8004986:	4b04      	ldr	r3, [pc, #16]	; (8004998 <Read_Zones_Instant_Status+0x188>)
 8004988:	80da      	strh	r2, [r3, #6]
}
 800498a:	bd10      	pop	{r4, pc}
 800498c:	20000082 	.word	0x20000082
 8004990:	200002c0 	.word	0x200002c0
 8004994:	20000086 	.word	0x20000086
 8004998:	20000398 	.word	0x20000398

0800499c <Read_ALL_Zones_Status_and_SET_The_Corresponding_LED>:
{
 800499c:	b510      	push	{r4, lr}
	if ( g_Tasks_Times[ TASK_INDEX_TO_READ_INSTANT_ZONES_STATUS ] == 0 ) {
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <Read_ALL_Zones_Status_and_SET_The_Corresponding_LED+0x24>)
 80049a0:	899b      	ldrh	r3, [r3, #12]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d000      	beq.n	80049aa <Read_ALL_Zones_Status_and_SET_The_Corresponding_LED+0xe>
}
 80049a8:	bd10      	pop	{r4, pc}
		g_Tasks_Times[ TASK_INDEX_TO_READ_INSTANT_ZONES_STATUS ] = INTERVAL_TIME_TO_READ_INSTANT_ZONES_STATUS ;
 80049aa:	2228      	movs	r2, #40	; 0x28
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <Read_ALL_Zones_Status_and_SET_The_Corresponding_LED+0x24>)
 80049ae:	819a      	strh	r2, [r3, #12]
		Read_Zones_Instant_Status();
 80049b0:	f7ff ff2e 	bl	8004810 <Read_Zones_Instant_Status>
		Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones();													//		N_54
 80049b4:	f7ff fb0e 	bl	8003fd4 <Read_Wireless_Zones_AND_Make_ONE_with_WIRE_Zones>
		Show_LED_For_Zones_Status();
 80049b8:	f7ff fee6 	bl	8004788 <Show_LED_For_Zones_Status>
}
 80049bc:	e7f4      	b.n	80049a8 <Read_ALL_Zones_Status_and_SET_The_Corresponding_LED+0xc>
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	20000128 	.word	0x20000128

080049c4 <Check_System_EVENTS_and_make_the_FLOW>:
{
 80049c4:	b510      	push	{r4, lr}
	Read_SWITCH_ON_OFF_Status();
 80049c6:	f7ff fb79 	bl	80040bc <Read_SWITCH_ON_OFF_Status>
	Read_Wireless_RX_Data_if_Exist();
 80049ca:	f7ff f993 	bl	8003cf4 <Read_Wireless_RX_Data_if_Exist>
	Show_Switch_LED_and_SETUP_ALARM_Status();
 80049ce:	f7fe fdcf 	bl	8003570 <Show_Switch_LED_and_SETUP_ALARM_Status>
	Test_User_Change_on_ARMING_Status();
 80049d2:	f7ff fe7f 	bl	80046d4 <Test_User_Change_on_ARMING_Status>
	Read_ALL_Zones_Status_and_SET_The_Corresponding_LED();
 80049d6:	f7ff ffe1 	bl	800499c <Read_ALL_Zones_Status_and_SET_The_Corresponding_LED>
	TEST_For_Any_Chime_in_Zones();
 80049da:	f7ff f963 	bl	8003ca4 <TEST_For_Any_Chime_in_Zones>
	TEST_ALL_Zones_For_ALARM_Events();
 80049de:	f7ff f8bb 	bl	8003b58 <TEST_ALL_Zones_For_ALARM_Events>
	Test_The_Time_Depending_Events();
 80049e2:	f7fe fe39 	bl	8003658 <Test_The_Time_Depending_Events>
	Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM();
 80049e6:	f7fe fd8f 	bl	8003508 <Test_FOR_AUTO_Change_From_STAY_to_INSTANT_ARM>
}
 80049ea:	bd10      	pop	{r4, pc}

080049ec <SystemClock_Config>:
//
//		 	CUBE MX --> System Clock Configuration
//
//////////////////////////////////////////////////////////////////////////////////
void SystemClock_Config(void)
{
 80049ec:	b500      	push	{lr}
 80049ee:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80049f0:	2312      	movs	r3, #18
 80049f2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049f4:	3b11      	subs	r3, #17
 80049f6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80049f8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80049fa:	330f      	adds	r3, #15
 80049fc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80049fe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a00:	3b0e      	subs	r3, #14
 8004a02:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a04:	2300      	movs	r3, #0
 8004a06:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004a08:	22a0      	movs	r2, #160	; 0xa0
 8004a0a:	0392      	lsls	r2, r2, #14
 8004a0c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004a0e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a10:	a808      	add	r0, sp, #32
 8004a12:	f7fd f883 	bl	8001b1c <HAL_RCC_OscConfig>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d128      	bne.n	8004a6c <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a1a:	2307      	movs	r3, #7
 8004a1c:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a1e:	3b05      	subs	r3, #5
 8004a20:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a22:	2300      	movs	r3, #0
 8004a24:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a26:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	a804      	add	r0, sp, #16
 8004a2c:	f7fd faf0 	bl	8002010 <HAL_RCC_ClockConfig>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d11c      	bne.n	8004a6e <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a34:	2301      	movs	r3, #1
 8004a36:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a3c:	4668      	mov	r0, sp
 8004a3e:	f7fd fbb3 	bl	80021a8 <HAL_RCCEx_PeriphCLKConfig>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d114      	bne.n	8004a70 <SystemClock_Config+0x84>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004a46:	f7fd fb99 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8004a4a:	21fa      	movs	r1, #250	; 0xfa
 8004a4c:	0089      	lsls	r1, r1, #2
 8004a4e:	f7fb fb5b 	bl	8000108 <__udivsi3>
 8004a52:	f7fb fe89 	bl	8000768 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004a56:	2004      	movs	r0, #4
 8004a58:	f7fb fea2 	bl	80007a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);}
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2001      	movs	r0, #1
 8004a62:	4240      	negs	r0, r0
 8004a64:	f7fb fe42 	bl	80006ec <HAL_NVIC_SetPriority>
 8004a68:	b015      	add	sp, #84	; 0x54
 8004a6a:	bd00      	pop	{pc}
 8004a6c:	e7fe      	b.n	8004a6c <SystemClock_Config+0x80>
 8004a6e:	e7fe      	b.n	8004a6e <SystemClock_Config+0x82>
 8004a70:	e7fe      	b.n	8004a70 <SystemClock_Config+0x84>
	...

08004a74 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: transfer complete */
	g_RX_Uart_Ready = MY_TRUE ;
 8004a74:	2201      	movs	r2, #1
 8004a76:	4b01      	ldr	r3, [pc, #4]	; (8004a7c <HAL_UART_RxCpltCallback+0x8>)
 8004a78:	701a      	strb	r2, [r3, #0]
}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000069 	.word	0x20000069

08004a80 <HAL_UART_ErrorCallback>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	g_UART_Error_Flag = MY_TRUE ;
 8004a80:	2201      	movs	r2, #1
 8004a82:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_UART_ErrorCallback+0x10>)
 8004a84:	701a      	strb	r2, [r3, #0]
	g_Tasks_Times[TASK_INDEX_UART_PROTECT_FOR_ERRORS ] = TASK_INTERVAL_TIME_UART_PROTECT_FOR_ERRORS ;
 8004a86:	3209      	adds	r2, #9
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <HAL_UART_ErrorCallback+0x14>)
 8004a8a:	835a      	strh	r2, [r3, #26]
}
 8004a8c:	4770      	bx	lr
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	2000007a 	.word	0x2000007a
 8004a94:	20000128 	.word	0x20000128

08004a98 <HAL_I2C_MasterTxCpltCallback>:
//	  			I2C_MASTER_TX   INTERRUPT
//
/////////////////////////////////////////////////////////////////
void 	HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
	asm("nop");
 8004a98:	46c0      	nop			; (mov r8, r8)
	g_I2C_Master_TX_Complete	= MY_TRUE ;
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4b01      	ldr	r3, [pc, #4]	; (8004aa4 <HAL_I2C_MasterTxCpltCallback+0xc>)
 8004a9e:	701a      	strb	r2, [r3, #0]
	asm("nop");
 8004aa0:	46c0      	nop			; (mov r8, r8)
}
 8004aa2:	4770      	bx	lr
 8004aa4:	20000063 	.word	0x20000063

08004aa8 <HAL_I2C_MasterRxCpltCallback>:
//	  			I2C_MASTER_RX   INTERRUPT
//
/////////////////////////////////////////////////////////////////
void 	HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
	asm("nop");
 8004aa8:	46c0      	nop			; (mov r8, r8)
	g_I2C_Master_RX_Complete	= MY_TRUE ;
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4b01      	ldr	r3, [pc, #4]	; (8004ab4 <HAL_I2C_MasterRxCpltCallback+0xc>)
 8004aae:	701a      	strb	r2, [r3, #0]
	asm("nop");
 8004ab0:	46c0      	nop			; (mov r8, r8)
}
 8004ab2:	4770      	bx	lr
 8004ab4:	20000062 	.word	0x20000062

08004ab8 <HAL_I2C_ErrorCallback>:
//
//	  			I2C_ERROR   INTERRUPT
//
/////////////////////////////////////////////////////////////////
void 		HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8004ab8:	b510      	push	{r4, lr}
	uint32_t   Error_Value ;

	asm("nop");
 8004aba:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 8004abc:	46c0      	nop			; (mov r8, r8)

	Error_Value = HAL_I2C_GetError( &hi2c1 );
 8004abe:	4804      	ldr	r0, [pc, #16]	; (8004ad0 <HAL_I2C_ErrorCallback+0x18>)
 8004ac0:	f7fc ffd3 	bl	8001a6a <HAL_I2C_GetError>

	Error_Value++ ;

	if  ( Error_Value  == 7 ) {
 8004ac4:	2806      	cmp	r0, #6
 8004ac6:	d001      	beq.n	8004acc <HAL_I2C_ErrorCallback+0x14>
		Error_Value++ ;
		asm("nop");
	}

	asm("nop");
 8004ac8:	46c0      	nop			; (mov r8, r8)
// 	__HAL_I2C_CLEAR_FLAG ;
}
 8004aca:	bd10      	pop	{r4, pc}
		asm("nop");
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	e7fb      	b.n	8004ac8 <HAL_I2C_ErrorCallback+0x10>
 8004ad0:	2000014c 	.word	0x2000014c

08004ad4 <_Error_Handler>:
//
//		 	CUBE MX --> ERROR - ASSERT - REST ETC CODE
//
//////////////////////////////////////////////////////////////////////////////////
void _Error_Handler(char * file, int line)
{
 8004ad4:	e7fe      	b.n	8004ad4 <_Error_Handler>
	...

08004ad8 <Initialize_Variables>:
//
//////////////////////////////////////////////////////////////////////////////////
//					INITIALIZE THE PROGRAM VARIABLES
//////////////////////////////////////////////////////////////////////////////////
void		Initialize_Variables( void )
{
 8004ad8:	b510      	push	{r4, lr}
	/////////////////////////////////////////////////////////
	//
	//  START UP TRIGGER TO COUNTING THE TASKS TIMES
	//
	/////////////////////////////////////////////////////////
	g_Tasks_Times[ TASK_INDEX_COUNT_SECONDS_AND_BIG_TIMES ] 	= TASK_INTERVAL_TIME_FOR_COUNTING_SECONDS ;
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <Initialize_Variables+0x4c>)
 8004adc:	22fa      	movs	r2, #250	; 0xfa
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	801a      	strh	r2, [r3, #0]
//	g_Tasks_Times[ TASK_INDEX_FOR_DEBUG_1 ] 					= TASK_INTERVAL_TIME_FOR_DEBUG_1 ;
	g_Tasks_Times[ TASK_READ_WIRELESS_RCEIEVED_DATA ] 			= INTERVAL_TIME_TO_READ_WIRELESS_DATA ;
 8004ae2:	220a      	movs	r2, #10
 8004ae4:	831a      	strh	r2, [r3, #24]
	g_Tasks_Times[TASK_INDEX_UART_PROTECT_FOR_ERRORS ] 			= 0 ;   // SET as STOP
 8004ae6:	2400      	movs	r4, #0
 8004ae8:	835c      	strh	r4, [r3, #26]
	//
	//   ONLY FOR DEBUG BELOW
	//   TRIGGER THE BIG TIME TO COUNT THE MINUTES
	//
	/////////////////////////////////////////////////////////
	g_Big_Times_And_Seconds[ BIG_TIMES_AND_SECONDS_DEBUG_TIME_1 ] = BIG_TIMES_INTERVAL_TIME_TO_COUNT_DEBUG_TIME_1 ;
 8004aea:	3233      	adds	r2, #51	; 0x33
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <Initialize_Variables+0x50>)
 8004aee:	611a      	str	r2, [r3, #16]

	// uint8_t  i ;
	////////////////////////////////////////////////////////////////
	//    SETUP THE INITIAL VALUES FOR THE ZONES SENSIVITY TIME
	////////////////////////////////////////////////////////////////
	g_Zones_Sensivity_Counter[ ZONE_1_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <Initialize_Variables+0x54>)
 8004af2:	3a36      	subs	r2, #54	; 0x36
 8004af4:	801a      	strh	r2, [r3, #0]
	g_Zones_Sensivity_Counter[ ZONE_2_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004af6:	805a      	strh	r2, [r3, #2]
	g_Zones_Sensivity_Counter[ ZONE_3_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004af8:	809a      	strh	r2, [r3, #4]
	g_Zones_Sensivity_Counter[ ZONE_4_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004afa:	80da      	strh	r2, [r3, #6]
	g_Zones_Sensivity_Counter[ ZONE_5_INDEX ] = ZONES_SENSIVITY_TIME ;
 8004afc:	811a      	strh	r2, [r3, #8]
	//
	////////////////////////////////////////////////////////////////
	//   SETUP THE INITIAL ZONES TYPE CONFIGURATION
	////////////////////////////////////////////////////////////////
	g_Zones_TYPE_Configuration[ ZONE_1_INDEX ] = ZONE_TYPE_DELAY ;
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <Initialize_Variables+0x58>)
 8004b00:	3a06      	subs	r2, #6
 8004b02:	701a      	strb	r2, [r3, #0]
	g_Zones_TYPE_Configuration[ ZONE_2_INDEX ] = ZONE_TYPE_FOLLOW ;
 8004b04:	3201      	adds	r2, #1
 8004b06:	705a      	strb	r2, [r3, #1]
	g_Zones_TYPE_Configuration[ ZONE_3_INDEX ] = ZONE_TYPE_IMMIDIATE ;
 8004b08:	3201      	adds	r2, #1
 8004b0a:	709a      	strb	r2, [r3, #2]
	g_Zones_TYPE_Configuration[ ZONE_4_INDEX ] = ZONE_TYPE_IMMIDIATE ;
 8004b0c:	70da      	strb	r2, [r3, #3]
	g_Zones_TYPE_Configuration[ ZONE_5_INDEX ] = ZONE_TYPE_DISABLE ;
 8004b0e:	2200      	movs	r2, #0
 8004b10:	711a      	strb	r2, [r3, #4]
	*/
	//
	////////////////////////////////////////////////////////////////
	//  RESET THE FALSE ALARM COUNTER FOR ALL ZONES
	////////////////////////////////////////////////////////////////
	Reset_False_ALARM_Counter();
 8004b12:	f7ff fbd7 	bl	80042c4 <Reset_False_ALARM_Counter>
	//
	////////////////////////////////////////////////////////////////
	//  RESET THE ON - OFF TIMES FOR THE BUZZER
	////////////////////////////////////////////////////////////////
	g_Buzzer_ON_OFF_Times[ INDEX_BUZZER_OFF ] = 0 ;
 8004b16:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <Initialize_Variables+0x5c>)
 8004b18:	801c      	strh	r4, [r3, #0]
	g_Buzzer_ON_OFF_Times[ INDEX_BUZZER_ON ] = 0 ;
 8004b1a:	805c      	strh	r4, [r3, #2]
	////////////////////////////////////////////////////////////////
	//
	//  SET THE BUS I2C EXISTING DEVICES LIST
	//
	////////////////////////////////////////////////////////////////
	INITIALIZE_BUS_I2C_Existing_Slave_Devices_List();
 8004b1c:	f7fe f8bc 	bl	8002c98 <INITIALIZE_BUS_I2C_Existing_Slave_Devices_List>
}
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	20000128 	.word	0x20000128
 8004b28:	2000010c 	.word	0x2000010c
 8004b2c:	20000398 	.word	0x20000398
 8004b30:	200002c0 	.word	0x200002c0
 8004b34:	200001a0 	.word	0x200001a0

08004b38 <Update_TASK_Times>:
//
//  	COUNTING  THE  TASKS  TIMES
//
////////////////////////////////////////////////////////
void		Update_TASK_Times()
{
 8004b38:	b510      	push	{r4, lr}
	//////////////////////////////////////////////
	//
	//  EVERY 1 millisecond
	//
	//////////////////////////////////////////////
	if ( g_Update_SysTick == MY_TRUE ) {
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <Update_TASK_Times+0x38>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d000      	beq.n	8004b44 <Update_TASK_Times+0xc>
			if ( g_Tasks_Times[ i ] > 0 ) {
				g_Tasks_Times[ i ]-- ;
			}
		}
	}
}
 8004b42:	bd10      	pop	{r4, pc}
		g_Update_SysTick = MY_FALSE ;
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <Update_TASK_Times+0x38>)
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	2300      	movs	r3, #0
			if ( g_Tasks_Times[ i ] > 0 ) {
 8004b4c:	4809      	ldr	r0, [pc, #36]	; (8004b74 <Update_TASK_Times+0x3c>)
				g_Tasks_Times[ i ]-- ;
 8004b4e:	0004      	movs	r4, r0
 8004b50:	e002      	b.n	8004b58 <Update_TASK_Times+0x20>
 8004b52:	3301      	adds	r3, #1
		for  ( i = 0 ; i < MAX_TASKS ; i++ ) {
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d0f4      	beq.n	8004b42 <Update_TASK_Times+0xa>
			if ( g_Tasks_Times[ i ] > 0 ) {
 8004b58:	005a      	lsls	r2, r3, #1
 8004b5a:	5a12      	ldrh	r2, [r2, r0]
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d0f7      	beq.n	8004b52 <Update_TASK_Times+0x1a>
				g_Tasks_Times[ i ]-- ;
 8004b62:	0059      	lsls	r1, r3, #1
 8004b64:	5b0a      	ldrh	r2, [r1, r4]
 8004b66:	3a01      	subs	r2, #1
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	530a      	strh	r2, [r1, r4]
 8004b6c:	e7f1      	b.n	8004b52 <Update_TASK_Times+0x1a>
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	2000007b 	.word	0x2000007b
 8004b74:	20000128 	.word	0x20000128

08004b78 <USART_READ_AND_RESET_Status_Flags>:
//
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////
void		USART_READ_AND_RESET_Status_Flags()
{
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	b088      	sub	sp, #32
	__IO uint32_t    Usart_Status_Flags ;
	uint8_t			Dummy_Buffer[ 20 ];
	///////////////////////////////////////////////////////////
	//   READ ALL OF THE USART STATUS FLAGS
	///////////////////////////////////////////////////////////
	Usart_Status_Flags 	= USART1->ISR ;
 8004b7c:	4b2e      	ldr	r3, [pc, #184]	; (8004c38 <USART_READ_AND_RESET_Status_Flags+0xc0>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	9306      	str	r3, [sp, #24]
	Usart_Status_Flags++ ;
 8004b82:	9b06      	ldr	r3, [sp, #24]
 8004b84:	3301      	adds	r3, #1
 8004b86:	9306      	str	r3, [sp, #24]
//	Usart_Status_Flags 	= HAL_Get
	// __HAL_UART_GET_FLAG( &huart1 , UART_F2 )
//			__HAL_UART_

	asm("nop");
 8004b88:	46c0      	nop			; (mov r8, r8)
	//
	///////////////////////////////////////////////////////////
	//    TEST THE USART --> RXNE  FLAG  ( Received Data )
	///////////////////////////////////////////////////////////
	if ( __HAL_UART_GET_FLAG(  &huart1 , UART_FLAG_RXNE ) == SET ) {
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <USART_READ_AND_RESET_Status_Flags+0xc4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	0692      	lsls	r2, r2, #26
 8004b92:	d500      	bpl.n	8004b96 <USART_READ_AND_RESET_Status_Flags+0x1e>
		asm("nop");
 8004b94:	46c0      	nop			; (mov r8, r8)
	}
	//
	asm("nop");
 8004b96:	46c0      	nop			; (mov r8, r8)
	// USART_ClearFlag( USART1 , USART_FLAG_RXNE );
	 __HAL_UART_CLEAR_FLAG(  &huart1 , UART_FLAG_RXNE );
 8004b98:	2220      	movs	r2, #32
 8004b9a:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004b9c:	46c0      	nop			; (mov r8, r8)
	//
	///////////////////////////////////////////////////////////
	//    TEST THE USART --> FE  FLAG  ( Frame ERROR )
	///////////////////////////////////////////////////////////
//	if ( USART_GetFlagStatus( USART1 , USART_FLAG_FE ) == SET ) {
	if ( __HAL_UART_GET_FLAG(  &huart1  , UART_FLAG_FE ) == SET ) {
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	0792      	lsls	r2, r2, #30
 8004ba2:	d500      	bpl.n	8004ba6 <USART_READ_AND_RESET_Status_Flags+0x2e>
		/////////////////////////////////////////////////////////////////////
		//  ADD ONLY THE EVENT IN THE MEMORY AND CONTINUE THE PROGRAM
		/////////////////////////////////////////////////////////////////////
//		ADD_Event_In_The_Log_File( LOG_FILE_SYSTEM_EVENTS_INDEX	 , LOG_FILE_ID_USART_FE_ERROR );
		asm("nop");
 8004ba4:	46c0      	nop			; (mov r8, r8)
	}
	asm("nop");
 8004ba6:	46c0      	nop			; (mov r8, r8)
//	USART_ClearFlag( USART1 , USART_FLAG_FE );
	__HAL_UART_CLEAR_FLAG(  &huart1 , UART_FLAG_FE );
 8004ba8:	2202      	movs	r2, #2
 8004baa:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bac:	46c0      	nop			; (mov r8, r8)
	//
	///////////////////////////////////////////////////////////
	//    TEST THE USART --> FE  FLAG  ( PARITY ERROR )
	///////////////////////////////////////////////////////////
	if ( __HAL_UART_GET_FLAG( &huart1  , UART_FLAG_PE ) == SET ) {
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	07d2      	lsls	r2, r2, #31
 8004bb2:	d500      	bpl.n	8004bb6 <USART_READ_AND_RESET_Status_Flags+0x3e>
		/////////////////////////////////////////////////////////////////////
		//  ADD ONLY THE EVENT IN THE MEMORY AND CONTINUE THE PROGRAM
		/////////////////////////////////////////////////////////////////////
//		ADD_Event_In_The_Log_File( LOG_FILE_SYSTEM_EVENTS_INDEX	 , LOG_FILE_ID_USART_PE_ERROR );
		asm("nop");
 8004bb4:	46c0      	nop			; (mov r8, r8)
	}
	asm("nop");
 8004bb6:	46c0      	nop			; (mov r8, r8)
//	USART_ClearFlag( USART1 , USART_FLAG_PE );
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_PE );
 8004bb8:	2201      	movs	r2, #1
 8004bba:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bbc:	46c0      	nop			; (mov r8, r8)
	//
	///////////////////////////////////////////////////////////
	//    TEST THE USART --> FE  FLAG  ( NOISE ERROR )
	///////////////////////////////////////////////////////////
//	if ( USART_GetFlagStatus( USART1 , USART_FLAG_NE ) == SET ) {
	if (  __HAL_UART_GET_FLAG(  &huart1 , UART_FLAG_NE ) == SET ) {
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	0752      	lsls	r2, r2, #29
 8004bc2:	d500      	bpl.n	8004bc6 <USART_READ_AND_RESET_Status_Flags+0x4e>
		/////////////////////////////////////////////////////////////////////
		//  ADD ONLY THE EVENT IN THE MEMORY AND CONTINUE THE PROGRAM
		/////////////////////////////////////////////////////////////////////
//		ADD_Event_In_The_Log_File( LOG_FILE_SYSTEM_EVENTS_INDEX	 , LOG_FILE_ID_USART_NE_ERROR );
		asm("nop");
 8004bc4:	46c0      	nop			; (mov r8, r8)
	}
	asm("nop");
 8004bc6:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_NE );
 8004bc8:	2204      	movs	r2, #4
 8004bca:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bcc:	46c0      	nop			; (mov r8, r8)
	//
	///////////////////////////////////////////////////////////
	//    TEST THE USART --> ORE  FLAG  ( Overrun ERROR )
	///////////////////////////////////////////////////////////
//	if ( USART_GetFlagStatus( USART1 , USART_FLAG_ORE ) == SET ) {
	if ( __HAL_UART_GET_FLAG(  &huart1 , UART_FLAG_ORE ) == SET ) {
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	0712      	lsls	r2, r2, #28
 8004bd2:	d500      	bpl.n	8004bd6 <USART_READ_AND_RESET_Status_Flags+0x5e>
		/////////////////////////////////////////////////////////////////////
		//  ADD ONLY THE EVENT IN THE MEMORY AND CONTINUE THE PROGRAM
		/////////////////////////////////////////////////////////////////////
//		ADD_Event_In_The_Log_File( LOG_FILE_SYSTEM_EVENTS_INDEX	 , LOG_FILE_ID_USART_OVERRUN_ERROR );
		asm("nop");
 8004bd4:	46c0      	nop			; (mov r8, r8)
	}
	asm("nop");
 8004bd6:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_ORE );
 8004bd8:	2208      	movs	r2, #8
 8004bda:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bdc:	46c0      	nop			; (mov r8, r8)
	//
	/////////////////////////////////////////////////////////////
	//  CLEAR THE REST OF THE FLAGS
	/////////////////////////////////////////////////////////////
	asm("nop");
 8004bde:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_TC );;
 8004be0:	3238      	adds	r2, #56	; 0x38
 8004be2:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004be4:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_TC );
 8004be6:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004be8:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_IDLE );
 8004bea:	3a30      	subs	r2, #48	; 0x30
 8004bec:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bee:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_CMF );
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	0292      	lsls	r2, r2, #10
 8004bf4:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bf6:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_RTOF );
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	621a      	str	r2, [r3, #32]
	asm("nop");
 8004bfe:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 8004c00:	46c0      	nop			; (mov r8, r8)
	__HAL_UART_CLEAR_FLAG( &huart1 , UART_FLAG_RWU );
 8004c02:	2280      	movs	r2, #128	; 0x80
 8004c04:	0312      	lsls	r2, r2, #12
 8004c06:	621a      	str	r2, [r3, #32]
	//
	/////////////////////////////////////////////////////////////
	//  then read data register ...
	/////////////////////////////////////////////////////////////
	RX_Dummy_Data 	=  USART1->RDR ;
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <USART_READ_AND_RESET_Status_Flags+0xc0>)
 8004c0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	241e      	movs	r4, #30
 8004c10:	446c      	add	r4, sp
 8004c12:	8023      	strh	r3, [r4, #0]
	asm("nop");
 8004c14:	46c0      	nop			; (mov r8, r8)
//	RX_Dummy_Data 	=  USART_ReceiveData( USART1 );
	RX_Dummy_Data 	= HAL_UART_Receive( &huart1 , Dummy_Buffer , 2 , 10 );
 8004c16:	230a      	movs	r3, #10
 8004c18:	2202      	movs	r2, #2
 8004c1a:	a901      	add	r1, sp, #4
 8004c1c:	4807      	ldr	r0, [pc, #28]	; (8004c3c <USART_READ_AND_RESET_Status_Flags+0xc4>)
 8004c1e:	f7fd fe93 	bl	8002948 <HAL_UART_Receive>
 8004c22:	b280      	uxth	r0, r0
 8004c24:	8020      	strh	r0, [r4, #0]
	asm("nop");
 8004c26:	46c0      	nop			; (mov r8, r8)
	RX_Dummy_Data++ ;
 8004c28:	8823      	ldrh	r3, [r4, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8023      	strh	r3, [r4, #0]
	asm("nop");
 8004c30:	46c0      	nop			; (mov r8, r8)
	//
}
 8004c32:	b008      	add	sp, #32
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	2000021c 	.word	0x2000021c

08004c40 <TASK_Protect_UART>:
//
//
//
//////////////////////////////////////////////////////////////////////////////////
void		TASK_Protect_UART()
{
 8004c40:	b510      	push	{r4, lr}
	//////////////////////////////////
	//   RESET THE FLAGS
	//////////////////////////////////
	if ( ( g_Tasks_Times[ TASK_INDEX_UART_PROTECT_FOR_ERRORS ] == 0 ) && ( g_UART_Error_Flag == MY_TRUE )  )  {
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <TASK_Protect_UART+0x34>)
 8004c44:	8b5b      	ldrh	r3, [r3, #26]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <TASK_Protect_UART+0x14>
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <TASK_Protect_UART+0x38>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d000      	beq.n	8004c56 <TASK_Protect_UART+0x16>
		if  ( HAL_UART_Receive_IT(  &huart1 , &g_RxBuffer_8bit[ 0 ] , 1 ) !=   HAL_OK) {
		  asm("nop");
		}
	}

}
 8004c54:	bd10      	pop	{r4, pc}
		g_UART_Error_Flag = MY_FALSE ;
 8004c56:	2200      	movs	r2, #0
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <TASK_Protect_UART+0x38>)
 8004c5a:	701a      	strb	r2, [r3, #0]
		USART_READ_AND_RESET_Status_Flags();
 8004c5c:	f7ff ff8c 	bl	8004b78 <USART_READ_AND_RESET_Status_Flags>
		if  ( HAL_UART_Receive_IT(  &huart1 , &g_RxBuffer_8bit[ 0 ] , 1 ) !=   HAL_OK) {
 8004c60:	2201      	movs	r2, #1
 8004c62:	4906      	ldr	r1, [pc, #24]	; (8004c7c <TASK_Protect_UART+0x3c>)
 8004c64:	4806      	ldr	r0, [pc, #24]	; (8004c80 <TASK_Protect_UART+0x40>)
 8004c66:	f7fd fb45 	bl	80022f4 <HAL_UART_Receive_IT>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0f2      	beq.n	8004c54 <TASK_Protect_UART+0x14>
		  asm("nop");
 8004c6e:	46c0      	nop			; (mov r8, r8)
}
 8004c70:	e7f0      	b.n	8004c54 <TASK_Protect_UART+0x14>
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	20000128 	.word	0x20000128
 8004c78:	2000007a 	.word	0x2000007a
 8004c7c:	20000358 	.word	0x20000358
 8004c80:	2000021c 	.word	0x2000021c

08004c84 <TASK_Count_Big_Times_AND_Seconds>:
//		MIN =
//		MAX =
//
//////////////////////////////////////////////////////////////////////////////////
void		TASK_Count_Big_Times_AND_Seconds()
{
 8004c84:	b510      	push	{r4, lr}
	uint8_t    i ;
	//////////////////////////////////
	//   RESET THE FLAGS
	//////////////////////////////////
	if ( g_Tasks_Times[ TASK_INDEX_COUNT_SECONDS_AND_BIG_TIMES ] == 0 ) {
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <TASK_Count_Big_Times_AND_Seconds+0x40>)
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <TASK_Count_Big_Times_AND_Seconds+0x3e>
		//////////////////////////////////////////////
		//  RECYCLE THE TIME for the next read
		//////////////////////////////////////////////
		g_Tasks_Times[ TASK_INDEX_COUNT_SECONDS_AND_BIG_TIMES ] = TASK_INTERVAL_TIME_FOR_COUNTING_SECONDS ;
 8004c90:	22fa      	movs	r2, #250	; 0xfa
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <TASK_Count_Big_Times_AND_Seconds+0x40>)
 8004c96:	801a      	strh	r2, [r3, #0]
		//////////////////////////////////////////////
		//
		//  EVERY 1 SECOND
		//
		//////////////////////////////////////////////
		PCB_Green_LED_Toggle();
 8004c98:	4a0b      	ldr	r2, [pc, #44]	; (8004cc8 <TASK_Count_Big_Times_AND_Seconds+0x44>)
 8004c9a:	6953      	ldr	r3, [r2, #20]
 8004c9c:	2140      	movs	r1, #64	; 0x40
 8004c9e:	404b      	eors	r3, r1
 8004ca0:	6153      	str	r3, [r2, #20]
 8004ca2:	2300      	movs	r3, #0
		//////////////////////////////////////////////////
		for  ( i = 0 ; i < MAX_BIG_TIMES ; i++ ) {
			////////////////////////////////////////////////////////////////
			//  UPDATE ONLY THE SETUP TIMES ( MEANS TASK_X[ xx } = 400 )
			////////////////////////////////////////////////////////////////
			if ( g_Big_Times_And_Seconds[ i ] > BIG_TIMES_TRIGGER_VALUE ) {
 8004ca4:	4c09      	ldr	r4, [pc, #36]	; (8004ccc <TASK_Count_Big_Times_AND_Seconds+0x48>)
				g_Big_Times_And_Seconds[ i ]-- ;
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	e002      	b.n	8004cb0 <TASK_Count_Big_Times_AND_Seconds+0x2c>
 8004caa:	3301      	adds	r3, #1
		for  ( i = 0 ; i < MAX_BIG_TIMES ; i++ ) {
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d008      	beq.n	8004cc2 <TASK_Count_Big_Times_AND_Seconds+0x3e>
			if ( g_Big_Times_And_Seconds[ i ] > BIG_TIMES_TRIGGER_VALUE ) {
 8004cb0:	009a      	lsls	r2, r3, #2
 8004cb2:	5912      	ldr	r2, [r2, r4]
 8004cb4:	2a01      	cmp	r2, #1
 8004cb6:	d9f8      	bls.n	8004caa <TASK_Count_Big_Times_AND_Seconds+0x26>
				g_Big_Times_And_Seconds[ i ]-- ;
 8004cb8:	0099      	lsls	r1, r3, #2
 8004cba:	580a      	ldr	r2, [r1, r0]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	500a      	str	r2, [r1, r0]
 8004cc0:	e7f3      	b.n	8004caa <TASK_Count_Big_Times_AND_Seconds+0x26>
			}
		}
	}
}
 8004cc2:	bd10      	pop	{r4, pc}
 8004cc4:	20000128 	.word	0x20000128
 8004cc8:	48000400 	.word	0x48000400
 8004ccc:	2000010c 	.word	0x2000010c

08004cd0 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA>:
//
//
//
//////////////////////////////////////////////////////////////////////////////////								N_60 		ADDED
void		Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA( uint8_t PERIPHERAL_ID , uint8_t RX_Data_Length )
{
 8004cd0:	b510      	push	{r4, lr}

	switch ( PERIPHERAL_ID ) {
 8004cd2:	2801      	cmp	r0, #1
 8004cd4:	d002      	beq.n	8004cdc <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0xc>
 8004cd6:	2807      	cmp	r0, #7
 8004cd8:	d00c      	beq.n	8004cf4 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x24>
			break;

		default:
			break;
	}
}
 8004cda:	bd10      	pop	{r4, pc}
			g_RX_Uart_Ready = RESET;
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x38>)
 8004ce0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT( &huart1 , &g_RxBuffer_8bit[ g_RxCount ] , RX_Data_Length );
 8004ce2:	b28a      	uxth	r2, r1
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x3c>)
 8004ce6:	8819      	ldrh	r1, [r3, #0]
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x40>)
 8004cea:	18c9      	adds	r1, r1, r3
 8004cec:	4809      	ldr	r0, [pc, #36]	; (8004d14 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x44>)
 8004cee:	f7fd fb01 	bl	80022f4 <HAL_UART_Receive_IT>
			break;
 8004cf2:	e7f2      	b.n	8004cda <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0xa>
			if( HAL_I2C_Slave_Receive_IT( &hi2c1, (uint8_t *)g_I2C_RX_Buffer , RX_Data_Length ) != HAL_OK)	{
 8004cf4:	b28a      	uxth	r2, r1
 8004cf6:	4908      	ldr	r1, [pc, #32]	; (8004d18 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x48>)
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x4c>)
 8004cfa:	f7fc f9cf 	bl	800109c <HAL_I2C_Slave_Receive_IT>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0eb      	beq.n	8004cda <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0xa>
				asm("nop");
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	e7fe      	b.n	8004d04 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA+0x34>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	20000069 	.word	0x20000069
 8004d0c:	2000006c 	.word	0x2000006c
 8004d10:	20000358 	.word	0x20000358
 8004d14:	2000021c 	.word	0x2000021c
 8004d18:	20000324 	.word	0x20000324
 8004d1c:	2000014c 	.word	0x2000014c

08004d20 <main>:
{
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	b089      	sub	sp, #36	; 0x24
	HAL_Init();
 8004d24:	f7fb fa8e 	bl	8000244 <HAL_Init>
	SystemClock_Config();
 8004d28:	f7ff fe60 	bl	80049ec <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2c:	4d85      	ldr	r5, [pc, #532]	; (8004f44 <main+0x224>)
 8004d2e:	696a      	ldr	r2, [r5, #20]
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	0289      	lsls	r1, r1, #10
 8004d34:	430a      	orrs	r2, r1
 8004d36:	616a      	str	r2, [r5, #20]
 8004d38:	696b      	ldr	r3, [r5, #20]
 8004d3a:	400b      	ands	r3, r1
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d40:	696a      	ldr	r2, [r5, #20]
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	02c9      	lsls	r1, r1, #11
 8004d46:	430a      	orrs	r2, r1
 8004d48:	616a      	str	r2, [r5, #20]
 8004d4a:	696b      	ldr	r3, [r5, #20]
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	9302      	str	r3, [sp, #8]
 8004d50:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, MCU_PGM_OUT_Pin|MCU_SIREN_OUT_Pin|MCU_GREEN_LED_Pin|MCU_BUZZER_OUT_Pin 
 8004d52:	4c7d      	ldr	r4, [pc, #500]	; (8004f48 <main+0x228>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	0021      	movs	r1, r4
 8004d58:	2090      	movs	r0, #144	; 0x90
 8004d5a:	05c0      	lsls	r0, r0, #23
 8004d5c:	f7fc f85c 	bl	8000e18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_PCB_GREEN_LED_Pin|MCU_PCB_RED_LED_Pin, GPIO_PIN_RESET);
 8004d60:	2200      	movs	r2, #0
 8004d62:	21c0      	movs	r1, #192	; 0xc0
 8004d64:	4879      	ldr	r0, [pc, #484]	; (8004f4c <main+0x22c>)
 8004d66:	f7fc f857 	bl	8000e18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MCU_PGM_OUT_Pin|MCU_SIREN_OUT_Pin|MCU_GREEN_LED_Pin|MCU_BUZZER_OUT_Pin 
 8004d6a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d6c:	2601      	movs	r6, #1
 8004d6e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2400      	movs	r4, #0
 8004d72:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d76:	a903      	add	r1, sp, #12
 8004d78:	2090      	movs	r0, #144	; 0x90
 8004d7a:	05c0      	lsls	r0, r0, #23
 8004d7c:	f7fb ff70 	bl	8000c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_Z1_Pin|MCU_Z2_Pin|MCU_Z3_Pin|MCU_Z4_Pin;
 8004d80:	23f0      	movs	r3, #240	; 0xf0
 8004d82:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d84:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d86:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d88:	a903      	add	r1, sp, #12
 8004d8a:	2090      	movs	r0, #144	; 0x90
 8004d8c:	05c0      	lsls	r0, r0, #23
 8004d8e:	f7fb ff67 	bl	8000c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_REMOTE_Pin;
 8004d92:	2702      	movs	r7, #2
 8004d94:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d96:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d98:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(MCU_REMOTE_GPIO_Port, &GPIO_InitStruct);
 8004d9a:	a903      	add	r1, sp, #12
 8004d9c:	486b      	ldr	r0, [pc, #428]	; (8004f4c <main+0x22c>)
 8004d9e:	f7fb ff5f 	bl	8000c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RX_D0_Pin;
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004da8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004daa:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RX_D0_GPIO_Port, &GPIO_InitStruct);
 8004dac:	a903      	add	r1, sp, #12
 8004dae:	2090      	movs	r0, #144	; 0x90
 8004db0:	05c0      	lsls	r0, r0, #23
 8004db2:	f7fb ff55 	bl	8000c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RX_D1_Pin|RX_D2_Pin|RX_D3_Pin;
 8004db6:	2338      	movs	r3, #56	; 0x38
 8004db8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dba:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004dbc:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dbe:	a903      	add	r1, sp, #12
 8004dc0:	4862      	ldr	r0, [pc, #392]	; (8004f4c <main+0x22c>)
 8004dc2:	f7fb ff4d 	bl	8000c60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_PCB_GREEN_LED_Pin|MCU_PCB_RED_LED_Pin;
 8004dc6:	23c0      	movs	r3, #192	; 0xc0
 8004dc8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dca:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dcc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dce:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd0:	a903      	add	r1, sp, #12
 8004dd2:	485e      	ldr	r0, [pc, #376]	; (8004f4c <main+0x22c>)
 8004dd4:	f7fb ff44 	bl	8000c60 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dd8:	696b      	ldr	r3, [r5, #20]
 8004dda:	4333      	orrs	r3, r6
 8004ddc:	616b      	str	r3, [r5, #20]
 8004dde:	696b      	ldr	r3, [r5, #20]
 8004de0:	4033      	ands	r3, r6
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2100      	movs	r1, #0
 8004dea:	200a      	movs	r0, #10
 8004dec:	f7fb fc7e 	bl	80006ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004df0:	200a      	movs	r0, #10
 8004df2:	f7fb fcaf 	bl	8000754 <HAL_NVIC_EnableIRQ>
  huart1.Instance 							= USART1;
 8004df6:	4856      	ldr	r0, [pc, #344]	; (8004f50 <main+0x230>)
 8004df8:	4b56      	ldr	r3, [pc, #344]	; (8004f54 <main+0x234>)
 8004dfa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate 						= 9600 ;
 8004dfc:	2396      	movs	r3, #150	; 0x96
 8004dfe:	019b      	lsls	r3, r3, #6
 8004e00:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength 					= UART_WORDLENGTH_8B;
 8004e02:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits 						= UART_STOPBITS_1;
 8004e04:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity 						= UART_PARITY_NONE;
 8004e06:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode 							= UART_MODE_TX_RX;
 8004e08:	230c      	movs	r3, #12
 8004e0a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl 					= UART_HWCONTROL_NONE;
 8004e0c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling 					= UART_OVERSAMPLING_16;
 8004e0e:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling 				= UART_ONE_BIT_SAMPLE_DISABLE;
 8004e10:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit 		= UART_ADVFEATURE_NO_INIT;
 8004e12:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e14:	f7fd fcb0 	bl	8002778 <HAL_UART_Init>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d000      	beq.n	8004e1e <main+0xfe>
 8004e1c:	e08b      	b.n	8004f36 <main+0x216>
  hi2c1.Instance 					= I2C1;
 8004e1e:	484e      	ldr	r0, [pc, #312]	; (8004f58 <main+0x238>)
 8004e20:	4b4e      	ldr	r3, [pc, #312]	; (8004f5c <main+0x23c>)
 8004e22:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing 				= 0x2000090E;
 8004e24:	4b4e      	ldr	r3, [pc, #312]	; (8004f60 <main+0x240>)
 8004e26:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 			= I2C_ADDRESS_CURRENT_DEVICE ;
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode 		= I2C_ADDRESSINGMODE_7BIT;
 8004e2c:	3b3f      	subs	r3, #63	; 0x3f
 8004e2e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode 		= I2C_DUALADDRESS_DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 			= 0;
 8004e34:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks 		= I2C_OA2_NOMASK;
 8004e36:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode 		= I2C_GENERALCALL_DISABLE;
 8004e38:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode 			= I2C_NOSTRETCH_DISABLE;
 8004e3a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e3c:	f7fc f880 	bl	8000f40 <HAL_I2C_Init>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d179      	bne.n	8004f38 <main+0x218>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e44:	2100      	movs	r1, #0
 8004e46:	4844      	ldr	r0, [pc, #272]	; (8004f58 <main+0x238>)
 8004e48:	f7fc fe12 	bl	8001a70 <HAL_I2CEx_ConfigAnalogFilter>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d174      	bne.n	8004f3a <main+0x21a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004e50:	2100      	movs	r1, #0
 8004e52:	4841      	ldr	r0, [pc, #260]	; (8004f58 <main+0x238>)
 8004e54:	f7fc fe38 	bl	8001ac8 <HAL_I2CEx_ConfigDigitalFilter>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d16f      	bne.n	8004f3c <main+0x21c>
  hadc.Instance 							= ADC1;
 8004e5c:	4841      	ldr	r0, [pc, #260]	; (8004f64 <main+0x244>)
 8004e5e:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <main+0x248>)
 8004e60:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler 					= ADC_CLOCK_SYNC_PCLK_DIV4 ;     // 1st - A  CHANGE TEST
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution 						= ADC_RESOLUTION_8B ;			 // 1st - B  CHANGE TEST
 8004e68:	2310      	movs	r3, #16
 8004e6a:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign 						= ADC_DATAALIGN_RIGHT;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode 					= ADC_SCAN_DIRECTION_FORWARD;
 8004e70:	2201      	movs	r2, #1
 8004e72:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection 					= ADC_EOC_SINGLE_CONV;
 8004e74:	2104      	movs	r1, #4
 8004e76:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait 				= DISABLE;
 8004e78:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff 			= DISABLE;
 8004e7a:	61c3      	str	r3, [r0, #28]
  hadc.Init.ContinuousConvMode 				= ENABLE;
 8004e7c:	6202      	str	r2, [r0, #32]
  hadc.Init.DiscontinuousConvMode 			= DISABLE;
 8004e7e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConv 				= ADC_SOFTWARE_START;
 8004e80:	21c2      	movs	r1, #194	; 0xc2
 8004e82:	31ff      	adds	r1, #255	; 0xff
 8004e84:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge 			= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e86:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests 			= DISABLE;
 8004e88:	6303      	str	r3, [r0, #48]	; 0x30
  hadc.Init.Overrun 						= ADC_OVR_DATA_PRESERVED;
 8004e8a:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004e8c:	f7fb fa5e 	bl	800034c <HAL_ADC_Init>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d154      	bne.n	8004f3e <main+0x21e>
  sConfig.Channel 					= ADC_CHANNEL_8 ;								// ADC_CHANNEL_5;  OLD
 8004e94:	2308      	movs	r3, #8
 8004e96:	9303      	str	r3, [sp, #12]
  sConfig.Rank 						= ADC_RANK_CHANNEL_NUMBER;
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime 				= ADC_SAMPLETIME_28CYCLES_5;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ea2:	a903      	add	r1, sp, #12
 8004ea4:	482f      	ldr	r0, [pc, #188]	; (8004f64 <main+0x244>)
 8004ea6:	f7fb fb93 	bl	80005d0 <HAL_ADC_ConfigChannel>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d148      	bne.n	8004f40 <main+0x220>
	Initialize_MCU_Peripherals_and_Corresponding_IO_Pins();
 8004eae:	f000 f87f 	bl	8004fb0 <Initialize_MCU_Peripherals_and_Corresponding_IO_Pins>
	Initialize_External_Devices_and_Corresponding_IO_Pins();
 8004eb2:	f000 f87e 	bl	8004fb2 <Initialize_External_Devices_and_Corresponding_IO_Pins>
	Initialize_Variables();
 8004eb6:	f7ff fe0f 	bl	8004ad8 <Initialize_Variables>
	PCB_Green_LED_OFF();					//  N_4  Add
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <main+0x22c>)
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	619a      	str	r2, [r3, #24]
	PCB_Red_LED_OFF();						//   >>   >>
 8004ec0:	3240      	adds	r2, #64	; 0x40
 8004ec2:	619a      	str	r2, [r3, #24]
	SWITCH_Green_Led_OFF();					//   >>    ADDED
 8004ec4:	2490      	movs	r4, #144	; 0x90
 8004ec6:	05e4      	lsls	r4, r4, #23
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	62a3      	str	r3, [r4, #40]	; 0x28
	SWITCH_Red_Led_OFF();					//	 >>      >>
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	015b      	lsls	r3, r3, #5
 8004ed2:	62a3      	str	r3, [r4, #40]	; 0x28
	SIEREN_OFF();
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	62a3      	str	r3, [r4, #40]	; 0x28
	BUZZER_ON();
 8004ed8:	2580      	movs	r5, #128	; 0x80
 8004eda:	012d      	lsls	r5, r5, #4
 8004edc:	61a5      	str	r5, [r4, #24]
	HAL_Delay( 900 );
 8004ede:	20e1      	movs	r0, #225	; 0xe1
 8004ee0:	0080      	lsls	r0, r0, #2
 8004ee2:	f7fb f9cd 	bl	8000280 <HAL_Delay>
	BUZZER_OFF();
 8004ee6:	62a5      	str	r5, [r4, #40]	; 0x28
	LOAD_The_Default_prg_Values_to_be_used_in_the_Flash_Drivers();
 8004ee8:	f7fe f874 	bl	8002fd4 <LOAD_The_Default_prg_Values_to_be_used_in_the_Flash_Drivers>
	Startup_Sequence_for_Load_Programming_Data();
 8004eec:	f000 f90e 	bl	800510c <Startup_Sequence_for_Load_Programming_Data>
	Transfer_Programming_Data_to_Be_Write_or_Read( MY_READ );
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7fe fdbb 	bl	8003a6c <Transfer_Programming_Data_to_Be_Write_or_Read>
	Reset_The_Bypassed_Zones();
 8004ef6:	f7ff f9d7 	bl	80042a8 <Reset_The_Bypassed_Zones>
  	HAL_Delay( 50 );
 8004efa:	2032      	movs	r0, #50	; 0x32
 8004efc:	f7fb f9c0 	bl	8000280 <HAL_Delay>
  	Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA( MY_PERIPHERAL_ID_UART_1 , 1 );
 8004f00:	2101      	movs	r1, #1
 8004f02:	2001      	movs	r0, #1
 8004f04:	f7ff fee4 	bl	8004cd0 <Trigger_PERIPHERAL_TO_Receive_Interrupt_DATA>
  	HAL_Delay( 50 );
 8004f08:	2032      	movs	r0, #50	; 0x32
 8004f0a:	f7fb f9b9 	bl	8000280 <HAL_Delay>
  	g_I2C_MODE_As_Master = MY_TRUE  ;
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <main+0x24c>)
 8004f12:	701a      	strb	r2, [r3, #0]
		Update_TASK_Times();
 8004f14:	f7ff fe10 	bl	8004b38 <Update_TASK_Times>
		TASK_Count_Big_Times_AND_Seconds();
 8004f18:	f7ff feb4 	bl	8004c84 <TASK_Count_Big_Times_AND_Seconds>
		Check_System_EVENTS_and_make_the_FLOW();
 8004f1c:	f7ff fd52 	bl	80049c4 <Check_System_EVENTS_and_make_the_FLOW>
		Retrieve_Decode_and_Execute_UART_Communication_CMDs();
 8004f20:	f7ff fb9e 	bl	8004660 <Retrieve_Decode_and_Execute_UART_Communication_CMDs>
		UPDATE_Mobile_User_For_New_Monitoring_Data();
 8004f24:	f7fe fd1c 	bl	8003960 <UPDATE_Mobile_User_For_New_Monitoring_Data>
		TASK_AUTO_Monitoring_OFF();
 8004f28:	f7fe fecc 	bl	8003cc4 <TASK_AUTO_Monitoring_OFF>
		TASK_BUS_I2C_Commands_Execute();
 8004f2c:	f7fd ff28 	bl	8002d80 <TASK_BUS_I2C_Commands_Execute>
		TASK_Protect_UART();
 8004f30:	f7ff fe86 	bl	8004c40 <TASK_Protect_UART>
 8004f34:	e7ee      	b.n	8004f14 <main+0x1f4>
 8004f36:	e7fe      	b.n	8004f36 <main+0x216>
 8004f38:	e7fe      	b.n	8004f38 <main+0x218>
 8004f3a:	e7fe      	b.n	8004f3a <main+0x21a>
 8004f3c:	e7fe      	b.n	8004f3c <main+0x21c>
 8004f3e:	e7fe      	b.n	8004f3e <main+0x21e>
 8004f40:	e7fe      	b.n	8004f40 <main+0x220>
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40021000 	.word	0x40021000
 8004f48:	00001903 	.word	0x00001903
 8004f4c:	48000400 	.word	0x48000400
 8004f50:	2000021c 	.word	0x2000021c
 8004f54:	40013800 	.word	0x40013800
 8004f58:	2000014c 	.word	0x2000014c
 8004f5c:	40005400 	.word	0x40005400
 8004f60:	2000090e 	.word	0x2000090e
 8004f64:	200003a4 	.word	0x200003a4
 8004f68:	40012400 	.word	0x40012400
 8004f6c:	20000061 	.word	0x20000061

08004f70 <HAL_UART_TxCpltCallback>:
//
//
//
//////////////////////////////////////////////////////////////////////////////////
void 		HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ) {
     if ( huart->Instance == USART1 ) {
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_UART_TxCpltCallback+0x14>)
 8004f72:	6802      	ldr	r2, [r0, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d000      	beq.n	8004f7a <HAL_UART_TxCpltCallback+0xa>
    	 g_DMA_TX_Complete = 1;
     }
}
 8004f78:	4770      	bx	lr
    	 g_DMA_TX_Complete = 1;
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <HAL_UART_TxCpltCallback+0x18>)
 8004f7e:	701a      	strb	r2, [r3, #0]
}
 8004f80:	e7fa      	b.n	8004f78 <HAL_UART_TxCpltCallback+0x8>
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	40013800 	.word	0x40013800
 8004f88:	20000058 	.word	0x20000058

08004f8c <my_mem_copy>:
//
//////////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////////
void		my_mem_copy( uint8_t *Destination_Buffer , uint8_t *Source_Buffer , uint16_t Size )
{
 8004f8c:	b530      	push	{r4, r5, lr}
	uint16_t   i ; // , Current_Digit  ;
	///////////////////////////////////////////////////////////
	//  SCANNING ALL THE DIGITS FROM THE USER CODES TABLE
	///////////////////////////////////////////////////////////
	for ( i = 0 ; i < Size  ; i++  )	{
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d00d      	beq.n	8004fae <my_mem_copy+0x22>
 8004f92:	2300      	movs	r3, #0
		*Destination_Buffer = ( uint8_t )*Source_Buffer  ;
		////////////////////////////////////////////////////////////////
		// AVOID TO PROCEED TO THE NEXT POINTER IN THE END OF SEARCH
		////////////////////////////////////////////////////////////////
		if ( i < Size - 1 ) {
 8004f94:	1e55      	subs	r5, r2, #1
 8004f96:	e003      	b.n	8004fa0 <my_mem_copy+0x14>
 8004f98:	3301      	adds	r3, #1
	for ( i = 0 ; i < Size  ; i++  )	{
 8004f9a:	b29c      	uxth	r4, r3
 8004f9c:	4294      	cmp	r4, r2
 8004f9e:	d206      	bcs.n	8004fae <my_mem_copy+0x22>
		*Destination_Buffer = ( uint8_t )*Source_Buffer  ;
 8004fa0:	780c      	ldrb	r4, [r1, #0]
 8004fa2:	7004      	strb	r4, [r0, #0]
		if ( i < Size - 1 ) {
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	daf7      	bge.n	8004f98 <my_mem_copy+0xc>
			Source_Buffer++ ;   // GO TO THE NEXT CODE DIGIT
 8004fa8:	3101      	adds	r1, #1
			Destination_Buffer++ ;
 8004faa:	3001      	adds	r0, #1
 8004fac:	e7f4      	b.n	8004f98 <my_mem_copy+0xc>
		}
	}
}
 8004fae:	bd30      	pop	{r4, r5, pc}

08004fb0 <Initialize_MCU_Peripherals_and_Corresponding_IO_Pins>:
	//  Enable the DMA Feature
	//////////////////////////////////////
	// Initialize_DMA();
	//
	
}
 8004fb0:	4770      	bx	lr

08004fb2 <Initialize_External_Devices_and_Corresponding_IO_Pins>:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
void				Initialize_External_Devices_and_Corresponding_IO_Pins()
{

}
 8004fb2:	4770      	bx	lr

08004fb4 <Retrieve_The_Current_Programming_Data_Value_to_be_Write>:
{
	uint16_t  Result_Value = 0 ;
	////////////////////////////////////////////////////////////////////////////////////////////////
	//  Retrieve the current programming Data value that is to be write on the FLASH
	////////////////////////////////////////////////////////////////////////////////////////////////
	if   	( Source_Data_From == DATA_SOURCE_VARIABLES )  {
 8004fb4:	2902      	cmp	r1, #2
 8004fb6:	d004      	beq.n	8004fc2 <Retrieve_The_Current_Programming_Data_Value_to_be_Write+0xe>
	uint16_t  Result_Value = 0 ;
 8004fb8:	2300      	movs	r3, #0
		Result_Value = g_Programming_Data_Array[ Programming_Data_Sequence_Index ];
	}
	else if ( Source_Data_From == DATA_SOURCE_DEFAULT )  {
 8004fba:	2901      	cmp	r1, #1
 8004fbc:	d005      	beq.n	8004fca <Retrieve_The_Current_Programming_Data_Value_to_be_Write+0x16>
	//
	///////////////////////////////
	//   RETRUN the Value
	///////////////////////////////
	return   Result_Value ;
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	4770      	bx	lr
		Result_Value = g_Programming_Data_Array[ Programming_Data_Sequence_Index ];
 8004fc2:	0040      	lsls	r0, r0, #1
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <Retrieve_The_Current_Programming_Data_Value_to_be_Write+0x20>)
 8004fc6:	5ac3      	ldrh	r3, [r0, r3]
 8004fc8:	e7f9      	b.n	8004fbe <Retrieve_The_Current_Programming_Data_Value_to_be_Write+0xa>
		Result_Value = g_Default_Programming_Data_Array[ Programming_Data_Sequence_Index ];
 8004fca:	0040      	lsls	r0, r0, #1
 8004fcc:	4b02      	ldr	r3, [pc, #8]	; (8004fd8 <Retrieve_The_Current_Programming_Data_Value_to_be_Write+0x24>)
 8004fce:	5ac3      	ldrh	r3, [r0, r3]
 8004fd0:	e7f5      	b.n	8004fbe <Retrieve_The_Current_Programming_Data_Value_to_be_Write+0xa>
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	20000490 	.word	0x20000490
 8004fd8:	20000474 	.word	0x20000474

08004fdc <Write_Programming_Data_Values_on_Flash_Memory>:
{
 8004fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fde:	46c6      	mov	lr, r8
 8004fe0:	b500      	push	{lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	9001      	str	r0, [sp, #4]
	uint32_t	PageError = 0 ;
 8004fe6:	2400      	movs	r4, #0
 8004fe8:	9403      	str	r4, [sp, #12]
	HAL_FLASH_Unlock();
 8004fea:	f7fb fd0b 	bl	8000a04 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR );
 8004fee:	2234      	movs	r2, #52	; 0x34
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <Write_Programming_Data_Values_on_Flash_Memory+0xe4>)
 8004ff2:	60da      	str	r2, [r3, #12]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004ff4:	4833      	ldr	r0, [pc, #204]	; (80050c4 <Write_Programming_Data_Values_on_Flash_Memory+0xe8>)
 8004ff6:	6004      	str	r4, [r0, #0]
	EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 8004ff8:	4b33      	ldr	r3, [pc, #204]	; (80050c8 <Write_Programming_Data_Values_on_Flash_Memory+0xec>)
 8004ffa:	6043      	str	r3, [r0, #4]
	EraseInitStruct.NbPages     = 1 ;						// (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR)/FLASH_PAGE_SIZE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	6083      	str	r3, [r0, #8]
	if (HAL_FLASHEx_Erase( &EraseInitStruct , &PageError ) != HAL_OK)
 8005000:	a903      	add	r1, sp, #12
 8005002:	f7fb fdd1 	bl	8000ba8 <HAL_FLASHEx_Erase>
 8005006:	2800      	cmp	r0, #0
 8005008:	d000      	beq.n	800500c <Write_Programming_Data_Values_on_Flash_Memory+0x30>
		asm("nop");
 800500a:	46c0      	nop			; (mov r8, r8)
	g_Address 				= FLASH_USER_START_ADDR;
 800500c:	4a2e      	ldr	r2, [pc, #184]	; (80050c8 <Write_Programming_Data_Values_on_Flash_Memory+0xec>)
 800500e:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <Write_Programming_Data_Values_on_Flash_Memory+0xf0>)
 8005010:	601a      	str	r2, [r3, #0]
	g_MemoryProgramStatus 	= PASSED;
 8005012:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <Write_Programming_Data_Values_on_Flash_Memory+0xf4>)
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
	while ( ( g_MemoryProgramStatus == PASSED ) && ( times < VIRGIN_REPEAT_TIMES_ON_FLASH ) )
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d11e      	bne.n	800505c <Write_Programming_Data_Values_on_Flash_Memory+0x80>
 800501e:	2703      	movs	r7, #3
        if ( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, g_Address , VIRGIN_STAMP_VALUE ) != HAL_OK ) {
 8005020:	4c2c      	ldr	r4, [pc, #176]	; (80050d4 <Write_Programming_Data_Values_on_Flash_Memory+0xf8>)
 8005022:	2500      	movs	r5, #0
 8005024:	4e29      	ldr	r6, [pc, #164]	; (80050cc <Write_Programming_Data_Values_on_Flash_Memory+0xf0>)
 8005026:	e00c      	b.n	8005042 <Write_Programming_Data_Values_on_Flash_Memory+0x66>
			asm("nop");
 8005028:	46c0      	nop			; (mov r8, r8)
		g_Address = g_Address + VIRGIN_STAMP_BYTES_WIDTH ;
 800502a:	4a28      	ldr	r2, [pc, #160]	; (80050cc <Write_Programming_Data_Values_on_Flash_Memory+0xf0>)
 800502c:	6813      	ldr	r3, [r2, #0]
 800502e:	3304      	adds	r3, #4
 8005030:	6013      	str	r3, [r2, #0]
	while ( ( g_MemoryProgramStatus == PASSED ) && ( times < VIRGIN_REPEAT_TIMES_ON_FLASH ) )
 8005032:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <Write_Programming_Data_Values_on_Flash_Memory+0xf4>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d110      	bne.n	800505c <Write_Programming_Data_Values_on_Flash_Memory+0x80>
 800503a:	3f01      	subs	r7, #1
 800503c:	b2ff      	uxtb	r7, r7
 800503e:	2f00      	cmp	r7, #0
 8005040:	d00c      	beq.n	800505c <Write_Programming_Data_Values_on_Flash_Memory+0x80>
        if ( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, g_Address , VIRGIN_STAMP_VALUE ) != HAL_OK ) {
 8005042:	0022      	movs	r2, r4
 8005044:	002b      	movs	r3, r5
 8005046:	6831      	ldr	r1, [r6, #0]
 8005048:	2002      	movs	r0, #2
 800504a:	f7fb fd25 	bl	8000a98 <HAL_FLASH_Program>
 800504e:	2800      	cmp	r0, #0
 8005050:	d0ea      	beq.n	8005028 <Write_Programming_Data_Values_on_Flash_Memory+0x4c>
			g_MemoryProgramStatus = FAILED;
 8005052:	2300      	movs	r3, #0
 8005054:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <Write_Programming_Data_Values_on_Flash_Memory+0xf4>)
 8005056:	7013      	strb	r3, [r2, #0]
			asm("nop");
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	e7e6      	b.n	800502a <Write_Programming_Data_Values_on_Flash_Memory+0x4e>
	g_Address 				= FLASH_USER_START_ADDR + OFFSET_1_ST_PROGRAMMING_ADDRESS ;		// START ADDRESS FOR PROGRAMMING DATA
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <Write_Programming_Data_Values_on_Flash_Memory+0xfc>)
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <Write_Programming_Data_Values_on_Flash_Memory+0xf0>)
 8005060:	601a      	str	r2, [r3, #0]
	g_MemoryProgramStatus 	= PASSED ;														// STAMP THE ERROR FLAG
 8005062:	2201      	movs	r2, #1
 8005064:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <Write_Programming_Data_Values_on_Flash_Memory+0xf4>)
 8005066:	701a      	strb	r2, [r3, #0]
	for  ( i = 0 ; i < MAXIMUN_PROGRAMMING_ADDRESSES ; i++ )  {
 8005068:	2400      	movs	r4, #0
		g_MemoryProgramStatus 	= PASSED ;														// STAMP THE ERROR FLAG
 800506a:	001e      	movs	r6, r3
 800506c:	2501      	movs	r5, #1
		if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , g_Address , Current_Data_Value ) != HAL_OK ) {
 800506e:	4f17      	ldr	r7, [pc, #92]	; (80050cc <Write_Programming_Data_Values_on_Flash_Memory+0xf0>)
			g_MemoryProgramStatus = FAILED;
 8005070:	4698      	mov	r8, r3
 8005072:	e00c      	b.n	800508e <Write_Programming_Data_Values_on_Flash_Memory+0xb2>
		g_Address = g_Address + PROGR_DATA_BYTES_WIDTH ;
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <Write_Programming_Data_Values_on_Flash_Memory+0xf0>)
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	3302      	adds	r3, #2
 800507a:	6013      	str	r3, [r2, #0]
		if  ( g_MemoryProgramStatus != PASSED ) {
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <Write_Programming_Data_Values_on_Flash_Memory+0xf4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d015      	beq.n	80050b0 <Write_Programming_Data_Values_on_Flash_Memory+0xd4>
			asm("nop");
 8005084:	46c0      	nop			; (mov r8, r8)
	for  ( i = 0 ; i < MAXIMUN_PROGRAMMING_ADDRESSES ; i++ )  {
 8005086:	3401      	adds	r4, #1
 8005088:	b2e4      	uxtb	r4, r4
 800508a:	2c0d      	cmp	r4, #13
 800508c:	d012      	beq.n	80050b4 <Write_Programming_Data_Values_on_Flash_Memory+0xd8>
		g_MemoryProgramStatus 	= PASSED ;														// STAMP THE ERROR FLAG
 800508e:	7035      	strb	r5, [r6, #0]
		Current_Data_Value    = Retrieve_The_Current_Programming_Data_Value_to_be_Write( i , Source_Data_From ) ;
 8005090:	9901      	ldr	r1, [sp, #4]
 8005092:	0020      	movs	r0, r4
 8005094:	f7ff ff8e 	bl	8004fb4 <Retrieve_The_Current_Programming_Data_Value_to_be_Write>
 8005098:	0002      	movs	r2, r0
		if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , g_Address , Current_Data_Value ) != HAL_OK ) {
 800509a:	2300      	movs	r3, #0
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	2001      	movs	r0, #1
 80050a0:	f7fb fcfa 	bl	8000a98 <HAL_FLASH_Program>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d0e5      	beq.n	8005074 <Write_Programming_Data_Values_on_Flash_Memory+0x98>
			g_MemoryProgramStatus = FAILED;
 80050a8:	2300      	movs	r3, #0
 80050aa:	4642      	mov	r2, r8
 80050ac:	7013      	strb	r3, [r2, #0]
 80050ae:	e7e1      	b.n	8005074 <Write_Programming_Data_Values_on_Flash_Memory+0x98>
			asm("nop");
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	e7e8      	b.n	8005086 <Write_Programming_Data_Values_on_Flash_Memory+0xaa>
	HAL_FLASH_Lock();
 80050b4:	f7fb fcb8 	bl	8000a28 <HAL_FLASH_Lock>
}
 80050b8:	b004      	add	sp, #16
 80050ba:	bc04      	pop	{r2}
 80050bc:	4690      	mov	r8, r2
 80050be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c0:	40022000 	.word	0x40022000
 80050c4:	20000090 	.word	0x20000090
 80050c8:	08007800 	.word	0x08007800
 80050cc:	2000009c 	.word	0x2000009c
 80050d0:	20000014 	.word	0x20000014
 80050d4:	87654321 	.word	0x87654321
 80050d8:	0800780c 	.word	0x0800780c

080050dc <Read_Programming_Data_Values_From_Flash_Memory>:
//
//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////
void        Read_Programming_Data_Values_From_Flash_Memory()
{
 80050dc:	b510      	push	{r4, lr}
	//
	//   FOR LOOP LOGIC TO READ ALL PROGRAMMING DATA FROM THE FLASH MEMORY
	//
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	g_Address 			= FLASH_USER_START_ADDR + OFFSET_1_ST_PROGRAMMING_ADDRESS ;	// START ADDRESS
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <Read_Programming_Data_Values_From_Flash_Memory+0x24>)
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <Read_Programming_Data_Values_From_Flash_Memory+0x28>)
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	4a08      	ldr	r2, [pc, #32]	; (8005108 <Read_Programming_Data_Values_From_Flash_Memory+0x2c>)
 80050e6:	0014      	movs	r4, r2
 80050e8:	341a      	adds	r4, #26
	for  ( i = 0 ; i < MAXIMUN_PROGRAMMING_ADDRESSES ; i++ )  {
		////////////////////////////////////////////////////////////
		//  READ PROCEDURE FOR 16 BIT PROGRAMMING DATA VALUES
		////////////////////////////////////////////////////////////
		Current_Data_Value = *(__IO uint16_t *)g_Address ;
 80050ea:	0019      	movs	r1, r3
 80050ec:	680b      	ldr	r3, [r1, #0]
 80050ee:	8818      	ldrh	r0, [r3, #0]
	*/

	////////////////////////////////////////////
	//  Give Back to the program Variables
	////////////////////////////////////////////
	g_Programming_Data_Array[ Programming_Data_Sequence_Index ] = Data_Value ;
 80050f0:	8010      	strh	r0, [r2, #0]
		g_Address = g_Address + PROGR_DATA_BYTES_WIDTH ;
 80050f2:	3302      	adds	r3, #2
 80050f4:	600b      	str	r3, [r1, #0]
 80050f6:	3202      	adds	r2, #2
	for  ( i = 0 ; i < MAXIMUN_PROGRAMMING_ADDRESSES ; i++ )  {
 80050f8:	42a2      	cmp	r2, r4
 80050fa:	d1f7      	bne.n	80050ec <Read_Programming_Data_Values_From_Flash_Memory+0x10>
}
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	0800780c 	.word	0x0800780c
 8005104:	2000009c 	.word	0x2000009c
 8005108:	20000490 	.word	0x20000490

0800510c <Startup_Sequence_for_Load_Programming_Data>:
{
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	46c6      	mov	lr, r8
 8005110:	b500      	push	{lr}
	g_Address 			= FLASH_USER_START_ADDR;
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <Startup_Sequence_for_Load_Programming_Data+0x74>)
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <Startup_Sequence_for_Load_Programming_Data+0x78>)
 8005116:	601a      	str	r2, [r3, #0]
	g_MemoryProgramStatus = PASSED;
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <Startup_Sequence_for_Load_Programming_Data+0x7c>)
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
	while ( ( g_MemoryProgramStatus == PASSED ) && ( times < VIRGIN_REPEAT_TIMES_ON_FLASH ) )
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d11a      	bne.n	800515a <Startup_Sequence_for_Load_Programming_Data+0x4e>
 8005124:	3302      	adds	r3, #2
		g_Data = *(__IO uint32_t *)g_Address;
 8005126:	4f17      	ldr	r7, [pc, #92]	; (8005184 <Startup_Sequence_for_Load_Programming_Data+0x78>)
 8005128:	4e18      	ldr	r6, [pc, #96]	; (800518c <Startup_Sequence_for_Load_Programming_Data+0x80>)
		if ( g_Data != VIRGIN_STAMP_VALUE )
 800512a:	4d19      	ldr	r5, [pc, #100]	; (8005190 <Startup_Sequence_for_Load_Programming_Data+0x84>)
			g_MemoryProgramStatus = FAILED;
 800512c:	2200      	movs	r2, #0
 800512e:	4694      	mov	ip, r2
		g_Address = g_Address + VIRGIN_STAMP_BYTES_WIDTH ;
 8005130:	003c      	movs	r4, r7
	while ( ( g_MemoryProgramStatus == PASSED ) && ( times < VIRGIN_REPEAT_TIMES_ON_FLASH ) )
 8005132:	4a15      	ldr	r2, [pc, #84]	; (8005188 <Startup_Sequence_for_Load_Programming_Data+0x7c>)
 8005134:	4690      	mov	r8, r2
		g_Data = *(__IO uint32_t *)g_Address;
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	6811      	ldr	r1, [r2, #0]
 800513a:	6031      	str	r1, [r6, #0]
		if ( g_Data != VIRGIN_STAMP_VALUE )
 800513c:	42a9      	cmp	r1, r5
 800513e:	d002      	beq.n	8005146 <Startup_Sequence_for_Load_Programming_Data+0x3a>
			g_MemoryProgramStatus = FAILED;
 8005140:	4911      	ldr	r1, [pc, #68]	; (8005188 <Startup_Sequence_for_Load_Programming_Data+0x7c>)
 8005142:	4660      	mov	r0, ip
 8005144:	7008      	strb	r0, [r1, #0]
		g_Address = g_Address + VIRGIN_STAMP_BYTES_WIDTH ;
 8005146:	3204      	adds	r2, #4
 8005148:	6022      	str	r2, [r4, #0]
	while ( ( g_MemoryProgramStatus == PASSED ) && ( times < VIRGIN_REPEAT_TIMES_ON_FLASH ) )
 800514a:	4642      	mov	r2, r8
 800514c:	7812      	ldrb	r2, [r2, #0]
 800514e:	2a01      	cmp	r2, #1
 8005150:	d103      	bne.n	800515a <Startup_Sequence_for_Load_Programming_Data+0x4e>
 8005152:	3b01      	subs	r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ed      	bne.n	8005136 <Startup_Sequence_for_Load_Programming_Data+0x2a>
	if ( g_MemoryProgramStatus == FAILED ) {
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <Startup_Sequence_for_Load_Programming_Data+0x7c>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <Startup_Sequence_for_Load_Programming_Data+0x66>
		PCB_Green_LED_OFF();
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <Startup_Sequence_for_Load_Programming_Data+0x88>)
 8005166:	619a      	str	r2, [r3, #24]
	Read_Programming_Data_Values_From_Flash_Memory();
 8005168:	f7ff ffb8 	bl	80050dc <Read_Programming_Data_Values_From_Flash_Memory>
}
 800516c:	bc04      	pop	{r2}
 800516e:	4690      	mov	r8, r2
 8005170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Write_Programming_Data_Values_on_Flash_Memory( DATA_SOURCE_DEFAULT );
 8005172:	2001      	movs	r0, #1
 8005174:	f7ff ff32 	bl	8004fdc <Write_Programming_Data_Values_on_Flash_Memory>
		PCB_Green_LED_ON();
 8005178:	2240      	movs	r2, #64	; 0x40
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <Startup_Sequence_for_Load_Programming_Data+0x88>)
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
 800517e:	e7f3      	b.n	8005168 <Startup_Sequence_for_Load_Programming_Data+0x5c>
 8005180:	08007800 	.word	0x08007800
 8005184:	2000009c 	.word	0x2000009c
 8005188:	20000014 	.word	0x20000014
 800518c:	20000010 	.word	0x20000010
 8005190:	87654321 	.word	0x87654321
 8005194:	48000400 	.word	0x48000400

08005198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005198:	b500      	push	{lr}
 800519a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519c:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_MspInit+0x50>)
 800519e:	6991      	ldr	r1, [r2, #24]
 80051a0:	2301      	movs	r3, #1
 80051a2:	4319      	orrs	r1, r3
 80051a4:	6191      	str	r1, [r2, #24]
 80051a6:	6992      	ldr	r2, [r2, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80051ae:	2200      	movs	r2, #0
 80051b0:	2100      	movs	r1, #0
 80051b2:	2005      	movs	r0, #5
 80051b4:	4240      	negs	r0, r0
 80051b6:	f7fb fa99 	bl	80006ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80051ba:	2200      	movs	r2, #0
 80051bc:	2100      	movs	r1, #0
 80051be:	2002      	movs	r0, #2
 80051c0:	4240      	negs	r0, r0
 80051c2:	f7fb fa93 	bl	80006ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	2001      	movs	r0, #1
 80051cc:	4240      	negs	r0, r0
 80051ce:	f7fb fa8d 	bl	80006ec <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */

  /* Peripheral interrupt init */				//		N_99
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2100      	movs	r1, #0
 80051d6:	2004      	movs	r0, #4
 80051d8:	f7fb fa88 	bl	80006ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80051dc:	2004      	movs	r0, #4
 80051de:	f7fb fab9 	bl	8000754 <HAL_NVIC_EnableIRQ>

}
 80051e2:	b003      	add	sp, #12
 80051e4:	bd00      	pop	{pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	40021000 	.word	0x40021000

080051ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051ec:	b500      	push	{lr}
 80051ee:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <HAL_ADC_MspInit+0x3c>)
 80051f2:	6802      	ldr	r2, [r0, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_ADC_MspInit+0x10>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051f8:	b007      	add	sp, #28
 80051fa:	bd00      	pop	{pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051fc:	4a0b      	ldr	r2, [pc, #44]	; (800522c <HAL_ADC_MspInit+0x40>)
 80051fe:	6991      	ldr	r1, [r2, #24]
 8005200:	2080      	movs	r0, #128	; 0x80
 8005202:	0080      	lsls	r0, r0, #2
 8005204:	4301      	orrs	r1, r0
 8005206:	6191      	str	r1, [r2, #24]
 8005208:	6993      	ldr	r3, [r2, #24]
 800520a:	4003      	ands	r3, r0
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCU_AD_SWITCH_Pin;
 8005210:	2301      	movs	r3, #1
 8005212:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005214:	3302      	adds	r3, #2
 8005216:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(MCU_AD_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800521c:	a901      	add	r1, sp, #4
 800521e:	4804      	ldr	r0, [pc, #16]	; (8005230 <HAL_ADC_MspInit+0x44>)
 8005220:	f7fb fd1e 	bl	8000c60 <HAL_GPIO_Init>
}
 8005224:	e7e8      	b.n	80051f8 <HAL_ADC_MspInit+0xc>
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	40012400 	.word	0x40012400
 800522c:	40021000 	.word	0x40021000
 8005230:	48000400 	.word	0x48000400

08005234 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005234:	b500      	push	{lr}
 8005236:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005238:	4b14      	ldr	r3, [pc, #80]	; (800528c <HAL_I2C_MspInit+0x58>)
 800523a:	6802      	ldr	r2, [r0, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_I2C_MspInit+0x10>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005240:	b007      	add	sp, #28
 8005242:	bd00      	pop	{pc}
    GPIO_InitStruct.Pin 		= GPIO_PIN_9|GPIO_PIN_10;
 8005244:	23c0      	movs	r3, #192	; 0xc0
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 800524a:	2312      	movs	r3, #18
 800524c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull 		= GPIO_PULLUP;
 800524e:	3b11      	subs	r3, #17
 8005250:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_HIGH;
 8005252:	3302      	adds	r3, #2
 8005254:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8005256:	3301      	adds	r3, #1
 8005258:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525a:	a901      	add	r1, sp, #4
 800525c:	2090      	movs	r0, #144	; 0x90
 800525e:	05c0      	lsls	r0, r0, #23
 8005260:	f7fb fcfe 	bl	8000c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <HAL_I2C_MspInit+0x5c>)
 8005266:	69d1      	ldr	r1, [r2, #28]
 8005268:	2080      	movs	r0, #128	; 0x80
 800526a:	0380      	lsls	r0, r0, #14
 800526c:	4301      	orrs	r1, r0
 800526e:	61d1      	str	r1, [r2, #28]
 8005270:	69d3      	ldr	r3, [r2, #28]
 8005272:	4003      	ands	r3, r0
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005278:	2200      	movs	r2, #0
 800527a:	2100      	movs	r1, #0
 800527c:	2017      	movs	r0, #23
 800527e:	f7fb fa35 	bl	80006ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005282:	2017      	movs	r0, #23
 8005284:	f7fb fa66 	bl	8000754 <HAL_NVIC_EnableIRQ>
}
 8005288:	e7da      	b.n	8005240 <HAL_I2C_MspInit+0xc>
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	40005400 	.word	0x40005400
 8005290:	40021000 	.word	0x40021000

08005294 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005294:	b530      	push	{r4, r5, lr}
 8005296:	b087      	sub	sp, #28
 8005298:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800529a:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_UART_MspInit+0x88>)
 800529c:	6802      	ldr	r2, [r0, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_UART_MspInit+0x12>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80052a2:	b007      	add	sp, #28
 80052a4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_UART_MspInit+0x8c>)
 80052a8:	6991      	ldr	r1, [r2, #24]
 80052aa:	2080      	movs	r0, #128	; 0x80
 80052ac:	01c0      	lsls	r0, r0, #7
 80052ae:	4301      	orrs	r1, r0
 80052b0:	6191      	str	r1, [r2, #24]
 80052b2:	6993      	ldr	r3, [r2, #24]
 80052b4:	4003      	ands	r3, r0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin 		= GPIO_PIN_2|GPIO_PIN_3;
 80052ba:	230c      	movs	r3, #12
 80052bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;					//	SOS_1  CHANGE    GPIO_MODE_AF_OD ;
 80052be:	3b0a      	subs	r3, #10
 80052c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80052c2:	2500      	movs	r5, #0
 80052c4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_HIGH;				//  SOS_2  CHANGE      GPIO_SPEED_FREQ_LOW ;
 80052c6:	3301      	adds	r3, #1
 80052c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate 	= GPIO_AF1_USART1;
 80052ca:	3b02      	subs	r3, #2
 80052cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ce:	a901      	add	r1, sp, #4
 80052d0:	2090      	movs	r0, #144	; 0x90
 80052d2:	05c0      	lsls	r0, r0, #23
 80052d4:	f7fb fcc4 	bl	8000c60 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance 				= DMA1_Channel2;
 80052d8:	4812      	ldr	r0, [pc, #72]	; (8005324 <HAL_UART_MspInit+0x90>)
 80052da:	4b13      	ldr	r3, [pc, #76]	; (8005328 <HAL_UART_MspInit+0x94>)
 80052dc:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 80052de:	2310      	movs	r3, #16
 80052e0:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 80052e2:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 80052e4:	3370      	adds	r3, #112	; 0x70
 80052e6:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052e8:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 80052ea:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode 				= DMA_NORMAL;
 80052ec:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 80052ee:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80052f0:	f7fb fa6c 	bl	80007cc <HAL_DMA_Init>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d10b      	bne.n	8005310 <HAL_UART_MspInit+0x7c>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <HAL_UART_MspInit+0x90>)
 80052fa:	6623      	str	r3, [r4, #96]	; 0x60
 80052fc:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80052fe:	2200      	movs	r2, #0
 8005300:	2100      	movs	r1, #0
 8005302:	201b      	movs	r0, #27
 8005304:	f7fb f9f2 	bl	80006ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005308:	201b      	movs	r0, #27
 800530a:	f7fb fa23 	bl	8000754 <HAL_NVIC_EnableIRQ>
}
 800530e:	e7c8      	b.n	80052a2 <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8005310:	21e2      	movs	r1, #226	; 0xe2
 8005312:	4806      	ldr	r0, [pc, #24]	; (800532c <HAL_UART_MspInit+0x98>)
 8005314:	f7ff fbde 	bl	8004ad4 <_Error_Handler>
 8005318:	e7ee      	b.n	80052f8 <HAL_UART_MspInit+0x64>
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	40013800 	.word	0x40013800
 8005320:	40021000 	.word	0x40021000
 8005324:	200001d8 	.word	0x200001d8
 8005328:	4002001c 	.word	0x4002001c
 800532c:	08005514 	.word	0x08005514

08005330 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005330:	4770      	bx	lr

08005332 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {

	  asm("nop");
 8005332:	46c0      	nop			; (mov r8, r8)
	  asm("nop");
 8005334:	46c0      	nop			; (mov r8, r8)
	  asm("nop");
 8005336:	46c0      	nop			; (mov r8, r8)
	  asm("nop");
 8005338:	46c0      	nop			; (mov r8, r8)
	  asm("nop");
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	e7f9      	b.n	8005332 <HardFault_Handler>

0800533e <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800533e:	4770      	bx	lr

08005340 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005340:	4770      	bx	lr
	...

08005344 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005344:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  g_Update_SysTick = MY_TRUE ;
 8005346:	2201      	movs	r2, #1
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <SysTick_Handler+0x14>)
 800534a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800534c:	f7fa ff8a 	bl	8000264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005350:	f7fb fa37 	bl	80007c2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005354:	bd10      	pop	{r4, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	2000007b 	.word	0x2000007b

0800535c <I2C1_IRQHandler>:

/**
* @brief This function handles I2C1 global interrupt.
*/
void I2C1_IRQHandler(void)
{
 800535c:	b510      	push	{r4, lr}
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  */

	//    NEW	N_62
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800535e:	4c04      	ldr	r4, [pc, #16]	; (8005370 <I2C1_IRQHandler+0x14>)
 8005360:	0020      	movs	r0, r4
 8005362:	f7fb fecd 	bl	8001100 <HAL_I2C_EV_IRQHandler>
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005366:	0020      	movs	r0, r4
 8005368:	f7fc fb2b 	bl	80019c2 <HAL_I2C_ER_IRQHandler>



}
 800536c:	bd10      	pop	{r4, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	2000014c 	.word	0x2000014c

08005374 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 8005374:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005376:	4802      	ldr	r0, [pc, #8]	; (8005380 <DMA1_Channel2_3_IRQHandler+0xc>)
 8005378:	f7fb fad0 	bl	800091c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800537c:	bd10      	pop	{r4, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	200001d8 	.word	0x200001d8

08005384 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8005384:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005386:	4802      	ldr	r0, [pc, #8]	; (8005390 <USART1_IRQHandler+0xc>)
 8005388:	f7fd fbf2 	bl	8002b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800538c:	bd10      	pop	{r4, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	2000021c 	.word	0x2000021c

08005394 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <SystemInit+0x48>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	430a      	orrs	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	480f      	ldr	r0, [pc, #60]	; (80053e0 <SystemInit+0x4c>)
 80053a2:	4002      	ands	r2, r0
 80053a4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	480e      	ldr	r0, [pc, #56]	; (80053e4 <SystemInit+0x50>)
 80053aa:	4002      	ands	r2, r0
 80053ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	480d      	ldr	r0, [pc, #52]	; (80053e8 <SystemInit+0x54>)
 80053b2:	4002      	ands	r2, r0
 80053b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	480c      	ldr	r0, [pc, #48]	; (80053ec <SystemInit+0x58>)
 80053ba:	4002      	ands	r2, r0
 80053bc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	200f      	movs	r0, #15
 80053c2:	4382      	bics	r2, r0
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80053c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c8:	4809      	ldr	r0, [pc, #36]	; (80053f0 <SystemInit+0x5c>)
 80053ca:	4002      	ands	r2, r0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80053ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d0:	438a      	bics	r2, r1
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]

}
 80053d8:	4770      	bx	lr
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	40021000 	.word	0x40021000
 80053e0:	08ffb80c 	.word	0x08ffb80c
 80053e4:	fef6ffff 	.word	0xfef6ffff
 80053e8:	fffbffff 	.word	0xfffbffff
 80053ec:	ffc0ffff 	.word	0xffc0ffff
 80053f0:	fffffeec 	.word	0xfffffeec

080053f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053f4:	480d      	ldr	r0, [pc, #52]	; (800542c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053f8:	480d      	ldr	r0, [pc, #52]	; (8005430 <LoopForever+0x6>)
  ldr r1, =_edata
 80053fa:	490e      	ldr	r1, [pc, #56]	; (8005434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053fc:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <LoopForever+0xe>)
  movs r3, #0
 80053fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005400:	e002      	b.n	8005408 <LoopCopyDataInit>

08005402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005406:	3304      	adds	r3, #4

08005408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800540a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800540c:	d3f9      	bcc.n	8005402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540e:	4a0b      	ldr	r2, [pc, #44]	; (800543c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005410:	4c0b      	ldr	r4, [pc, #44]	; (8005440 <LoopForever+0x16>)
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005414:	e001      	b.n	800541a <LoopFillZerobss>

08005416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005418:	3204      	adds	r2, #4

0800541a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800541a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800541c:	d3fb      	bcc.n	8005416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800541e:	f7ff ffb9 	bl	8005394 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005422:	f000 f811 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005426:	f7ff fc7b 	bl	8004d20 <main>

0800542a <LoopForever>:

LoopForever:
    b LoopForever
 800542a:	e7fe      	b.n	800542a <LoopForever>
  ldr   r0, =_estack
 800542c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8005430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005434:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8005438:	08005550 	.word	0x08005550
  ldr r2, =_sbss
 800543c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8005440:	200004ac 	.word	0x200004ac

08005444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005444:	e7fe      	b.n	8005444 <ADC1_IRQHandler>
	...

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	2600      	movs	r6, #0
 800544c:	4d0c      	ldr	r5, [pc, #48]	; (8005480 <__libc_init_array+0x38>)
 800544e:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	2600      	movs	r6, #0
 800545a:	f000 f819 	bl	8005490 <_init>
 800545e:	4d0a      	ldr	r5, [pc, #40]	; (8005488 <__libc_init_array+0x40>)
 8005460:	4c0a      	ldr	r4, [pc, #40]	; (800548c <__libc_init_array+0x44>)
 8005462:	1b64      	subs	r4, r4, r5
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	00b3      	lsls	r3, r6, #2
 800546e:	58eb      	ldr	r3, [r5, r3]
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	00b3      	lsls	r3, r6, #2
 8005478:	58eb      	ldr	r3, [r5, r3]
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	08005548 	.word	0x08005548
 8005484:	08005548 	.word	0x08005548
 8005488:	08005548 	.word	0x08005548
 800548c:	0800554c 	.word	0x0800554c

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
